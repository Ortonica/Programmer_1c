&НаСервере
Процедура РСК_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	//++ РС Консалт: Трофимов Евгений 05.07.2022 Задача 17924
	//e1cib/data/Документ.Задание?ref=b6d469d456107fef47bae0d8601fa57f
	//Скрываем фкладку Выдача ТСР, если пользователю она не нужна
	ВидимостьТСР = РСК_ВызовСервера.ЕстьРоль("РСК_МенеджерПоВыдачеТСР");
	Элементы.РСК_ВыдачаТСР.Видимость = ВидимостьТСР;
	//-- КонецЗадачи 17924	                                                                  
	
	
	//++РС Консалт Назаров М.Ю. 22 июля 2022 г. 11:19:28  
	// Добавить в хоз операции "Реализация через коммисионера"
	РеализацияЧерезКомиссионера = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияЧерезКомиссионера");
	Если Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(РеализацияЧерезКомиссионера) = Неопределено Тогда 
		Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(РеализацияЧерезКомиссионера);
	КонецЕсли;
	//--РС Консалт Назаров М.Ю. 22 июля 2022 г. 11:19:28                  
	
	//++РС Консалт Назаров М.Ю. 27 июля 2022 г. 15:13:04                  
	//Добавить комнду создания заказа клиента на основании текущего
	НоваяКнопка = ЭтаФорма.Элементы.Добавить("КнопкаСоздатьЗаказНаОсновании", Тип("КнопкаФормы"), Элементы.ПодменюСоздатьНаОснованииОбычное);
	НоваяКнопка.ИмяКоманды = "РС_СоздатьЗаказ";
	НоваяКнопка.Заголовок = "Заказ клиента";
	//--РС Консалт Назаров М.Ю. 27 июля 2022 г. 15:13:04
	
	НовыйЭлементГруппа = Элементы.Вставить("ГруппаВес", Тип("ГруппаФормы"), Элементы.ГруппаИтого, Элементы.ГруппаВсегоСкидка);
	НовыйЭлементГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлементГруппа.ОтображатьЗаголовок = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("РСК_Вес", Тип("ПолеФормы"), НовыйЭлементГруппа);	
	НовыйЭлемент.Заголовок = "Вес всего/к отгрузке";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "РСК_Вес";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	НовыйЭлемент.Ширина = 12;
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	
	НовыйЭлементГруппа = Элементы.Вставить("ГруппаОбъем", Тип("ГруппаФормы"), Элементы.ГруппаИтого, НовыйЭлементГруппа);
	НовыйЭлементГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлементГруппа.ОтображатьЗаголовок = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("РСК_Кубатура", Тип("ПолеФормы"), НовыйЭлементГруппа);	
	НовыйЭлемент.Заголовок = "Объем всего/к отгрузке";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "РСК_Кубатура";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	НовыйЭлемент.Ширина = 12;
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;  
	
	//++Конарев ограничение редактирования приоритета
	Элементы.Приоритет.ТолькоПросмотр = НЕ Пользователи.РолиДоступны("ПолныеПрава",Пользователи.ТекущийПользователь());
		
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("УстановитьУсловноеОформление")
Процедура РСК_УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	ОперацииПередачи = ПродажиСервер.ОперацииПередачиТоваров();

	// Условное оформление обеспечения.
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
	УсловноеОформление, "ДатаОтгрузки", "Объект.ДатаОтгрузки", "ДатаОтгрузкиОбязательна");

	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
	УсловноеОформление, "ТоварыДатаОтгрузки", "Объект.Товары.ДатаОтгрузки", "Объект.Товары.ДатаОтгрузкиОбязательна");

	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
	УсловноеОформление, "Склад", "Объект.Склад", "СкладОбязателен");

	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
	УсловноеОформление, "ТоварыСклад", "Объект.Товары.Склад", "Объект.Товары.СкладОбязателен");

	ОбеспечениеВДокументахСервер.УстановитьУсловноеОформлениеОбособленно(
	УсловноеОформление,
	Элементы.ТоварыОбособленно,
	"Объект.Товары.ВариантОбеспечения",
	"Объект.Товары.ТипНоменклатуры");

	ОбеспечениеВДокументахСервер.ДоступныеОстаткиДобавитьОформлениеКолонкиДоступно(ЭтотОбъект);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеПросрочено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовКлиентов.Закрыт;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаРучнойСкидки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ОперацииПередачи;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(ЭтаФорма);

	//

	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтаФорма);

	//

	СкладыСервер.УстановитьУсловноеОформлениеПодразделенияВТЧ(ЭтаФорма);

	//

	#Вставка
	//++ РС Консалт: Трофимов Евгений 28.06.2022 Задача 18502
	//e1cib/data/Документ.Задание?ref=8091e09e31ca7a44432d28359e3002e6
	//Отключаем скрытие колонки «Отправитель» в табличной части «Товары»
	#КонецВставки
	#Удаление
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	#КонецУдаления
	#Вставка
	//Конец отключения скрытия колонки «Отправитель» в табличной части «Товары»
	//-- КонецЗадачи 18502	
	#КонецВставки

	//

	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСодержания(ЭтаФорма);

	//

	ПараметрыУстановки = МногооборотнаяТараСервер.ПараметрыУстановкиУсловногоОформленияДляСтрокСМногооборотнойТарой();

	ПараметрыУстановки.Форма                 = ЭтаФорма;
	ПараметрыУстановки.ЭтоПоступление        = Истина;

	МногооборотнаяТараСервер.УстановитьУсловноеОформлениеДляСтрокСМногооборотнойТарой(ПараметрыУстановки);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");

	//

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Приоритеты.Ссылка КАК Приоритет,
	|	Приоритеты.Цвет   КАК Цвет
	|ИЗ
	|	Справочник.Приоритеты КАК Приоритеты");

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл

			Элемент = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Приоритет.Имя);

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Приоритет");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Выборка.Приоритет;

			ВыборкаЦвет = Выборка.Цвет; // ХранилищеЗначения
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ВыборкаЦвет.Получить());

		КонецЦикла;

	КонецЕсли;

	//

	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Товары");

	//
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
	Элементы.Товары,
	Элементы.ТоварыОтменено.Имя,
	Элементы.ТоварыПричинаОтмены.Имя);

	СписокОперацийПередачи = Новый СписокЗначений();
	СписокОперацийПередачи.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	СписокОперацийПередачи.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи"));

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОперацийПередачи;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("СкладПриИзмененииСервер")
Процедура РСК_СкладПриИзмененииСервер()
	
	#Вставка
	//++ РС Консалт: Трофимов Евгений 28.06.2022 Задача 18502
	//e1cib/data/Документ.Задание?ref=8091e09e31ca7a44432d28359e3002e6
	#КонецВставки
	#Удаление
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	#КонецУдаления
	#Вставка
	СкладГруппа = Истина;
	//-- КонецЗадачи 18502	
	#КонецВставки
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Ложь);

	УстановитьПараметрыВыбораТоварыСклад();

	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;

	ПодготовитьЗаполнитьУстановитьВидимостьСерий();

	ПодготовитьЗаполнитьУстановитьВидимостьСборкиИДоставки();

	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();

	Если Не СкладГруппа Тогда
		Элементы.ТоварыГруппаОтправитель.Заголовок = НСтр("ru = 'Подразделение-отправитель';
		|en = 'Shipping business unit'");
	Иначе
		Элементы.ТоварыГруппаОтправитель.Заголовок = НСтр("ru = 'Отправитель';
		|en = 'Sender'");
	КонецЕсли;

	ПриИзмененииСкладаВТабличнойЧастиСервер();
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ПриЧтенииСозданииНаСервере")
Процедура РСК_ПриЧтенииСозданииНаСервере()
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	Элементы.Статус.Видимость = ИспользоватьСтатусы;
	Элементы.ЗакрытьЗаказ.Видимость = ИспользоватьСтатусы;

	ВалютаДокумента = Объект.Валюта;
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	#Вставка
	//++ РС Консалт: Трофимов Евгений 28.06.2022 Задача 18502
	//e1cib/data/Документ.Задание?ref=8091e09e31ca7a44432d28359e3002e6
	СкладГруппа = Истина;
	//-- КонецЗадачи 18502	
	#КонецВставки
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;

	УстановитьПараметрыВыбораТоварыСклад();

	ИспользоватьСоглашенияСКлиентами                  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьОтгрузкуБезПереходаПраваСобственности = ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности");
	ИспользоватьГрафикиОплаты                         = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	ИспользоватьНесколькоОрганизаций                  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьНаправленияДеятельности               = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
	ИспользоватьПередачуТоваровНаХранение             = ПолучитьФункциональнуюОпцию("ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи");

	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента						= ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");

	ИспользоватьОказаниеАгентскихУслугПриЗакупке = ПолучитьФункциональнуюОпцию("ИспользоватьОказаниеАгентскихУслугПриЗакупке");

	ЗаполнитьСписокВыбораХозяйственныхОпераций(ИспользоватьОказаниеАгентскихУслугПриЗакупке);

	ИспользоватьОтгрузкуБезПереходаПраваСобственности = ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности");

	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();

		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;

		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);

	КонецЕсли;

	КомиссионныеПродажи25 = ?(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
	И (Не ИспользоватьСоглашенияСКлиентами
	ИЛИ (ЗначениеЗаполнено(Объект.Соглашение)
	И Объект.Соглашение.КомиссионныеПродажи25
	И Объект.Соглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию)), Истина, Ложь);

	УстановитьВидимостьОпераций();
	УстановитьДоступностьЭлементовПоСтатусуСервер();

	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();

	ОбновитьДубликатыЗависимыхРеквизитов();
	ОбновитьСостояниеСервер();

	УстановитьВидимостьЭлементовПоОперацииСервер();

	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказКлиента));
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	ЗаполнитьСписокВыбораДатаОтгрузки();

	Элементы.Организация.Видимость = ИспользоватьНесколькоОрганизаций;

	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);

	ДанныеПоФоновомуЗаданиюПолучениеПеревозчиков = ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект,,,, Истина);

	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	УстановитьВидимостьОбеспечения();

	РассылкиИОповещенияКлиентам.УстановитьВидимостьПодпискиНаОповещенияВОбъекте(
	Элементы.ГруппаПодпискаНаОповещения,
	Объект.Партнер,
	ПредопределенноеЗначение("Перечисление.ТипыСобытийОповещений.ИзменениеСостоянияЗаказа"));

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСостояниеЭДО", "Видимость", ИспользоватьСтатусы, Истина);

	ИнициироватьПолучениеДокументовНаОсновании();

	УстановитьПривилегированныйРежим(Истина);

	ВариантОбеспеченияПоУмолчанию = ВариантОбеспеченияПоУмолчанию();
	ВариантОбеспеченияИФлагОбособленно = ПродажиСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(
	Объект.Соглашение,
	Объект.Статус,
	ВариантОбеспеченияПоУмолчанию);

	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);

	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Товары);

	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтотОбъект);

	ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();

КонецПроцедуры

&НаКлиенте
Процедура РСК_ТоварыВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//РС Консалт: Трофимов Евгений 05.07.2022
	//Мне не понравилось 5 раз кликать, чтобы открылось окно выбора склада
	//Теперь нужно кликать только 2 раза :)
	Если Поле = Элементы.ТоварыСклад Тогда
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов());
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(
				"Обработка.ЗапросКоличестваИСерий.Форма",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РСК_РС_СоздатьЗаказПосле(Команда)
	
	//++РС Консалт Назаров М.Ю. 27 июля 2022 г. 12:40:57   
	// Создание заказа на основании
	ЗаказКлиентаФорма = ПолучитьФорму("Документ.ЗаказКлиента.ФормаОбъекта");
	ДанныеФормы = ЗаказКлиентаФорма.Объект; // Получаем объект формы в переменную
	
	ЗаполнитьЗаказКлиентаНаСервере(ДанныеФормы); // Заполняем документ на сервере
	КопироватьДанныеФормы(ДанныеФормы, ЗаказКлиентаФорма.Объект); // копируем наш объект в объект формы и далее открываем ее
	
	ЗаказКлиентаФорма.Открыть();
    //--РС Консалт Назаров М.Ю. 27 июля 2022 г. 12:40:57
	
КонецПроцедуры

// Перенесен из ДСТ расширения
// Заполнение заказа сделанного на основании текущего заказа
&НаСервере
Функция ЗаполнитьЗаказКлиентаНаСервере(ДанныеФормы);

	ЗаказКлиентаНовый = ДанныеФормыВЗначение(ДанныеФормы, Тип("ДокументОбъект.ЗаказКлиента")); // Получаем объект из данных формы
	ЗаказКлиентаНовый = Документы.ЗаказКлиента.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ЗаказКлиентаНовый, Объект, ,"Номер, Дата"); 
	ЗаказКлиентаНовый.РСК_ЗаказКлиентаОснование = Объект.Ссылка;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера Тогда 
		
		ЗаказКлиентаНовый.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		ЗаказКлиентаНовый.Контрагент = Объект.Договор.КомиссионерКонтрагент;
		ЗаказКлиентаНовый.Партнер = Объект.Договор.КомиссионерПартнер;
		ЗаказКлиентаНовый.Договор = Объект.Договор.ДоговорСКомиссионером;
		ЗаказКлиентаНовый.Соглашение = Неопределено;
	
	КонецЕсли;             
	
	ЗаказКлиентаНовый.Дата = ТекущаяДата();         
	
	Если ЗаказКлиентаНовый.ДатаОтгрузки < НачалоДня(ЗаказКлиентаНовый.Дата) Тогда
		ЗаказКлиентаНовый.ДатаОтгрузки = НачалоДня(ЗаказКлиентаНовый.Дата);
	КонецЕсли;        
	
	Для каждого Строка из Объект.Товары Цикл
		НоваяСтрока = ЗаказКлиентаНовый.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;                     
	
	Для каждого Строка из Объект.ЭтапыГрафикаОплаты Цикл
		НоваяСтрока = ЗаказКлиентаНовый.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;                
	
	Для каждого Строка из Объект.СкидкиНаценки Цикл
		НоваяСтрока = ЗаказКлиентаНовый.СкидкиНаценки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;           
	
	Для каждого Строка из Объект.ДополнительныеРеквизиты Цикл
		НоваяСтрока = ЗаказКлиентаНовый.ДополнительныеРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;   
	
	ЗначениеВДанныеФормы(ЗаказКлиентаНовый, ДанныеФормы); // Кладем обратно в объект формы уже созданный документ

КонецФункции

&НаКлиенте
&Перед("ПриОткрытии")
Процедура РСК_ПриОткрытии(Отказ)
	//++РС Консалт: Минаков А.С.
	Элементы.ТоварыНоменклатураПартнера.Видимость = Истина
	//++РС Консалт: Минаков А.С.
КонецПроцедуры

&НаКлиенте
Процедура РСК_ЗаписатьВыдачуТСРБезПроведенияПосле(Команда)
	//++ РС Консалт: Трофимов Евгений 06.11.2022 Задача 21688
	//e1cib/data/Документ.Задание?ref=894dc2cbb41e7305494ae6831d66d37b
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(,"Эту кнопку можно использовать только если документ уже был ранее записан");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("РСК_ПослеВопросаОЗаписиВкладкиВыдачаТСР", ЭтаФорма), 
		"Все изменения за пределами вкладки «Выдача ТСР» будут потеряны! Продолжить?", 
		РежимДиалогаВопрос.ДаНет
	);	
	//-- КонецЗадачи 21688
КонецПроцедуры

&НаКлиенте
Процедура РСК_ПослеВопросаОЗаписиВкладкиВыдачаТСР(РезультатВопроса, ДополнительныеПараметры) Экспорт
	//++ РС Консалт: Трофимов Евгений 06.11.2022 Задача 21688
	//e1cib/data/Документ.Задание?ref=894dc2cbb41e7305494ae6831d66d37b
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаписи = Новый Структура;
	ДанныеДляЗаписи.Вставить("реа_ДляВыдачи", Объект.реа_ДляВыдачи);
	ДанныеДляЗаписи.Вставить("реа_ТерриториальнаяГруппа", Объект.реа_ТерриториальнаяГруппа);
	ДанныеДляЗаписи.Вставить("РСК_ПечатнаяФормаАкта", Объект.РСК_ПечатнаяФормаАкта);
	ДанныеДляЗаписи.Вставить("РСК_ПечатнаяФормаОтчета", Объект.РСК_ПечатнаяФормаОтчета);
	ДанныеДляЗаписи.Вставить("РСК_ФИОПодписанта", Объект.РСК_ФИОПодписанта);
	ДанныеДляЗаписи.Вставить("РСК_ПоставщикГК", Объект.РСК_ПоставщикГК);
	ДанныеДляЗаписи.Вставить("РСК_АдресПоставщикаГК", Объект.РСК_АдресПоставщикаГК);
	ДанныеДляЗаписи.Вставить("РСК_ПредставительПоставщикаГК", Объект.РСК_ПредставительПоставщикаГК);
	ДанныеДляЗаписи.Вставить("РСК_ДоверенностьПредставителяГК", Объект.РСК_ДоверенностьПредставителяГК);
	ДанныеДляЗаписи.Вставить("РСК_СрокДействияГК", Объект.РСК_СрокДействияГК);
	ДанныеДляЗаписи.Вставить("РСК_ОбъектПоставкиГК", Объект.РСК_ОбъектПоставкиГК);
	ДанныеДляЗаписи.Вставить("Комментарий", Объект.Комментарий);
	
	ЗаписатьВкладкуВыдачаТСР(ДанныеДляЗаписи);
	
	ПоказатьОповещениеПользователя("Документ успешно записан",ПолучитьНавигационнуюСсылку(Объект.Ссылка),Объект.Ссылка);
	Модифицированность = Ложь;
	
	//-- КонецЗадачи 21688
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВкладкуВыдачаТСР(ДанныеДляЗаписи)
	//++ РС Консалт: Трофимов Евгений 06.11.2022 Задача 21688
	//e1cib/data/Документ.Задание?ref=894dc2cbb41e7305494ae6831d66d37b

	оДок = Объект.Ссылка.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(оДок, ДанныеДляЗаписи);
	оДок.ОбменДанными.Загрузка = Истина;
	оДок.Записать(РежимЗаписиДокумента.Запись);
	ЗначениеВРеквизитФормы(оДок, "Объект");
	
	//-- КонецЗадачи 21688
КонецПроцедуры // ЗаписатьВкладкуВыдачаТСР()

&НаКлиентеНаСервереБезКонтекста
&После("РассчитатьИтоговыеПоказателиЗаказа")
Процедура РСК_РассчитатьИтоговыеПоказателиЗаказа(Форма)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	ПсевдоТаблицаТовары = ТаблицаЗначенийВМассив(Форма.Объект.Товары);
	
	ВГХ = РСК_РассчитатьВГХ(ПсевдоТаблицаТовары);
	ЗаполнитьЗначенияСвойств(Форма, ВГХ)
	//++ РС Консалт: Минаков А.С. Задача 20226
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	Массив = Новый Массив();
	СтруктураСтрокой = "Номенклатура,ВариантОбеспечения,КоличествоУпаковок,Упаковка";
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;
	//++ РС Консалт: Минаков А.С. Задача 20226

КонецФункции

&НаСервереБезКонтекста
Функция РСК_РассчитатьВГХ(ПсевдоТаблицаТовары) 
	
	//++ РС Консалт: Минаков А.С. Задача 20226		
	ТаблицаТовары = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ПсевдоТаблицаТовары);	
	Если ТаблицаТовары.Количество() Тогда
		Запрос = Новый Запрос(	
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) КАК КОтгрузке,
		|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТовары.Упаковка КАК Упаковка,
		|	ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК ПустаяУпаковка
		|ПОМЕСТИТЬ ВтТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТаблицаТовары.КОтгрузке КАК КОтгрузке,
		|	СУММА(ВтТаблицаТовары.КоличествоУпаковок * ЕСТЬNULL(ВЫБОР
		|				КОГДА ВтТаблицаТовары.ПустаяУпаковка
		|					ТОГДА ШтучныйВесОбъем.Вес
		|				ИНАЧЕ УпаковкиЕдиницыИзмерения.Вес
		|			КОНЕЦ, 0)) КАК Вес,
		|	СУММА(ВтТаблицаТовары.КоличествоУпаковок * ЕСТЬNULL(ВЫБОР
		|				КОГДА ВтТаблицаТовары.ПустаяУпаковка
		|					ТОГДА ШтучныйВесОбъем.Объем
		|				ИНАЧЕ УпаковкиЕдиницыИзмерения.Объем
		|			КОНЕЦ, 0)) КАК Объем
		|ИЗ
		|	ВтТаблицаТовары КАК ВтТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО ВтТаблицаТовары.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Упаковки.Владелец КАК Номенклатура,
		|			МИНИМУМ(Упаковки.Вес) КАК Вес,
		|			МИНИМУМ(Упаковки.Объем) КАК Объем
		|		ИЗ
		|			Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
		|		ГДЕ
		|			Упаковки.Владелец В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВтТаблицаТовары.Номенклатура
		|					ИЗ
		|						ВтТаблицаТовары КАК ВтТаблицаТовары
		|					ГДЕ
		|						ВтТаблицаТовары.ПустаяУпаковка)
		|			И НЕ Упаковки.ПометкаУдаления
		|			И Упаковки.Числитель = 1
		|			И Упаковки.Знаменатель = 1
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Упаковки.Владелец) КАК ШтучныйВесОбъем
		|		ПО ВтТаблицаТовары.Номенклатура = ШтучныйВесОбъем.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтТаблицаТовары.КОтгрузке
		|
		|УПОРЯДОЧИТЬ ПО
		|	КОтгрузке");
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
		
		ТаблицаВГХ = Запрос.Выполнить().Выгрузить();
		Если ТаблицаВГХ.Количество() = 1 Тогда
			РСК_Вес = Строка("" + Окр(ТаблицаВГХ[0].Вес, 3) + "/" + ?(ТаблицаВГХ[0].КОтгрузке, Окр(ТаблицаВГХ[0].Вес, 3), "0"));
			РСК_Кубатура = Строка("" + Окр(ТаблицаВГХ[0].Объем, 2) + "/" + ?(ТаблицаВГХ[0].КОтгрузке, Окр(ТаблицаВГХ[0].Объем, 2), "0"))
		ИначеЕсли ТаблицаВГХ.Количество() = 2 Тогда
			РСК_Вес = Строка("" + Окр(ТаблицаВГХ[0].Вес, 3) + "/" + Окр(ТаблицаВГХ[1].Вес, 3));
			РСК_Кубатура = Строка("" + Окр(ТаблицаВГХ[0].Объем, 2) + "/" + Окр(ТаблицаВГХ[1].Объем, 2))
		Иначе
			РСК_Вес = "0/0";
			РСК_Кубатура = "0/0"
		КонецЕсли
	Иначе
		РСК_Вес = "0/0";
		РСК_Кубатура = "0/0"
	КонецЕсли;	

	Возврат Новый Структура("РСК_Вес, РСК_Кубатура", РСК_Вес, РСК_Кубатура)
    //++ РС Консалт: Минаков А.С. Задача 20226
	
КонецФункции

&НаСервере
&После("ПередЗаписьюНаСервере")
Процедура РСК_ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//++РС Консалт Назаров М.Ю. 11 ноября 2022 г. 13:47:00                  
	Если Не Отказ Тогда  
		ЗаменитьНоменклатуруВГосКонтракте(ТекущийОбъект);
	КонецЕсли;
	//--РС Консалт Назаров М.Ю. 11 ноября 2022 г. 13:47:00
	
КонецПроцедуры

//++РС Консалт Назаров М.Ю. 11 ноября 2022 г. 14:47:56 
// Замена значений НоменклаткрыПартнера, Номенклатуры, Характеристики в гос.контракте при измении в "заказе клиента"
&НаСервере
Процедура ЗаменитьНоменклатуруВГосКонтракте(Знач ТекущийОбъект)
	
	Попытка 
		
		Если Не ЗначениеЗаполнено(ТекущийОбъект.Договор) 
			Или Не ЗначениеЗаполнено(ТекущийОбъект.Договор.ГосударственныйКонтракт) Тогда 
			Возврат;
		КонецЕсли;

		СтарыеТовары = ТекущийОбъект.Ссылка.Товары.Выгрузить();
		НовыеТовары = ТекущийОбъект.Товары.Выгрузить();
		
		ГосКонтрактОбъект = ТекущийОбъект.Договор.ГосударственныйКонтракт.ПолучитьОбъект();
		НоменклатураКонтракта = ГосКонтрактОбъект.НоменклатураОбъектовЗакупки;
		
		ЕстьИзмененияВКонтракте = Ложь;
		
		Для Каждого НовыйТовар Из НовыеТовары Цикл 
			
			Отбор = Новый Структура;
			Отбор.Вставить("КодСтроки", НовыйТовар.КодСтроки); 
			
			НайденныеСтроки = СтарыеТовары.НайтиСтроки(отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СтарыйТовар = НайденныеСтроки[0];					
			
			Если СтарыйТовар.Номенклатура = НовыйТовар.Номенклатура 
				И СтарыйТовар.НоменклатураПартнера = НовыйТовар.НоменклатураПартнера 
				И СтарыйТовар.Характеристика = НовыйТовар.Характеристика Тогда 
				
				Продолжить;
			КонецЕсли;
			
			ПоискВКонтракте = Новый Структура("Номенклатура,Характеристика,НоменклатураПартнера");
			ЗаполнитьЗначенияСвойств(ПоискВКонтракте,СтарыйТовар);
			
			НайденнСтроки = НоменклатураКонтракта.НайтиСтроки(ПоискВКонтракте);
			Если НайденнСтроки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаСИзменениями = НайденнСтроки[0];					
			
			СтрокаСИзменениями.Номенклатура = НовыйТовар.Номенклатура;
			СтрокаСИзменениями.Характеристика = НовыйТовар.Характеристика;
			СтрокаСИзменениями.НоменклатураПартнера = НовыйТовар.НоменклатураПартнера;
			
			ЕстьИзмененияВКонтракте = Истина;
			
		КонецЦикла;
		
		Если Не ЕстьИзмененияВКонтракте Тогда 
			Возврат;
		КонецЕсли;	
		
		Попытка
			ГосКонтрактОбъект.Записать();
		Исключение
			Сообщение = СтрШаблон("Не удалось перезаписать гос. контракт <%1> по причине: %2", ГосКонтрактОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			ЗаписьЖурналаРегистрации("ПерезаписьГосКонтрактаИзЗаказаКлиента", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		КонецПопытки;  
	Исключение
		ЗаписьЖурналаРегистрации("ПерезаписьГосКонтрактаИзЗаказаКлиента", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры
//--РС Консалт Назаров М.Ю. 11 ноября 2022 г. 14:47:56  

&НаКлиенте
Процедура РСК_ОплатаЧерезPayKeeperПосле(Команда)
	
	ОткрытьФорму("Справочник.РСК_НастройкиPayKeeper.Форма.ФормаПодготовкиПлатежнойСсылкиPayKeeper", 
			Новый Структура("ОснованиеПлатежа", Объект.Ссылка), 
			ЭтаФорма,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
&После("КонтрагентПриИзменении")
Процедура РСК_КонтрагентПриИзменении(Элемент)
	
	//++ РС Консалт: Минаков А.С. Задача 20226	
	РС_ЗаполнитьДоставку()
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

&НаКлиенте
&После("ПартнерПриИзменении")
Процедура РСК_ПартнерПриИзменении(Элемент)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	РС_ЗаполнитьДоставку();
	//++ РС Консалт: Минаков А.С. Задача 20226
	СоглашениеПриИзменении(Неопределено); 
	
КонецПроцедуры

&НаКлиенте
&После("КонтактноеЛицоПриИзменении")
Процедура РСК_КонтактноеЛицоПриИзменении(Элемент)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	РС_ЗаполнитьДоставку()
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

&НаСервере
Процедура РС_ЗаполнитьДоставку(ПриОткрытии = Ложь)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	ДоставкаТоваровКлиентСервер.ОчиститьСпискиВыбораАдресовПолучателяОтправителя(Элементы);
		
	ОтборКонтактнойИнформации = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКонтактнойИнформации.ТипыКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ОтборКонтактнойИнформации.Дата = ?(ЗначениеЗаполнено(Объект.ДатаОтгрузки), Объект.ДатаОтгрузки, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	
	МассивОбъектов = Новый Массив(2);
	МассивОбъектов[0] = Объект.Контрагент;
	МассивОбъектов[1] = Объект.Партнер;
	
	МассивДублей = Новый Массив;
	
	СписокВыбора = Новый СписокЗначений;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(МассивОбъектов, ОтборКонтактнойИнформации);
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл		
		
		Если Не СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			Продолжить
		КонецЕсли;
		
		Если Не ПриОткрытии Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Если Не ЗначениеЗаполнено(Объект.АдресДоставки)
				И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
				
				Объект.АдресДоставки = СтрокаКИ.Представление;
				Объект.АдресДоставкиЗначенияПолей = СтрокаКИ.ЗначенияПолей
			КонецЕсли
		КонецЕсли;
		
		Если Не МассивДублей.Найти(СтрокаКИ.Представление) = Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		МассивДублей.Добавить(СтрокаКИ.Представление);
		
		СтруктураВыбора = СтруктураВыбора(); 
		СтруктураВыбора.АдресДоставки = СтрокаКИ.Представление;
		СтруктураВыбора.АдресДоставкиЗначенияПолей = СтрокаКИ.ЗначенияПолей;
		
		СписокВыбора.Добавить(СтруктураВыбора, "" + СтрокаКИ.Вид + ": " + СтрокаКИ.Представление)
	КонецЦикла;
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл		
		
		Если Не МассивДублей.Найти(СтрокаКИ.Представление) = Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		МассивДублей.Добавить(СтрокаКИ.Представление);
		
		СтруктураВыбора = СтруктураВыбора(); 
		СтруктураВыбора.АдресДоставки = СтрокаКИ.Представление;
		СтруктураВыбора.АдресДоставкиЗначенияПолей = СтрокаКИ.ЗначенияПолей;
		
		СписокВыбора.Добавить(СтруктураВыбора, "" + СтрокаКИ.Вид + ": " + СтрокаКИ.Представление)
	КонецЦикла;
	
	Если Элементы.Найти("АдресДоставкиСамовывоз") <> Неопределено Тогда
		СкопироватьСписокЗначений(Элементы.АдресДоставкиСамовывоз.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если Элементы.Найти("АдресДоставкиПолучателя") <> Неопределено Тогда
		СкопироватьСписокЗначений(Элементы.АдресДоставкиПолучателя.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если Элементы.Найти("АдресДоставкиПолучателя1") <> Неопределено Тогда
		СкопироватьСписокЗначений(Элементы.АдресДоставкиПолучателя1.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если Элементы.Найти("АдресДоставкиПолучателя2") <> Неопределено Тогда
		СкопироватьСписокЗначений(Элементы.АдресДоставкиПолучателя2.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если Элементы.Найти("АдресПоставщика") <> Неопределено Тогда
		СкопироватьСписокЗначений(Элементы.АдресПоставщика.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если Элементы.Найти("АдресПункта") <> Неопределено Тогда
		СкопироватьСписокЗначений(Элементы.АдресПункта.СписокВыбора, СписокВыбора);
	КонецЕсли;
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

&НаСервере
Функция СтруктураВыбора()
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("АдресДоставки", "");
	СтруктураВыбора.Вставить("АдресДоставкиЗначенияПолей", "");
	СтруктураВыбора.Вставить("ЗонаДоставки", Справочники.ЗоныДоставки.ПустаяСсылка());
	СтруктураВыбора.Вставить("ВремяДоставкиС", Дата(1,1,1));
	СтруктураВыбора.Вставить("ВремяДоставкиПо", Дата(1,1,1));
	СтруктураВыбора.Вставить("ДополнительнаяИнформацияПоДоставке", "");
	
	Возврат СтруктураВыбора;
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецФункции

&НаСервере
Процедура СкопироватьСписокЗначений(СписокПриемник, СписокИсточник)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	СписокПриемник.Очистить();
	Для Каждого Элемент Из СписокИсточник Цикл
		СписокПриемник.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

&НаКлиенте
&После("ПриОткрытии")
Процедура РСК_ПриОткрытии1(Отказ)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	РС_ЗаполнитьДоставку(Истина)
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

//++Конарев Отмена пересчета цен и сумм в строках ТЧ Товары с произвольным видом цен 
&НаКлиенте
&ИзменениеИКонтроль("ТоварыХарактеристикаПриИзменении")
Процедура РСК_ТоварыХарактеристикаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий = Новый Структура;
	#Вставка
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
	#КонецВставки
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");  
	#Вставка
	КонецЕсли;
	#КонецВставки
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий,
	"ВариантОбеспечения,ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	#Вставка
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
	#КонецВставки
	ДобавитьДействиеЗаполненияЦен(СтруктураДействий);
	#Вставка
	КонецЕсли;
	#КонецВставки

	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
	ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;

	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);

	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ТоварыСерияПересчитатьЦены")
Процедура РСК_ТоварыСерияПересчитатьЦены(ТекущаяСтрока)

	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	#Удаление
	Если ЦенообразованиеКлиент.НеобходимПересчетЦеныПриИзменении(ТекущаяСтрока.Номенклатура, "Серия", Объект.Дата) Тогда 
	#КонецУдаления
	#Вставка  
	Если ЦенообразованиеКлиент.НеобходимПересчетЦеныПриИзменении(ТекущаяСтрока.Номенклатура, "Серия", Объект.Дата) И ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
	#КонецВставки

		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		ДобавитьДействиеЗаполненияЦен(СтруктураДействий);

		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

		СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ТоварыНоменклатураПартнераПриИзменении")
Процедура РСК_ТоварыНоменклатураПартнераПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	НоменклатураПартнеровКлиент.УстановитьПараметрыВыбораУпаковки(Элемент.ПараметрыВыбора, ТекущаяСтрока);

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПартнера");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	#Вставка
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
	#КонецВставки
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
    #Вставка
	КонецЕсли;
	#КонецВставки
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект, Истина));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	#Вставка
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
	#КонецВставки
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	#Вставка
	КонецЕсли;
	#КонецВставки
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));

	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий,
	"ВариантОбеспечения,ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

КонецПроцедуры

&НаСервере
&Вместо("ПартнерПриИзмененииСервер")
Процедура РСК_ПартнерПриИзмененииСервер() 
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	Иначе
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		Если ИспользоватьДоговорыСКлиентами Тогда
			ЗаполнитьДоговорПоУмолчанию();
		КонецЕсли;
	КонецЕсли;

	//Сторожук Зачистить не заполнять контрагента и соглашение (Соболева)
	НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреПриИзмененииПартнера(Объект.Товары, Объект.Партнер);
	
	СкладПриИзмененииСервер();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	
	ОбновитьДубликатыЗависимыхРеквизитов();
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	
	МассивИзмененныхРеквизитов = Новый Массив;
	МассивИзмененныхРеквизитов.Добавить("Соглашение");
	МассивИзмененныхРеквизитов.Добавить("Партнер");
	МассивИзмененныхРеквизитов.Добавить("Договор");
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, МассивИзмененныхРеквизитов);
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(Объект);
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	ПродажиСервер.ПартнерПриИзменении(Объект);
	
	РассылкиИОповещенияКлиентам.УстановитьВидимостьПодпискиНаОповещенияВОбъекте(
		Элементы.ГруппаПодпискаНаОповещения,
		Объект.Партнер,
		ПредопределенноеЗначение("Перечисление.ТипыСобытийОповещений.ИзменениеСостоянияЗаказа"));
		
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности(ЭтотОбъект);
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	
	ПодготовитьЗаполнитьУстановитьВидимостьСборкиИДоставки();
	

	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭлектронноеАктированиеЕИСУТ.ДоговорПриИзмененииЭлектронноеАктированиеЕИС(ЭтотОбъект, Объект);
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

   	Объект.Соглашение = ИндивидуальноеСоглашениеПоУмолчанию(Объект.Организация,Объект.Партнер,Объект.Подразделение);
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("СоглашениеНачалоВыбора")
Процедура РСК_СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();

	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект; 
	
	#Вставка
	//Конарев Отбор индивидуальных соглашений по подразделению
	ПараметрыВыбораСоглашения.Вставить("Подразделение",Объект.Подразделение);
	#КонецВставки

	// ЭлектронноеВзаимодействие.СервисEDI	
	Если Не РедактированиеРеквизитовEDIКлиентСервер.РеквизитДоступенДляРедактирования(ЭтотОбъект, "Поставщик") Тогда
		ПараметрыВыбораСоглашения.Организация = Объект.Организация;
	КонецЕсли;

	Если Не РедактированиеРеквизитовEDIКлиентСервер.РеквизитДоступенДляРедактирования(ЭтотОбъект, "Покупатель") Тогда
		ПараметрыВыбораСоглашения.Контрагент = Объект.Контрагент;
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СервисEDI

	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоглашениеПоУмолчанию(Организация, Партнер, Подразделение, НеИспользоватьОтборПоОрганизации)
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоОрганизации", НеИспользоватьОтборПоОрганизации);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партнер", Партнер);
    Запрос.УстановитьПараметр("Подразделение", Подразделение);

	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоглашенияСКлиентами.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	СоглашенияСКлиентами.Подразделение = &Подразделение
		|	И (&НеИспользоватьОтборПоОрганизации
		|			ИЛИ СоглашенияСКлиентами.Организация = &Организация)
		|	И СоглашенияСКлиентами.Партнер = &Партнер
		|	И СоглашенияСКлиентами.ВидСоглашенияДляОграниченияЧтения = ЗНАЧЕНИЕ(Перечисление.ВидыСоглашенийСКлиентамиДляОграниченияЧтения.Индивидуальные)
		|	И СоглашенияСКлиентами.ТипСоглашения = &ТипСоглашения
		|	И СоглашенияСКлиентами.Статус = Значение(Перечисление.СтатусыСоглашенийСКлиентами.Действует)";
	Запрос.УстановитьПараметр("ТипСоглашения", Справочники.ТипыСоглашенийСКлиентами.Стандартное());
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;  
	
	Выборка = Результат.Выбрать(); 
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции  

&НаСервереБезКонтекста
Функция ИндивидуальноеСоглашениеПоУмолчанию(Организация, Партнер, Подразделение)
	НеИспользоватьОтборПоОрганизации = НЕ ЗначениеЗаполнено(Организация);
	Соглашение = НайтиСоглашениеПоУмолчанию(Организация, Партнер, Подразделение,НеИспользоватьОтборПоОрганизации);
	Если ЗначениеЗаполнено(Организация) и Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка() Тогда
		Возврат НайтиСоглашениеПоУмолчанию(Справочники.Организации.ПустаяСсылка(), Партнер, Подразделение, Ложь);		
	КонецЕсли;
	Возврат Соглашение;
КонецФункции

&НаСервере
&После("ОрганизацияПриИзмененииСервер")
Процедура РСК_ОрганизацияПриИзмененииСервер() 
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Соглашение = ИндивидуальноеСоглашениеПоУмолчанию(Объект.Организация,Объект.Партнер,Объект.Подразделение);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
&После("ОрганизацияПриИзменении")
Процедура РСК_ОрганизацияПриИзменении(Элемент)
	СоглашениеПриИзменении(Неопределено);
КонецПроцедуры
