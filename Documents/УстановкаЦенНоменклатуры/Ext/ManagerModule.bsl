
&Вместо("ЗаписатьИзмененияЦенНаСервере")
Функция РСК_ЗаписатьИзмененияЦенНаСервере(Форма, Комментарий, ВариантПримененияЦен)
	РеквизитыНовыхДокументов = Новый Структура;
	РеквизитыНовыхДокументов.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	РеквизитыНовыхДокументов.Вставить("Комментарий", Комментарий);
	РеквизитыНовыхДокументов.Вставить("Статус", Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован);
	РеквизитыНовыхДокументов.Вставить("Дата", Форма.Дата);
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма,"УстанавливатьВременныеЦены") Тогда
		УстанавливатьВременныеЦены = Форма.УстанавливатьВременныеЦены;
		РеквизитыНовыхДокументов.Вставить("УстанавливатьВременныеЦены", УстанавливатьВременныеЦены);
		РеквизитыНовыхДокументов.Вставить("ДатаЗавершенияПериодаДействияЦен", Форма.ДатаЗавершенияПериодаДействияЦен);
		СохраненныеДокументыПериодическихЦен = Форма.СохраненныеДокументыПериодическихЦен;
	Иначе
		УстанавливатьВременныеЦены = Неопределено;
	КонецЕсли; 
	
	ИспользуетсяЦенообразование25 = Форма.ИспользуетсяЦенообразование25;
	
	Данные = Новый Структура;
	Данные.Вставить("Форма",                    Форма);
	Данные.Вставить("Документы",                Новый Массив);
	Данные.Вставить("СохранятьБазовые",         Ложь);
	Данные.Вставить("РеквизитыНовыхДокументов", РеквизитыНовыхДокументов);
	Данные.Вставить("ТолькоИзмененные",         Истина);
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "СохраненныеДокументы") Тогда
		СохраненныеДокументы = Форма.СохраненныеДокументы;//ТаблицаЗначений
		Для Каждого СтрокаТЧ Из СохраненныеДокументы Цикл
			ДокументОбъект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
			Данные.Документы.Добавить(ДокументОбъект);
		КонецЦикла;
	КонецЕсли;
	
	УстановкаЦенСервер.ПоместитьЦеныВТабличнуюЧасть(Данные);
	
	МассивДокументы = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ДокументОбъект Из Данные.Документы Цикл
			ТабличнаяЧастьТовары = ?(ИспользуетсяЦенообразование25, ДокументОбъект.Товары2_5, ДокументОбъект.Товары);
			Если ТабличнаяЧастьТовары.Количество() > 0 Тогда
				
				НомерВПределахДня = УстановкаЦенВызовСервера.РассчитатьНомерВПределахДня(
					Форма.Дата, ДокументОбъект.Ссылка);
				ДокументОбъект.Дата = УстановкаЦенКлиентСервер.РассчитатьДатуДокумента(
					Форма.Дата, НомерВПределахДня);
				
				Статус = Неопределено;
				Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЦенНоменклатуры")
					Или ПраваПользователяПовтИсп.УстановкаЦенНоменклатурыБезСогласования() Тогда
					Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
				Иначе
					Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
				КонецЕсли;
				
				ДокументОбъект.Статус = Статус;
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма,"УстанавливатьВременныеЦены") Тогда
					ДокументОбъект.МаркетинговоеМероприятие = ?(Форма.УстанавливатьВременныеЦены,Форма.МаркетинговоеМероприятие,Неопределено);
				КонецЕсли;
				
				ДокументОбъект.Записать(?(ВариантПримененияЦен = 0, РежимЗаписиДокумента.Запись,
					РежимЗаписиДокумента.Проведение), РежимПроведенияДокумента.Неоперативный);
				
				СогласованиеЦенНоменклатуры = Неопределено;
				Если ВариантПримененияЦен = 1
					И ДокументОбъект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован Тогда
					СогласованиеЦенНоменклатурыОбъект = БизнесПроцессы.СогласованиеЦенНоменклатуры.СоздатьБизнесПроцесс();
					СогласованиеЦенНоменклатурыОбъект.Дата = ТекущаяДатаСеанса();
					СогласованиеЦенНоменклатурыОбъект.Заполнить(ДокументОбъект.Ссылка);
					СогласованиеЦенНоменклатурыОбъект.Записать();
					СогласованиеЦенНоменклатурыОбъект.Старт(БизнесПроцессы.СогласованиеЦенНоменклатуры.ТочкиМаршрута.Старт);
					СогласованиеЦенНоменклатуры = СогласованиеЦенНоменклатурыОбъект.Ссылка;
				КонецЕсли;
				
				СтруктураДокументов = Новый Структура;
				СтруктураДокументов.Вставить("УстановкаЦенНоменклатуры", ДокументОбъект.Ссылка);
				СтруктураДокументов.Вставить("СогласованиеЦенНоменклатуры", СогласованиеЦенНоменклатуры);
				МассивДокументы.Добавить(СтруктураДокументов);
				
			Иначе
				ЭтоДокументОкончанияПериода = Ложь;
				Если ТипЗнч(УстанавливатьВременныеЦены) = Тип("Булево") Тогда
					Отбор = Новый Структура("ДокументОкончанияПериодаДействияЦен",ДокументОбъект.Ссылка);
					ЭтоДокументОкончанияПериода = СохраненныеДокументыПериодическихЦен.НайтиСтроки(Отбор).Количество() > 0;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(ДокументОбъект.Ссылка)
					И НЕ ЭтоДокументОкончанияПериода
					Тогда
					ДокументОбъект.Прочитать();
					ДокументОбъект.Удалить();
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		       
		//Если ТипЗнч(УстанавливатьВременныеЦены) = Тип("Булево") Тогда
		//	ТаблицаОбработкиПериодовЦен = ПолучитьТаблицуОбработкиПериодов(
		//		УстанавливатьВременныеЦены,МассивДокументы,СохраненныеДокументыПериодическихЦен);
		//	НовыеПарыДокументовПериодическихЦен = СохраненныеДокументыПериодическихЦен.Выгрузить();
		//	НовыеПарыДокументовПериодическихЦен.Очистить();
		//	Для каждого СтрокаТЗ Из ТаблицаОбработкиПериодовЦен Цикл
		//		Если СтрокаТЗ.УдалитьКортеж Тогда
		//			Если ЗначениеЗаполнено(СтрокаТЗ.ДокументНачалаПериодаДействияЦенБывший) Тогда
		//				ДокументНаУдаление = СтрокаТЗ.ДокументНачалаПериодаДействияЦенБывший.ПолучитьОбъект();//ДокументОбъект
		//				Если ДокументНаУдаление <> Неопределено Тогда
		//					ДокументНаУдаление.Удалить();
		//				КонецЕсли; 
		//			КонецЕсли; 
		//			Если ЗначениеЗаполнено(СтрокаТЗ.ДокументОкончанияПериодаДействияЦен) Тогда
		//				ДокументНаУдаление = СтрокаТЗ.ДокументОкончанияПериодаДействияЦен.ПолучитьОбъект();//ДокументОбъект
		//				Если ДокументНаУдаление <> Неопределено Тогда
		//					ДокументНаУдаление.Удалить();
		//				КонецЕсли; 
		//			КонецЕсли; 
		//		ИначеЕсли УстанавливатьВременныеЦены Тогда
		//			Если СтрокаТЗ.ДокументОкончанияПериодаСуществует Тогда
		//				ДокументЗавершенияПериодаЦен = СтрокаТЗ.ДокументОкончанияПериодаДействияЦен.ПолучитьОбъект();
		//			Иначе
		//				ДокументЗавершенияПериодаЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		//			КонецЕсли;
		//			Если ИспользуетсяЦенообразование25 Тогда
		//				ЗаполнитьДокументОкончанияАкции25(ДокументЗавершенияПериодаЦен,СтрокаТЗ.ДокументНачалаПериодаДействияЦен,Форма.ДатаЗавершенияПериодаДействияЦен);
		//			Иначе
		//				ЗаполнитьДокументОкончанияАкции(ДокументЗавершенияПериодаЦен,СтрокаТЗ.ДокументНачалаПериодаДействияЦен,Форма.ДатаЗавершенияПериодаДействияЦен);
		//			КонецЕсли;
		//			НомерВПределахДня = УстановкаЦенВызовСервера.РассчитатьНомерВПределахДня(
		//				Форма.ДатаЗавершенияПериодаДействияЦен, ДокументЗавершенияПериодаЦен.Ссылка);
		//			ДокументЗавершенияПериодаЦен.Дата = УстановкаЦенКлиентСервер.РассчитатьДатуДокумента(
		//				Форма.ДатаЗавершенияПериодаДействияЦен, НомерВПределахДня);
		//			ДокументЗавершенияПериодаЦен.Записать(
		//				?(ВариантПримененияЦен = 0, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение), 
		//				РежимПроведенияДокумента.Неоперативный);
		//			
		//			СтруктураДокументов = Новый Структура;
		//			СтруктураДокументов.Вставить("УстановкаЦенНоменклатуры", ДокументЗавершенияПериодаЦен.Ссылка);
		//			СтруктураДокументов.Вставить("СогласованиеЦенНоменклатуры", СогласованиеЦенНоменклатуры);
		//			СтруктураДокументов.Вставить("ДокументНачалаПериодаДействияЦен", СтрокаТЗ.ДокументНачалаПериодаДействияЦен);
		//			МассивДокументы.Добавить(СтруктураДокументов);
		//			
		//			СтрокаПары = НовыеПарыДокументовПериодическихЦен.Добавить();
		//			СтрокаПары.ДокументНачалаПериодаДействияЦен = СтрокаТЗ.ДокументНачалаПериодаДействияЦен;
		//			СтрокаПары.ДокументОкончанияПериодаДействияЦен = ДокументЗавершенияПериодаЦен.Ссылка;
		//		Иначе
		//			Если СтрокаТЗ.ДокументОкончанияПериодаСуществует Тогда
		//				ДокументНаУдаление = СтрокаТЗ.ДокументОкончанияПериодаДействияЦен.ПолучитьОбъект();//ДокументОбъект
		//				Если ДокументНаУдаление <> Неопределено Тогда
		//					ДокументНаУдаление.Удалить();
		//				КонецЕсли; 
		//			КонецЕсли;
		//		КонецЕсли; 
		//	КонецЦикла; 
		//КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		//Если ТипЗнч(УстанавливатьВременныеЦены) = Тип("Булево") Тогда
		//	СохраненныеДокументыПериодическихЦен.Очистить();
		//	СохраненныеДокументыПериодическихЦен.Загрузить(НовыеПарыДокументовПериодическихЦен);
		//КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Ошибка при установке цен.';
								|en = 'An error occurred on pricing.'") + ИнформацияОбОшибке().Описание;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "СохраненныеДокументы") Тогда
		СохраненныеДокументы = Форма.СохраненныеДокументы;//ТаблицаЗначений
		
		УстановкаЦенСервер.ОчиститьСохраненныеДокументы(СохраненныеДокументы, Форма.УникальныйИдентификатор);
		
		Для Каждого СтрокаТЧ Из МассивДокументы Цикл
			НоваяСтрока = СохраненныеДокументы.Добавить();
			НоваяСтрока.Ссылка = СтрокаТЧ.УстановкаЦенНоменклатуры;
			ЗаблокироватьДанныеДляРедактирования(СтрокаТЧ.УстановкаЦенНоменклатуры,,Форма.УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	Форма.Модифицированность = Ложь;
	
	Возврат МассивДокументы;

КонецФункции

#Область Загрузка_из_Файла_Конарев

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы.УстановкаЦенНоменклатуры.ТабличныеЧасти Цикл
		Если Найти(Параметры.ИмяТабличнойЧасти, ТабличнаяЧасть.Имя) <> 0 Тогда
			
			Параметры.ИмяМакетаСШаблоном = ТабличнаяЧасть.Имя;
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// 
// Параметры:
// 	АдресЗагружаемыхДанных- Строка - адрес временного хранилища с таблицей значений, в которой
//                                   находятся загруженные данные из файла.
// 	АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                       являющейся копией табличной части документа, 
//                                       которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
// 	СписокНеоднозначностей - ТаблицаЗначений - состоит из:
//  * Идентификатор - Число - идентификатор
//  * Колонка - Строка - имя колонки
// 	ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части
// 	ДополнительныеПараметры - Структура - дополнительные параметры, переданные из формы-источнике.
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Номенклатура  = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗагрузки.Номенклатура КАК Номенклатура,
	|	ТаблицаЗагрузки.ВидЦены КАК ВидЦены,
	|	ТаблицаЗагрузки.Валюта КАК Валюта,
	|	ТаблицаЗагрузки.Цена КАК Цена,
	|	ТаблицаЗагрузки.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_ДанныеЗагрузки
	|ИЗ
	|	&ТаблицаЗагрузки КАК ТаблицаЗагрузки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(НоменклатураСправочник.Ссылка) КАК Номенклатура,
	|	ВТ_ДанныеЗагрузки.Идентификатор КАК Идентификатор,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НоменклатураСправочник.Ссылка) КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ВТ_ПоискНоменклатуры
	|ИЗ
	|	ВТ_ДанныеЗагрузки КАК ВТ_ДанныеЗагрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО ВТ_ДанныеЗагрузки.Номенклатура = НоменклатураСправочник.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеЗагрузки.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеЗагрузки.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(ВидыЦен.Ссылка) КАК ВидЦены,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыЦен.Ссылка) КАК КоличествоВидовЦен
	|ПОМЕСТИТЬ ВТ_ПоискВидовЦен
	|ИЗ
	|	ВТ_ДанныеЗагрузки КАК ВТ_ДанныеЗагрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
	|		ПО ВТ_ДанныеЗагрузки.ВидЦены = ВидыЦен.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеЗагрузки.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеЗагрузки.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(Валюты.Ссылка) КАК Валюта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Валюты.Ссылка) КАК КоличествоВалют
	|ПОМЕСТИТЬ ВТ_ПоискВалют
	|ИЗ
	|	ВТ_ДанныеЗагрузки КАК ВТ_ДанныеЗагрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ВТ_ДанныеЗагрузки.Валюта = Валюты.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеЗагрузки.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеЗагрузки.Идентификатор КАК Идентификатор,
	|	ВТ_ДанныеЗагрузки.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ПоискВалют.КоличествоВалют, 0) = 1
	|			ТОГДА ВТ_ПоискВалют.Валюта
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ПоискВидовЦен.КоличествоВидовЦен, 0) = 1
	|			ТОГДА ВТ_ПоискВидовЦен.ВидЦены
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ПоискНоменклатуры.КоличествоНоменклатуры, 0) = 1
	|			ТОГДА ВТ_ПоискНоменклатуры.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_ПоискВалют.КоличествоВалют, 0) КАК КоличествоВалют,
	|	ЕСТЬNULL(ВТ_ПоискВидовЦен.КоличествоВидовЦен, 0) КАК КоличествоВидовЦен,
	|	ЕСТЬNULL(ВТ_ПоискНоменклатуры.КоличествоНоменклатуры, 0) КАК КоличествоНоменклатуры
	|ИЗ
	|	ВТ_ДанныеЗагрузки КАК ВТ_ДанныеЗагрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоискНоменклатуры КАК ВТ_ПоискНоменклатуры
	|		ПО ВТ_ДанныеЗагрузки.Идентификатор = ВТ_ПоискНоменклатуры.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоискВидовЦен КАК ВТ_ПоискВидовЦен
	|		ПО ВТ_ДанныеЗагрузки.Идентификатор = ВТ_ПоискВидовЦен.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоискВалют КАК ВТ_ПоискВалют
	|		ПО ВТ_ДанныеЗагрузки.Идентификатор = ВТ_ПоискВалют.Идентификатор";
	
	Запрос.УстановитьПараметр("ТаблицаЗагрузки", ЗагружаемыеДанные);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока = Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		
		Если Результат.КоличествоВалют > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Результат.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Валюта";
		КонецЕсли;
		
		Если Результат.КоличествоВидовЦен > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Результат.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "ВидЦены";
		КонецЕсли;
		
		Если Результат.КоличествоНоменклатуры > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Результат.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Номнеклатура";
		КонецЕсли; 
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Номенклатура, АдресТаблицыСопоставления);
	
КонецПроцедуры  

#КонецОбласти