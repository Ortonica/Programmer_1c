&НаСервере
Процедура ВидимостьЦвета()
	
	Если Объект.РС_НазначениеСформированоАвтоматически Тогда
		Элементы.НазначениеПлатежа.ЦветФона = ЦветаСтиля.ПолеСОшибкойФон
	Иначе
		Элементы.НазначениеПлатежа.ЦветФона = Новый Цвет
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_ЗаполнитьНазначениеПлатежаПосле(Команда)
	
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.НазначениеПлатежа = "";
	
	СтруктураПараметров = Новый Структура("СтатьяДДС, Валюта, СуммаДокумента, РасшифровкаПлатежа", 
		Объект.СтатьяДвиженияДенежныхСредств, Объект.Валюта, Объект.СуммаДокумента, Объект.РасшифровкаПлатежа);

	НазначениеПлатежа = СформироватьНазначениеПлатежа(СтруктураПараметров);	
	
	Объект.НазначениеПлатежа = НазначениеПлатежа;
	Объект.РС_НазначениеСформированоАвтоматически = Истина;
	
	ВидимостьЦвета();
	
		
КонецПроцедуры

Функция СформироватьНазначениеПлатежа(СтруктураПараметров) Экспорт
	
	СтатьяДвиженияДенежныхСредств 	= СтруктураПараметров.СтатьяДДС;
	Валюта 							= СтруктураПараметров.Валюта;
	СуммаДокумента 					= СтруктураПараметров.СуммаДокумента;
	РП = СтруктураПараметров.РасшифровкаПлатежа;
	
	НазначениеПлатежа  = "";
	
	ШаблонСчета = "Оплата по %1";
	ШаблонДаты = " от %1";
	ШаблонСумма = ", Сумма %1 %2"; 
	ШаблонСуммаНДС = ", Сумма НДС %1 %2";
	
	Если РП.Количество() Тогда		
		
		Сумма = 0;
		СуммаНДС = 0;
		Для Каждого СтрокаТч Из РП Цикл
			
			Если ЗначениеЗаполнено(СтрокаТч.ОбъектРасчетов) И ТипЗнч(СтрокаТч.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда			
				
				РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТч.ОбъектРасчетов, "ДатаПоДаннымПоставщика, НомерПоДаннымПоставщика");
				
				ДанныеСчета = РеквизитыЗаказа.НомерПоДаннымПоставщика;
				ДанныеДаты = РеквизитыЗаказа.ДатаПоДаннымПоставщика
			ИначеЕсли ЗначениеЗаполнено(СтрокаТч.ОбъектРасчетов) И ТипЗнч(СтрокаТч.ОбъектРасчетов) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда				
				
				РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТч.ОбъектРасчетов, "ДатаВходящегоДокумента, НомерВходящегоДокумента");
				
				ДанныеСчета = РеквизитыЗаказа.НомерВходящегоДокумента;
				ДанныеДаты = РеквизитыЗаказа.ДатаВходящегоДокумента
			КонецЕсли;
			
			ТекстТело = "";
			Если ЗначениеЗаполнено(ДанныеСчета) Тогда
				ТекстТело = СтрШаблон(ШаблонСчета, "счету " + ДанныеСчета)
			ИначеЕсли ЗначениеЗаполнено(СтрокаТч.САВ_НомерСчета) Тогда
				ТекстТело = СтрШаблон(ШаблонСчета, "счету " + СтрокаТч.САВ_НомерСчета)
			Иначе	
				Сумма = Сумма + СтрокаТч.Сумма;
				СуммаНДС = СуммаНДС + СтрокаТч.СуммаНДС;
				Продолжить
			КонецЕсли;
			
			ТекстДата = "";
			Если ЗначениеЗаполнено(ДанныеДаты) Тогда
				ТекстДата = СтрШаблон(ШаблонДаты, Формат(ДанныеДаты, "ДФ=dd.MM.yyyy"))
			ИначеЕсли ЗначениеЗаполнено(СтрокаТч.САВ_ДатаСчета) Тогда
				ТекстДата = СтрШаблон(ШаблонДаты, Формат(СтрокаТч.САВ_ДатаСчета, "ДФ=dd.MM.yyyy"))	
			КонецЕсли;
			
			ТекстСумма = "";
			Если Не СтрокаТч.Сумма = 0 Тогда
				ТекстСумма = СтрШаблон(ШаблонСумма, Формат(СтрокаТч.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта)
			КонецЕсли;
			
			ТекстСуммаНДС = "";
			Если Не СтрокаТч.СуммаНДС = 0 Тогда
				ТекстСуммаНДС = СтрШаблон(ШаблонСуммаНДС, Формат(СтрокаТч.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта)
			ИначеЕсли СтрокаТч.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ТекстСуммаНДС = ", Без НДС"
			ИначеЕсли СтрокаТч.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				ТекстСуммаНДС = СтрШаблон(ШаблонСуммаНДС, Формат(0, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта)		
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + ?(ЗначениеЗаполнено(НазначениеПлатежа), " ", "") + ТекстТело + ТекстДата + ТекстСумма + ТекстСуммаНДС			
		КонецЦикла;
		
		Если Не Сумма = 0 Или Не СуммаНДС = 0 Тогда
			
			ТекстТело = СтрШаблон(ШаблонСчета, "статье " + СтатьяДвиженияДенежныхСредств);
			
			ТекстСумма = "";
			Если Не Сумма = 0 Тогда
				ТекстСумма = СтрШаблон(ШаблонСумма, Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта)
			КонецЕсли;
			
			ТекстСуммаНДС = "";
			Если Не СуммаНДС = 0 Тогда
				ТекстСуммаНДС = СтрШаблон(ШаблонСуммаНДС, Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта)
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + ?(ЗначениеЗаполнено(НазначениеПлатежа), " ", "") + ТекстТело + ТекстСумма + ТекстСуммаНДС
		КонецЕсли
	Иначе		
		ТекстТело = СтрШаблон(ШаблонСчета, "статье " + СтатьяДвиженияДенежныхСредств);
		
		ТекстСумма = СтрШаблон(ШаблонСумма, Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта);
		
		НазначениеПлатежа = ТекстТело + ТекстСумма		
	КонецЕсли;
	
	ЗаменяемыеСимволы = "()"
		+ Символы.НПП
		+ Символы.ПС
		+ Символы.ВК
		+ Символы.ПФ
		+ Символы.Таб
		+ Символы.ВТаб;
			
	НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
		ЗаменяемыеСимволы, НазначениеПлатежа,
		СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", СтрДлина(ЗаменяемыеСимволы)));
	
	ЗаменитьПодстрокуВТексте(НазначениеПлатежа, "  ", " ");
	НазначениеПлатежа = СокрЛП(НазначениеПлатежа);
	
	Если СтрЗаканчиваетсяНа(НазначениеПлатежа, ".") Тогда
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(НазначениеПлатежа)
	КонецЕсли;
	
	Возврат СокрП(НазначениеПлатежа)
	
КонецФункции	

Процедура ЗаменитьПодстрокуВТексте(Значение, ПодстрокаПоиска, ПодстрокаЗамены)
	
	Если СтрНайти(ПодстрокаЗамены, ПодстрокаПоиска) > 0 Тогда
		Возврат
	КонецЕсли;
	
	Пока СтрНайти(Значение, ПодстрокаПоиска) > 0 Цикл
		Значение = СтрЗаменить(Значение, ПодстрокаПоиска, ПодстрокаЗамены)
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура РСК_ПриОткрытииПередНаСервере()
		ВидимостьЦвета();
КонецПроцедуры

&НаКлиенте
Процедура РСК_ПриОткрытииПеред(Отказ)
	РСК_ПриОткрытииПередНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РСК_НазначениеПлатежаПриИзмененииПосле(Элемент)
	Объект.РС_НазначениеСформированоАвтоматически = Ложь;
    ВидимостьЦвета();
КонецПроцедуры

&НаКлиенте
Процедура РСК_ЗаполнитьНППосле(Команда)
	Если Объект.НазначениеПлатежа = "" Тогда
		ВставитьНазначениеПлатежаЗавершение(КодВозвратаДиалога.Да)
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ВставитьНазначениеПлатежаЗавершение", ЭтотОбъект), 
			"Назначение не пустое. Сформировать назначение автоматически?", 
			РежимДиалогаВопрос.ДаНет,
			, 
			КодВозвратаДиалога.Нет)
	КонецЕсли 
	
КонецПроцедуры

&НаСервере
Процедура РСК_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	//Объект.ВариантОплаты=Перечисления.ВариантыКонтроляОплатыПоставщику 
	ЗаполнитьТаблицуДокументов(); 
	Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
		ФормаОплаты = "Безналичная"; 
	КонецЕсли;
	Если Пользователи.РолиДоступны("РСК_ИзменениеСтатусаЗаявкиНаРасходованиеДС",Пользователи.ТекущийПользователь()) Тогда
		Элементы.Статус.ТолькоПросмотр = Ложь;
	КонецЕсли; 
КонецПроцедуры

//++Конарев Процедуры и функции для работы с областью подтверждающих документов
#Область РаботаСПрисоединеннымиФайлами 

&НаСервере
Процедура ЗаполнитьТаблицуДокументов() 
	
	ПодтверждающиеДокументы.Очистить();
	//Элементы.РСК_ПодтверждающиеДокументыСтатьяДДС.Видимость = Объект.РасшифровкаПлатежа.Количество() > 1; 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.ИндексКартинки, -1) КАК ИндексКартинки,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.Ссылка) КАК ИмяФайла,
	|	РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.ТипДокумента КАК ТипДокумента,
	|	РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.Обязателен КАК Обязателен,
	|	РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.Ссылка.СтатьяДДС КАК СтатьяДДС
	|ИЗ
	|	Справочник.РСК_НастройкиПодтвержадющихДокументовЗРДС.СписокДокументов КАК РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы КАК ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы
	|		ПО (РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.ТипДокумента = ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.РСК_Тип)
	|			И (РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.Ссылка.СтатьяДДС = ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.РСК_СтатьяДДС) 
	|			И (ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла)
	|			И (ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.Ссылка.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.Ссылка.СтатьяДДС В (&СтатьяДДС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.Ссылка,
	|	ЕСТЬNULL(ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.ИндексКартинки, -1),
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.Ссылка),
	|	ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.РСК_Тип,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы КАК ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И НЕ ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.РСК_Тип В
	|				(ВЫБРАТЬ
	|					РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.ТипДокумента КАК ТипДокумента
	|				ИЗ
	|					Справочник.РСК_НастройкиПодтвержадющихДокументовЗРДС.СписокДокументов КАК РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов
	|				ГДЕ
	|					РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.Ссылка.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|					И РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.Ссылка.СтатьяДДС В (&СтатьяДДС))
	|	И ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Обязателен УБЫВ,
	|	ТипДокумента УБЫВ";
	
	СтатьяДДС = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств"); 
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);            
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);	
	Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);	

	Результат = Запрос.Выполнить(); 
	
	Если НЕ Результат.Пустой() Тогда
		ДокументыДляЗаявки = Результат.Выбрать();
		Пока ДокументыДляЗаявки.Следующий() Цикл
			Стр = ПодтверждающиеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,ДокументыДляЗаявки);
			Если ДокументыДляЗаявки.ТипДокумента = Перечисления.РСК_ТипыПодтверждающихДокументовЗРДС.ОбоснованиеВнебюджетногоПлатежа Тогда
				Стр.Обязателен = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Объект.СверхЛимита И ОтправлятьНаСверхЛимит(СтатьяДДС) Тогда
		СлужебнаяЗаписка = ПодтверждающиеДокументы.НайтиСтроки(Новый Структура("ТипДокумента",Перечисления.РСК_ТипыПодтверждающихДокументовЗРДС.ОбоснованиеВнебюджетногоПлатежа));
		Если СлужебнаяЗаписка.Количество() = 0 Тогда
			Стр = ПодтверждающиеДокументы.Добавить();
			Стр.Обязателен = Истина;
			Стр.ТипДокумента = ПредопределенноеЗначение("Перечисление.РСК_ТипыПодтверждающихДокументовЗРДС.ОбоснованиеВнебюджетногоПлатежа"); 
			Стр.ИндексКартинки = -1;
			ПодтверждающиеДокументы.Сортировать("Обязателен УБЫВ,ТипДокумента УБЫВ");
		Иначе
			ПодтверждающиеДокументы.Сортировать("Обязателен УБЫВ,ТипДокумента УБЫВ");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РСК_ПодтверждающиеДокументыВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Обработчик = Новый ОписаниеОповещения("ВыполнитьДействиеСПрисоединеннымиФайламиПослеЗаписи", ЭтотОбъект,Элемент);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Работа с файлами возможна только после записи данных.
			|Данные будут записаны.';
			|en = 'Data is not written yet.
			|You can use files only after data is written.
			|Data will be written.'");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОбработатьДействиеПрисоединенныеФайлы(Элемент);	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьДействиеПрисоединенныеФайлы(Элемент)
	
	ТекущиеДанные = Элементы.РСК_ПодтверждающиеДокументы.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Или Элемент.ТекущийЭлемент.Имя = "РСК_ПодтверждающиеДокументыТипДокумента" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Ссылка.Пустая() Тогда
		ДобавитьПрисоединенныйФайл();
	Иначе
		ОткрытьПрисоединенныйФайл();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСПрисоединеннымиФайламиПослеЗаписи(Ответ,Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ЭтаФорма.Записать();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьДействиеПрисоединенныеФайлы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрисоединенныйФайл()
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Элементы.РСК_ПодтверждающиеДокументы.ТекущиеДанные.Ссылка,
		Неопределено, УникальныйИдентификатор, Неопределено);  
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры   

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайл() 
	
	ТекущиеДанные = Элементы.РСК_ПодтверждающиеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТипДокумента) Тогда
		Сообщить("Укажите тип документа");
		Возврат
	КонецЕсли;  
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	ОписаниеОповещение = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещение); 
		
КонецПроцедуры 

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныйФайл, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(ВыбранныйФайл) = Тип("Массив") 
		Или Не ВыбранныйФайл.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РСК_ПодтверждающиеДокументы.ТекущиеДанные;
	Файл = Новый Файл(ВыбранныйФайл[0]);
	ОбщиеНастройки = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ОбщиеНастройкиРаботыСФайлами;
	РаботаСФайламиСлужебныйКлиент.ПроверитьВозможностьЗагрузкиФайлаСТипом(Файл);
		
	Если ОбщиеНастройки.ИзвлекатьТекстыФайловНаСервере Тогда
		АдресВременногоХранилищаТекста = "";
	Иначе
		АдресВременногоХранилищаТекста = РаботаСфайламиСлужебныйКлиент.ИзвлечьТекстФайлаВоВременноеХранилище(ВыбранныйФайл[0], УникальныйИдентификатор);
	КонецЕсли;
    ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;		
	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при помещении файла
		|""%1""
		|в программу.';
		|en = 'An error occurred when storing file
		|""%1""
		|to the application.'"),
		Файл.ПолноеИмя) );
	КонецЕсли;
	
	АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	РасширениеФайла 			  = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение);
	ИмяФайлаБезРасширения 		  = Файл.ИмяБезРасширения;
	
	ТекущиеДанные.ИмяФайла = ИмяФайлаБезРасширения; 
	
	Если ТекущиеДанные.Ссылка.Пустая() Тогда 
		ПараметрыФайла 							   = РаботаСФайламиСлужебныйКлиентСервер.ПараметрыДобавленияФайла();
		ПараметрыФайла.ГруппаФайлов 			   = Неопределено;
		ПараметрыФайла.ВладелецФайлов 			   = Объект.Ссылка;
		ПараметрыФайла.ИмяБезРасширения 		   = ИмяФайлаБезРасширения;
		ПараметрыФайла.РасширениеБезТочки 		   = РасширениеФайла;
		ПараметрыФайла.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
		ПараметрыФайла.Вставить("РСК_Тип",ТекущиеДанные.ТипДокумента);
		ПараметрыФайла.Вставить("РСК_СтатьяДДС",ТекущиеДанные.СтатьяДДС);
		
		ПрисоединенныйФайл = РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(ПараметрыФайла,
			АдресВременногоХранилищаФайла, АдресВременногоХранилищаТекста);		
			
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ТекущиеДанные.Ссылка = ПрисоединенныйФайл;
		КонецЕсли;
	Иначе
		ИнформацияОФайле = Новый Структура;
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище",АдресВременногоХранилищаФайла);
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста",АдресВременногоХранилищаТекста);
		ИнформацияОФайле.Вставить("ИмяБезРасширения",ИмяФайлаБезРасширения);
		ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная",ВремяИзмененияУниверсальное);
		ИнформацияОФайле.Вставить("Расширение",РасширениеФайла); 
		ИнформацияОФайле.Вставить("Редактирует",Неопределено);
		ИнформацияОФайле.Вставить("Кодировка",Неопределено);
		
		ОбновитьПрисоединенныйФайл(ТекущиеДанные.Ссылка,ИнформацияОФайле);
	КонецЕсли;  
	
	ТекущиеДанные.ИндексКартинки  = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеФайла);  
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОбновитьПрисоединенныйФайл(Файл,ИнформацияОФайле)
	РаботаСФайлами.ОбновитьФайл(Файл,ИнформацияОФайле);		
КонецПроцедуры

&НаКлиенте
Процедура РСК_ОбновитьФайлПосле(Команда)
	ДобавитьПрисоединенныйФайл();	
КонецПроцедуры

&НаКлиенте
Процедура РСК_УдалитьФайлПосле(Команда)
	
	ТекущиеДанные = Элементы.РСК_ПодтверждающиеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	РезультатУдаления = УдалитьПрисоединенныйФайлНаСервере(ТекущиеДанные.Ссылка); 
	
	Если НЕ ЗначениеЗаполнено(РезультатУдаления.ТекстПредупреждения) Тогда
		ТекущиеДанные.Ссылка  		 = ПредопределенноеЗначение("Справочник.ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.ПустаяСсылка");
		ТекущиеДанные.ИмяФайла 		 = "";
		ТекущиеДанные.ИндексКартинки = -1;
    КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Функция УдалитьПрисоединенныйФайлНаСервере(Файл)
	Возврат РаботаСФайламиСлужебныйВызовСервера.РезультатУдаленияДанных(Файл,УникальныйИдентификатор);	
КонецФункции

&НаСервере
Процедура РСК_ОбработкаПроверкиЗаполненияНаСервереПосле(Отказ, ПроверяемыеРеквизиты)
		
	Если НЕ Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодтвердждающиеДокументы.Обязателен КАК Обязателен,
		|	ПодтвердждающиеДокументы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДанныеТаблицы
		|ИЗ
		|	&ПодтвердждающиеДокументы КАК ПодтвердждающиеДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеТаблицы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_ДанныеТаблицы КАК ВТ_ДанныеТаблицы
		|ГДЕ
		|	ВТ_ДанныеТаблицы.Обязателен = ИСТИНА
		|	И ВТ_ДанныеТаблицы.Ссылка = ЗНАЧЕНИЕ(Справочник.ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.ПустаяСсылка)";
		Запрос.УстановитьПараметр("ПодтвердждающиеДокументы",ПодтверждающиеДокументы.Выгрузить());
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда 
			ОбщегоНазначения.СообщитьПользователю("Прикреплены не все обязательные файлы!",,"РСК_ПодтверждающиеДокументы","РСК_ПодтверждающиеДокументы",Отказ);
		КонецЕсли;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_ХозяйственнаяОперацияПриИзмененииПосле(Элемент)
	ЗаполнитьТаблицуДокументов();
КонецПроцедуры

&НаКлиенте
Процедура РСК_РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредствПриИзмененииПосле(Элемент)
	
	ЗаполнитьТаблицуДокументов();  
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПриоритетОплаты = ЗначениеРеквизитаОбъекта(ТекущиеДанные.СтатьяДвиженияДенежныхСредств,"ПриоритетОплаты");
		Если ЗначениеЗаполнено(ПриоритетОплаты) Тогда
			Объект.ПриоритетОплаты = ПриоритетОплаты;	
		Иначе
			Объект.ПриоритетОплаты = ПриоритетОплатыПоУмолчанию();	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Объект,ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект,ИмяРеквизита);	
КонецФункции

&НаСервереБезКонтекста
Функция ПриоритетОплатыПоУмолчанию()
	Возврат Справочники.ПриоритетыОплаты.ПолучитьПриоритетПоУмолчанию(Неопределено);	
КонецФункции

&НаКлиенте
Процедура РСК_РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзмененииПосле(Элемент)
	ЗаполнитьТаблицуДокументов();
	УстановитьПриоритетОплатыЗаявки();
КонецПроцедуры 

&НаСервере
Процедура УстановитьПриоритетОплатыЗаявки()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасшифровкаПлатежаЗРДС",Объект.РасшифровкаПлатежа.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасшифровкаПлатежаЗРДС.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ ВТ_СтатьиРасшифровки
	|ИЗ
	|	&РасшифровкаПлатежаЗРДС КАК РасшифровкаПлатежаЗРДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_СтатьиРасшифровки.СтатьяДвиженияДенежныхСредств.ПриоритетОплаты КАК ПриоритетОплаты,
	|	ЕСТЬNULL(ВТ_СтатьиРасшифровки.СтатьяДвиженияДенежныхСредств.ПриоритетОплаты.РеквизитДопУпорядочивания, 5) КАК Порядок
	|ИЗ
	|	ВТ_СтатьиРасшифровки КАК ВТ_СтатьиРасшифровки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Приоритет = Результат.Выбрать();
		Приоритет.Следующий(); 
		Если ЗначениеЗаполнено(Приоритет.ПриоритетОплаты) Тогда
			Объект.ПриоритетОплаты = Приоритет.ПриоритетОплаты; 
		Иначе
			Объект.ПриоритетОплаты = ПриоритетОплатыПоУмолчанию();
		КонецЕсли;
	Иначе
		Объект.ПриоритетОплаты = ПриоритетОплатыПоУмолчанию();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РСК_РасшифровкаПлатежаПослеУдаленияПосле(Элемент)
	ЗаполнитьТаблицуДокументов();
КонецПроцедуры 

&НаКлиенте
Процедура РСК_РасшифровкаПлатежаПередУдалениемПосле(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;			
	КонецЕсли;
	
	ФайлыНаУдаление = ПодтверждающиеДокументы.НайтиСтроки(Новый Структура("СтатьяДДС",Элемент.ТекущиеДанные.СтатьяДвиженияДенежныхСредств));
	Для Каждого Файл из ФайлыНаУдаление Цикл 
		Если НЕ Файл.Ссылка.Пустая() Тогда
			УдалитьПрисоединенныйФайлНаСервере(Файл.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_СверхЛимитаПриИзмененииПосле(Элемент)  
	ОтправлятьНаСверхЛимит = ОтправлятьНаСверхЛимит();
	Если Объект.СверхЛимита И ОтправлятьНаСверхЛимит Тогда 
		
		Стр = ПодтверждающиеДокументы.Добавить();
		Стр.Обязателен = Истина;
		Стр.ТипДокумента = ПредопределенноеЗначение("Перечисление.РСК_ТипыПодтверждающихДокументовЗРДС.ОбоснованиеВнебюджетногоПлатежа"); 
		Стр.ИндексКартинки = -1;
		ПодтверждающиеДокументы.Сортировать("Обязателен УБЫВ,ТипДокумента УБЫВ");
		
	ИначеЕсли ОтправлятьНаСверхЛимит Тогда 
		
		СтрокиЗаписки = ПодтверждающиеДокументы.НайтиСтроки(Новый Структура("ТипДокумента,Обязателен",
								ПредопределенноеЗначение("Перечисление.РСК_ТипыПодтверждающихДокументовЗРДС.ОбоснованиеВнебюджетногоПлатежа"),Истина));
		
		ПодтверждающиеДокументы.Удалить(ПодтверждающиеДокументы.Индекс(СтрокиЗаписки[0]));
		Если ЗначениеЗаполнено(СтрокиЗаписки[0].Ссылка) Тогда
			УдалитьПрисоединенныйФайлНаСервере(СтрокиЗаписки[0].Ссылка);	
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры  

&НаСервере
Функция ОтправлятьНаСверхЛимит(СтатьиДДС = Неопределено)
	
	Если СтатьиДДС = Неопределено Тогда
		СтатьиДДС = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
	Возврат ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ОтправлятьНаСверхЛимит(СтатьиДДС);
	
КонецФункции

&НаКлиенте
Процедура РСК_КонтрагентПриИзмененииПосле(Элемент)
	Если Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная") Тогда
		ФормаОплаты = "Безналичная"; 	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РСК_РасшифровкаБезРазбиенияОбъектРасчетовПриИзмененииПосле(Элемент)
	ЗаполнитьТаблицуДокументов(); 
КонецПроцедуры

&НаКлиенте
Процедура РСК_РасшифровкаПлатежаОбъектРасчетовПриИзмененииПосле(Элемент)
	ЗаполнитьТаблицуДокументов();
КонецПроцедуры

&НаКлиенте
Процедура РСК_РасшифровкаБезРазбиенияОбъектРасчетовОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьТаблицуДокументов();
КонецПроцедуры

&НаКлиенте
Процедура РСК_РасшифровкаПлатежаОбъектРасчетовОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьТаблицуДокументов();
КонецПроцедуры

//Контроль редактирования
&НаСервере
Процедура РСК_ПриЧтенииНаСервереПосле(ТекущийОбъект)
	
	Если ЕстьСвязанныйОбъект() И НЕ (Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		ИЛИ Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена) Тогда
		Если НЕ Пользователи.РолиДоступны("РСК_РедактированиеЗаявокНаРасходованиеДСВПроцессеСогласования",
				Пользователи.ТекущийПользователь()) Тогда
			Элементы.ГруппаСтраницы.ТолькоПросмотр 		       		= Истина;
			Элементы.ГруппаНазначениеПлатежа.ТолькоПросмотр   		= Истина;
			Элементы.ЗаполнитьПоПредыдущемуПлатежу.Доступность 		= Ложь; 
			Элементы.ЗаполнитьНазначениеПлатежа.Доступность    		= Ложь;
			Элементы.РСК_ПодтверждающиеДокументыГруппа1.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Функция ЕстьСвязанныйОбъект()
	Возврат	ИнтеграцияС1СДокументооборот3.ЕстьСвязанныйОбъектДО(Объект.Ссылка);
КонецФункции

&НаКлиенте
&ИзменениеИКонтроль("ОбработкаОповещения")
Процедура РСК_ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;

	Если ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_РасходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте" Тогда
		ЗаполнитьДанныеОбОплатеЗаявки();
	КонецЕсли;
	
	#Вставка
	Если ИмяСобытия = "Документооборот_ДобавлениеСвязи" Тогда
		Прочитать();
	КонецЕсли;
	#КонецВставки
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

#КонецОбласти
