
Функция СформироватьНазначениеПлатежа(СтруктураПараметров) Экспорт
	
	СтатьяДвиженияДенежныхСредств 	= СтруктураПараметров.СтатьяДДС;
	Валюта 							= СтруктураПараметров.Валюта;
	СуммаДокумента 					= СтруктураПараметров.СуммаДокумента;
	РП = СтруктураПараметров.РасшифровкаПлатежа;
	
	НазначениеПлатежа  = "";
	
	ШаблонСчета = "Оплата по %1";
	ШаблонДаты = " от %1";
	ШаблонСумма = ", Сумма %1 %2"; 
	ШаблонСуммаНДС = ", Сумма НДС %1 %2";
	
	Если РП.Количество() Тогда		
		
		Сумма = 0;
		СуммаНДС = 0;
		Для Каждого СтрокаТч Из РП Цикл
			
			Если ЗначениеЗаполнено(СтрокаТч.ОбъектРасчетов) И ТипЗнч(СтрокаТч.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда			
				
				РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТч.ОбъектРасчетов, "ДатаПоДаннымПоставщика, НомерПоДаннымПоставщика");
				
				ДанныеСчета = РеквизитыЗаказа.НомерПоДаннымПоставщика;
				ДанныеДаты = РеквизитыЗаказа.ДатаПоДаннымПоставщика
			ИначеЕсли ЗначениеЗаполнено(СтрокаТч.ОбъектРасчетов) И ТипЗнч(СтрокаТч.ОбъектРасчетов) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда				
				
				РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТч.ОбъектРасчетов, "ДатаВходящегоДокумента, НомерВходящегоДокумента");
				
				ДанныеСчета = РеквизитыЗаказа.НомерВходящегоДокумента;
				ДанныеДаты = РеквизитыЗаказа.ДатаВходящегоДокумента
			КонецЕсли;
			
			ТекстТело = "";
			Если ЗначениеЗаполнено(ДанныеСчета) Тогда
				ТекстТело = СтрШаблон(ШаблонСчета, "счету " + ДанныеСчета)
			ИначеЕсли ЗначениеЗаполнено(СтрокаТч.САВ_НомерСчета) Тогда
				ТекстТело = СтрШаблон(ШаблонСчета, "счету " + СтрокаТч.САВ_НомерСчета)
			Иначе	
				Сумма = Сумма + СтрокаТч.Сумма;
				СуммаНДС = СуммаНДС + СтрокаТч.СуммаНДС;
				Продолжить
			КонецЕсли;
			
			ТекстДата = "";
			Если ЗначениеЗаполнено(ДанныеДаты) Тогда
				ТекстДата = СтрШаблон(ШаблонДаты, Формат(ДанныеДаты, "ДФ=dd.MM.yyyy"))
			ИначеЕсли ЗначениеЗаполнено(СтрокаТч.САВ_ДатаСчета) Тогда
				ТекстДата = СтрШаблон(ШаблонДаты, Формат(СтрокаТч.САВ_ДатаСчета, "ДФ=dd.MM.yyyy"))	
			КонецЕсли;
			
			ТекстСумма = "";
			Если Не СтрокаТч.Сумма = 0 Тогда
				ТекстСумма = СтрШаблон(ШаблонСумма, Формат(СтрокаТч.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта)
			КонецЕсли;
			
			ТекстСуммаНДС = "";
			Если Не СтрокаТч.СуммаНДС = 0 Тогда
				ТекстСуммаНДС = СтрШаблон(ШаблонСуммаНДС, Формат(СтрокаТч.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта)
			ИначеЕсли СтрокаТч.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ТекстСуммаНДС = ", Без НДС"
			ИначеЕсли СтрокаТч.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				ТекстСуммаНДС = СтрШаблон(ШаблонСуммаНДС, Формат(0, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта)		
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + ?(ЗначениеЗаполнено(НазначениеПлатежа), " ", "") + ТекстТело + ТекстДата + ТекстСумма + ТекстСуммаНДС			
		КонецЦикла;
		
		Если Не Сумма = 0 Или Не СуммаНДС = 0 Тогда
			
			ТекстТело = СтрШаблон(ШаблонСчета, "статье " + СтатьяДвиженияДенежныхСредств);
			
			ТекстСумма = "";
			Если Не Сумма = 0 Тогда
				ТекстСумма = СтрШаблон(ШаблонСумма, Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта)
			КонецЕсли;
			
			ТекстСуммаНДС = "";
			Если Не СуммаНДС = 0 Тогда
				ТекстСуммаНДС = СтрШаблон(ШаблонСуммаНДС, Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта)
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + ?(ЗначениеЗаполнено(НазначениеПлатежа), " ", "") + ТекстТело + ТекстСумма + ТекстСуммаНДС
		КонецЕсли
	Иначе		
		ТекстТело = СтрШаблон(ШаблонСчета, "статье " + СтатьяДвиженияДенежныхСредств);
		
		ТекстСумма = СтрШаблон(ШаблонСумма, Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), Валюта);
		
		НазначениеПлатежа = ТекстТело + ТекстСумма		
	КонецЕсли;
	
	ЗаменяемыеСимволы = "()"
		+ Символы.НПП
		+ Символы.ПС
		+ Символы.ВК
		+ Символы.ПФ
		+ Символы.Таб
		+ Символы.ВТаб;
			
	НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
		ЗаменяемыеСимволы, НазначениеПлатежа,
		СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", СтрДлина(ЗаменяемыеСимволы)));
	
	ЗаменитьПодстрокуВТексте(НазначениеПлатежа, "  ", " ");
	НазначениеПлатежа = СокрЛП(НазначениеПлатежа);
	
	Если СтрЗаканчиваетсяНа(НазначениеПлатежа, ".") Тогда
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(НазначениеПлатежа)
	КонецЕсли;
	
	Возврат СокрП(НазначениеПлатежа)
	
КонецФункции	

Процедура ЗаменитьПодстрокуВТексте(Значение, ПодстрокаПоиска, ПодстрокаЗамены)
	
	Если СтрНайти(ПодстрокаЗамены, ПодстрокаПоиска) > 0 Тогда
		Возврат
	КонецЕсли;
	
	Пока СтрНайти(Значение, ПодстрокаПоиска) > 0 Цикл
		Значение = СтрЗаменить(Значение, ПодстрокаПоиска, ПодстрокаЗамены)
	КонецЦикла
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаПроверкиЗаполнения")
Процедура РСК_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ВсеРеквизиты = Новый Массив;
	РеквизитыОперации = Новый Массив;
	НепроверяемыеРеквизиты = Новый Массив;
	
	РасшифровкаБезРазбиения = Ложь;
	Если ДополнительныеСвойства.Свойство("РасшифровкаБезРазбиения") И ДополнительныеСвойства.РасшифровкаБезРазбиения Тогда
		РасшифровкаБезРазбиения = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Организация = ОрганизацияПолучатель Тогда
		
		Текст = НСтр("ru = 'Одна и та же организация не может являться отправителем и получателем одновременно';
					|en = 'Same company cannot be both a sender and a recipient'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, "Организация",, Отказ);
	КонецЕсли;
    #Вставка 
	//++Конарев Проверка заполненности обязательных реквизитов
	ПроверяемыеРеквизиты.Добавить("НазначениеПлатежа");
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
	КонецЕсли;
	Если ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
		ПроверяемыеРеквизиты.Добавить("БанковскийСчет");		
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.ТипДокумента КАК ТипДокумента,
	|	ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РСК_НастройкиПодтвержадющихДокументовЗРДС.СписокДокументов КАК РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы КАК ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы
	|		ПО (РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.ТипДокумента = ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.РСК_Тип)
	|			И (ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла)
	|ГДЕ
	|	РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.Ссылка.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.Ссылка.СтатьяДДС В (&СтатьяДДС)
	|	И РСК_НастройкиПодтвержадющихДокументовЗРДССписокДокументов.Обязателен
	|	И ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("СтатьяДДС",РасшифровкаПлатежа.ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств"));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ВладелецФайла",Ссылка);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		ОбщегоНазначения.СообщитьПользователю("Прикреплены не все обязательные файлы!",,,,Отказ);
	КонецЕсли;
	Если СверхЛимита И ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ОтправлятьНаСверхЛимит(РасшифровкаПлатежа.ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств")) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВладелецФайла",Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы КАК ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы.РСК_Тип = ЗНАЧЕНИЕ(Перечисление.РСК_ТипыПодтверждающихДокументовЗРДС.ОбоснованиеВнебюджетногоПлатежа)";	
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда  
			ОбщегоНазначения.СообщитьПользователю("Прикреплены не все обязательные файлы!",,,,Отказ);	
		КонецЕсли;
	КонецЕсли;
	#КонецВставки
	
	// Платежной картой можно оплачивать только возврат оплаты клиенту.
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		И (ФормаОплатыПлатежнаяКарта Или ФормаОплатыЗаявки = Перечисления.ФормыОплаты.ПлатежнаяКарта) Тогда
		
		ТекстОшибки = НСтр("ru = 'Оплату платежной картой можно выбирать только для возврата оплаты клиенту';
							|en = 'Payment by payment card can be selected only for refund to a customer'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ХозяйственнаяОперация",, Отказ);
	КонецЕсли;
	
	// Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(
			Организация, ОрганизацияПолучатель) Тогда
		
		ТекстОшибки = НСтр("ru = 'Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.';
							|en = 'Receiving company should be connected with a shipping company by the organizational structure.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ОрганизацияПолучатель",, Отказ);
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		НепроверяемыеРеквизиты.Добавить("ДатаАвансовогоОтчета");
		Если Не ЗначениеЗаполнено(ДатаАвансовогоОтчета) Тогда
			ТекстОшибки = НСтр("ru = 'Поле ""Отчитаться"" не заполнено';
								|en = '""Report"" is required'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ПериодАвансовогоОтчета",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если РаспределениеПоСчетам.Итог("Сумма") > СуммаДокумента Тогда
		ТекстОшибки = НСтр("ru = 'Сумма распределения по счетам не может превышать сумму документа';
							|en = 'The amount of allocation by accounts cannot exceed the document amount'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "РаспределениеПоСчетам",, Отказ);
	КонецЕсли;
	
	Если ЖелательнаяДатаПлатежа < НачалоДня(Дата) Тогда
		Текст = НСтр("ru = 'Желательная дата платежа не может быть меньше даты документа';
					|en = 'Required payment date cannot be earlier than the document date'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, "ЖелательнаяДатаПлатежа",, Отказ);
	КонецЕсли;
	
	Для каждого СтрокаРаспределения Из РаспределениеПоСчетам Цикл
		Если СтрокаРаспределения.ДатаПлатежа < НачалоДня(Дата) Тогда
			Текст = НСтр("ru = 'Дата платежа не может быть меньше даты документа';
						|en = 'Payment date cannot be earlier than the document date'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"РаспределениеПоСчетам[" + РаспределениеПоСчетам.Индекс(СтрокаРаспределения) + "].ДатаПлатежа",,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		И Не ПраваПользователяПовтИсп.СогласованиеЗаявокНаРасходованиеДенежныхСредств() Тогда
		
		ТекстОшибки = НСтр("ru = 'У вас нет права согласования заявок на расходование денежных средств';
							|en = 'You are not authorized to approve payment requests'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,,, Отказ);
		
	ИначеЕсли Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате
		И Не ПраваПользователяПовтИсп.УтверждениеЗаявокНаРасходованиеДенежныхСредств() Тогда
		
		ТекстОшибки = НСтр("ru = 'У вас нет права утверждения к оплате заявок на расходование денежных средств';
							|en = 'You are not authorized to confirm payment requests'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	Если Не (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику И СписокФизЛиц) Тогда
		ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиПлатежа(ЭтотОбъект, СуммаДокумента, ХозяйственнаяОперация, Отказ);
	ИначеЕсли ПеречислениеСотрудникуЧерезБанк Тогда
		ДенежныеСредстваСервер.ПроверитьЛицевыеСчетаСотрудниковПоБанку(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Проверяем соответствие валюты заявки, валюты взаиморасчетов и валюты платежа
	Если ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(Валюта, Дата, РасшифровкаПлатежа, Организация);
		ПроверитьСоответствиеВалютыВзаиморасчетов(Отказ);
	КонецЕсли;
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ЭтотОбъект, ВсеРеквизиты, РеквизитыОперации);
		
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		ВсеРеквизиты, РеквизитыОперации, НепроверяемыеРеквизиты);
		
	Если ФормаОплатыЗаявки <> Перечисления.ФормыОплаты.Безналичная Тогда
		НепроверяемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если РасшифровкаБезРазбиения Тогда
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.Сумма");
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
		Или Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена Тогда
		
		НепроверяемыеРеквизиты.Добавить("СтатьяДвиженияДенежныхСредств");
		#Удаление
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		#КонецУдаления
		НепроверяемыеРеквизиты.Добавить("Контрагент");
		НепроверяемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.Партнер");
		НепроверяемыеРеквизиты.Добавить("СтатьяАктивовПассивов");
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
		НепроверяемыеРеквизиты.Добавить("ЛицевыеСчетаСотрудников.ЛицевойСчет");
		
	ИначеЕсли Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		НепроверяемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		Если ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
			НепроверяемыеРеквизиты.Добавить("БанковскийСчетПолучатель");
			
		ИначеЕсли ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
			НепроверяемыеРеквизиты.Добавить("КассаПолучатель");
			
		Иначе
			НепроверяемыеРеквизиты.Добавить("БанковскийСчетПолучатель");
			НепроверяемыеРеквизиты.Добавить("КассаПолучатель");
		КонецЕсли;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		НепроверяемыеРеквизиты.Добавить("БанковскийСчетПолучатель");
		НепроверяемыеРеквизиты.Добавить("КассаПолучатель");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		Если СписокФизЛиц Тогда
			НепроверяемыеРеквизиты.Добавить("ПодотчетноеЛицо");
			НепроверяемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
			НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа");
			НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
			НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.Сумма");
		Иначе
			НепроверяемыеРеквизиты.Добавить("СтатьяДвиженияДенежныхСредств");
			НепроверяемыеРеквизиты.Добавить("ЛицевыеСчетаСотрудников");
			НепроверяемыеРеквизиты.Добавить("ЛицевыеСчетаСотрудников.ФизическоеЛицо");
			НепроверяемыеРеквизиты.Добавить("ЛицевыеСчетаСотрудников.ЛицевойСчет");
			НепроверяемыеРеквизиты.Добавить("ЛицевыеСчетаСотрудников.Сумма");
		КонецЕсли;
		Если ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
			НепроверяемыеРеквизиты.Добавить("ЛицевыеСчетаСотрудников.ЛицевойСчет");
			НепроверяемыеРеквизиты.Добавить("Контрагент");
		КонецЕсли;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(
		ЭтотОбъект, НепроверяемыеРеквизиты, ХозяйственнаяОперацияПоЗарплате);
	
	Если ПеречислениеСотрудникуЧерезБанк Тогда
		
		Если ФормаОплатыЗаявки <> Перечисления.ФормыОплаты.Наличная Тогда
			РеквизитыОперации.Добавить("Контрагент");
			РеквизитыОперации.Добавить("БанковскийСчетКонтрагента");
		КонецЕсли;
		
	Иначе
		
		Если (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
			И НепроверяемыеРеквизиты.Найти("Контрагент") = Неопределено Тогда
			НепроверяемыеРеквизиты.Добавить("Контрагент");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнениеПартнера(
		ЭтотОбъект, ХозяйственнаяОперация, НепроверяемыеРеквизиты, РасшифровкаБезРазбиения, Отказ);
	
	НепроверяемыеРеквизиты.Добавить("СтатьяРасходов");
	Если ОтражатьКомиссию И СуммаКомиссии<>0 И Не ЗначениеЗаполнено(СтатьяРасходов) Тогда
		Текст = НСтр("ru = 'Поле ""Статья расходов"" по эквайринговой комиссии не заполнено';
					|en = 'The ""Expense item"" field for the acquiring commission is required'");
		ОбщегоНазначения.СообщитьПользователю(Текст, ЭтотОбъект, "СтатьяРасходов",, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ДенежныеСредстваСервер.ПроверитьДоступностьБанковскогоСчета(ЭтотОбъект, БанковскийСчет, "БанковскийСчет");
	КонецЕсли;
	
	Если РаспределениеПоСчетам.Количество() <> 0
		И ФормаОплатыЗаявки <> Перечисления.ФормыОплаты.Наличная Тогда
		ДенежныеСредстваСервер.ПроверитьДоступностьБанковскогоСчетаТабличнойЧасти(
			ЭтотОбъект, "РаспределениеПоСчетам", "БанковскийСчетКасса");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетКонтрагента)
		И РеквизитыОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		ДенежныеСредстваСервер.ПроверитьДоступностьБанковскогоСчета(
			ЭтотОбъект, БанковскийСчетКонтрагента, "БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетПолучатель)
		И РеквизитыОперации.Найти("БанковскийСчетПолучатель") <> Неопределено Тогда
		ДенежныеСредстваСервер.ПроверитьДоступностьБанковскогоСчета(
			ЭтотОбъект, БанковскийСчетПолучатель, "БанковскийСчетПолучатель");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетСписанияКомиссии)
		И РеквизитыОперации.Найти("БанковскийСчетСписанияКомиссии") <> Неопределено Тогда
		ДенежныеСредстваСервер.ПроверитьДоступностьБанковскогоСчета(
			ЭтотОбъект, БанковскийСчетСписанияКомиссии, "БанковскийСчетСписанияКомиссии");
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
	ДенежныеСредстваСервер.ПроверитьБанковскийСчетПолучатель(ЭтотОбъект, Отказ);
	ДенежныеСредстваСервер.ПроверитьВалютуКонвертации(ЭтотОбъект, Отказ);
	
	ПроверитьНаличиеОплатыЗаявки(Отказ);
	
	ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	Если РасшифровкаБезРазбиения Тогда
		ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиБезРазбиения(
			ЭтотОбъект, ПроверяемыеРеквизиты, "РасшифровкаПлатежа", "РасшифровкаБезРазбиения", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаЗаполнения")
Процедура РСК_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьФормуОплатыПоХозОперации(ДанныеЗаполнения);

	ТипОснования = ТипЗнч(ДанныеЗаполнения);

	Если ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ЗаполнитьПоАвансовомуОтчету(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкеНаВозвратТоваровОтКлиента(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоВозвратуТоваровОтКлиента(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		ЗаполнитьПоПоступлениюУслугИВнеоборотныхАктивов(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		ЗаполнитьПоОтчетуКомитенту(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
		ЗаполнитьПоОтчетуКомитентуОСписании(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		ЗаполнитьПоОтчетуКомиссионера(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		ЗаполнитьПоПередачеТоваров(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		ЗаполнитьПоОтчетуПоКомиссии(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		ЗаполнитьПоТаможеннойДекларацииИмпорта(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗаполнитьПоДоговору(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
		ЗаполнитьПоДоговоруКредитаДепозита(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		ЗаполнитьПоВозвратуМеждуОрганизациями(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
		И ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		И ДанныеЗаполнения.Свойство("ПодотчетноеЛицо") Тогда

		Если Не ДанныеЗаполнения.Свойство("Подразделение") Тогда
			ДанныеЗаполнения.Вставить("Подразделение", ФизическиеЛицаУТ.ПодразделениеФизическогоЛица(ДанныеЗаполнения.ПодотчетноеЛицо));
		КонецЕсли;

		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);

		//++ НЕ УТ
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.ДоговорыАренды") Тогда
		ЗаполнитьПоДоговоруЛизинга(ДанныеЗаполнения, ДанныеЗаполнения);
		//-- НЕ УТ

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров") Тогда
		ЗаполнитьПоВыкупуПринятыхНаХранениеТоваров(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СписаниеПринятыхНаХранениеТоваров") Тогда
		ЗаполнитьПоСписаниюПринятыхНаХранениеТоваров(ДанныеЗаполнения, ДанныеЗаполнения);

		//++ НЕ УТ
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		ЗаполнитьПоЗаказуПереработчику(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПереработчику2_5") Тогда
		ЗаполнитьПоЗаказуПереработчику2_5(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		ЗаполнитьПоОтчетуПереработчика(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетПереработчика2_5") Тогда
		ЗаполнитьПоОтчетуПереработчика2_5(ДанныеЗаполнения, ДанныеЗаполнения);

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ОтчетПоКомиссииМеждуОрганизациями") 
		И ТипЗнч(ДанныеЗаполнения.ОтчетПоКомиссииМеждуОрганизациями) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда

		ОтчетПоКомиссии = ДанныеЗаполнения.ОтчетПоКомиссииМеждуОрганизациями;
		Если ОтчетПоКомиссии.УдержатьВознаграждение Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить Заявку на расходование ДС: Вознаграждение на основании документа %1, поскольку в нем удержано вознаграждение';
			|en = 'It is not required to enter Payment request: Remuneration is based on the %1 document because remuneration is deducted in it'"),
			ОтчетПоКомиссии);
			ВызватьИсключение Текст;
		КонецЕсли;

		ЗаполнитьПоОтчетуПоКомиссии(ОтчетПоКомиссии, ДанныеЗаполнения, ОтчетПоКомиссии.Организация);

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеУслугПоАренде") Тогда
		ЗаполнитьПоПоступлениюУслугПоАренде(ДанныеЗаполнения, ДанныеЗаполнения);

		//-- НЕ УТ
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ЗаполнитьПоПриходномуКассовомуОрдеру(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		ЗаполнитьПоПоступлениюБезналичныхДенежныхСредств(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("Массив") Тогда

		ЗаполнитьПоМассивуОснований(ДанныеЗаполнения, ДанныеЗаполнения.Основание);
	КонецЕсли;

	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь", Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);

	ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

	Автор = Пользователи.ТекущийПользователь();
	КтоЗаявил = Пользователи.ТекущийПользователь();

	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);

	ИнициализироватьДокумент(ДанныеЗаполнения);

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
		ПараметрыВыбораСтатейИАналитик = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыВыбораСтатейИАналитик(
		ДанныеЗаполнения.ХозяйственнаяОперация);
	Иначе
		ПараметрыВыбораСтатейИАналитик = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПараметрыВыбораСтатейИАналитик(
		ХозяйственнаяОперация);
	КонецЕсли;
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	#Вставка
	//++Конарев Безналичная форма оплаты по умолчанию
	ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная;
	#КонецВставки
	
КонецПроцедуры

&После("ПередЗаписью")
Процедура РСК_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения) 
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И НЕ ИнтеграцияС1СДокументооборот3.ЕстьСвязанныйОбъектДО(Ссылка)
		И Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована Тогда  
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СтатьиДокумента",РасшифровкаПлатежа.Выгрузить(,"СтатьяДвиженияДенежныхСредств")); 
		Запрос.УстановитьПараметр("Подразделение",Подразделение);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ПОМЕСТИТЬ ВТ_СтатьиДокумента
		|ИЗ
		|	&СтатьиДокумента КАК СтатьиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_СтатьиДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	ВТ_СтатьиДокумента КАК ВТ_СтатьиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_НастройкаМаршрутаПодразделения КАК САВ_НастройкаМаршрутаПодразделения
		|		ПО ВТ_СтатьиДокумента.СтатьяДвиженияДенежныхСредств = САВ_НастройкаМаршрутаПодразделения.СтатьяДДС
		|			И (САВ_НастройкаМаршрутаПодразделения.ЦФО = &Подразделение)
		|ГДЕ
		|	САВ_НастройкаМаршрутаПодразделения.СтатьяДДС ЕСТЬ NULL";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда 
			Статьи = Результат.Выгрузить().ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств");
			ОшибочныеСтатьи = СтрСоединить(Статьи,",");
			Если Статьи.Количество() > 1 Тогда
				Ошибка = СтрШаблон("Статьи движения денежных средств %1 недопустимы для выбранного подразделения",ОшибочныеСтатьи);
			Иначе
				Ошибка = СтрШаблон("Статья движения денежных средств %1 недопустима для выбранного подразделения",ОшибочныеСтатьи);
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(Ошибка,,,,Отказ);  
		КонецЕсли; 
	КонецЕсли;
	Если Не Пользователи.РолиДоступны("ПолныеПрава",Пользователи.ТекущийПользователь()) Тогда
		
		Если (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения 
			ИЛИ (ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,"ПометкаУдаления") И ПометкаУдаления))
			И ИнтеграцияС1СДокументооборот3.ЕстьСвязанныйОбъектДО(Ссылка)
			И НЕ Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена Тогда  
			
			ОбщегоНазначения.СообщитьПользователю("Заявка уже отправлена на согласование, невозможно выполнить действие!",,,,Отказ);
			
		КонецЕсли;  
	КонецЕсли;
	
КонецПроцедуры

