
Процедура СвернутьТабличнуюЧастьРезультатаЗапроса(МассивРезультатов, НомерРезультатаПоТабличнойЧасти)
	
	РезультатПоТабличнойЧасти = МассивРезультатов[НомерРезультатаПоТабличнойЧасти].Выгрузить();
	РезультатПоТабличнойЧасти.Удалить(0);  // Первая строка - это ИТОГ. Поэтому удаляем её
	
	НовыйРезультатПоТабличнойЧасти = ВыполнитьЗапросНаСверткуТаблицы(РезультатПоТабличнойЧасти);
	
	МассивРезультатов[НомерРезультатаПоТабличнойЧасти] = НовыйРезультатПоТабличнойЧасти;

КонецПроцедуры

Функция ВыполнитьЗапросНаСверткуТаблицы(РезультатПоТабличнойЧасти)
	
	ИмяТаблицы = "ТаблицаТоваров";
	ТекстЗапроса = СформироватьТекстЗапросаНаСверткуТаблицы(ИмяТаблицы, РезультатПоТабличнойЧасти);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр(ИмяТаблицы, РезультатПоТабличнойЧасти);
	НовыйРезультатПоТабличнойЧасти = Запрос.Выполнить();
	
	Возврат НовыйРезультатПоТабличнойЧасти;

КонецФункции

Функция СформироватьТекстЗапросаНаСверткуТаблицы(ИмяТаблицы, Знач РезультатПоТабличнойЧасти)
	
	КолонкиТаблицы = РезультатПоТабличнойЧасти.Колонки;
	
	ИмяНовойТаблицы = ИмяТаблицы + "2";
	ПолеШаблон = "%1.%2 КАК %2";
	ШаблонПоляАгрегатнойФункции = "%1(%2.%3) КАК %3";
	
	// Создание первой выборки
	ПомещаемаяТаблицаЗапрос = СформироватьПомещениеТаблицы(ИмяТаблицы, КолонкиТаблицы, ПолеШаблон);
	
	// Создание второй выборки
	ПоляСуммы = МассивПолейСуммирования(КолонкиТаблицы);
	ПоляМаксимума = МассивПолейМаксимум(КолонкиТаблицы);
	ПоляМинимума = МассивПолейМинимум(КолонкиТаблицы);
	ПоляГруппировки = МассивПолейГруппировки(КолонкиТаблицы);
	ПоляРасчета = МассивПолейРасчета(ИмяТаблицы);
	
	Поля = Новый Структура("ПоляГруппировки,ПоляМаксимума,ПоляМинимума,ПоляРасчета,ПоляСуммы", ПоляГруппировки, ПоляМаксимума, ПоляМинимума, ПоляРасчета, ПоляСуммы);
	ПоляТаблицыСвертки = СформироватьМассивПолейТаблицыСвертки(ИмяТаблицы, КолонкиТаблицы, ПолеШаблон, Поля, ШаблонПоляАгрегатнойФункции);
	
	ПеречислениеПолейВыборки = СоздатьПеречислениеПоМассиву(ПоляТаблицыСвертки);
	ПеречислениеПолейГруппировки = СформироватьПоляГруппировки(ИмяТаблицы, ПоляГруппировки);
	
	СвертываемаяТаблицаЗапрос = СформироватьСвертываемуюТаблицу(ИмяНовойТаблицы, ИмяТаблицы, ПеречислениеПолейВыборки, ПеречислениеПолейГруппировки);
	
	// Создание третьей выборки
	ВыходнаяТаблицаЗапрос = СформироватьИтоговуюТаблицуЗапроса(ИмяНовойТаблицы, ПеречислениеПолейВыборки, ПолеШаблон);
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ПомещаемаяТаблицаЗапрос);
	ТекстыЗапроса.Добавить(СвертываемаяТаблицаЗапрос);
	ТекстыЗапроса.Добавить(ВыходнаяТаблицаЗапрос);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ";" + Символы.ПС); 
	
	Возврат ТекстЗапроса;

КонецФункции
    
Процедура ДобавитьПолеВМассив(КолонкиТаблицы, МассивПолей, ИмяПоля)
	
	ЕстьКолонка = КолонкиТаблицы.Найти(ИмяПоля) <> Неопределено;
	
	Если ЕстьКолонка Тогда 
		МассивПолей.Добавить(ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСвертываемуюТаблицу(Знач ИмяНовойТаблицы, Знач ИмяТаблицы, Знач ПеречислениеПолейВыборки, Знач ПеречислениеПолейГруппировки)
	
	Перем СверткаТаблицы;
	
	СверткаТаблицы = "ВЫБРАТЬ &ПереносСтроки &ПеречислениеПолей &ПереносСтроки ПОМЕСТИТЬ &ИмяНовойТаблицы &ПереносСтроки ИЗ &ПереносСтроки &ИмяТаблицы КАК &ИмяТаблицы &ПереносСтроки СГРУППИРОВАТЬ ПО &ПереносСтроки &ПеречислениеГруппировки &ПереносСтроки";   	
	СверткаТаблицы = СтрЗаменить(СверткаТаблицы, "&ПереносСтроки", Символы.ПС);
	СверткаТаблицы = СтрЗаменить(СверткаТаблицы, "&ПеречислениеПолей", ПеречислениеПолейВыборки);
	СверткаТаблицы = СтрЗаменить(СверткаТаблицы, "&ИмяТаблицы", ИмяТаблицы);
	СверткаТаблицы = СтрЗаменить(СверткаТаблицы, "&ПеречислениеГруппировки", ПеречислениеПолейГруппировки);
	СверткаТаблицы = СтрЗаменить(СверткаТаблицы, "&ИмяНовойТаблицы", ИмяНовойТаблицы);  
	
	Возврат СверткаТаблицы;

КонецФункции

Функция СформироватьПоляГруппировки(Знач ИмяТаблицы, Знач ПоляГруппировки)
	
	Перем ПеречислениеПолейГруппировки, Поле, ПолеВыбрать, ПоляГруппировкиМассив;
	
	ПоляГруппировкиМассив = Новый Массив;
	Для Каждого Поле Из ПоляГруппировки Цикл
		ПолеВыбрать = СтрШаблон("%1.%2", ИмяТаблицы, Поле);
		ПоляГруппировкиМассив.Добавить(ПолеВыбрать);
	КонецЦикла;
	
	ПеречислениеПолейГруппировки = СоздатьПеречислениеПоМассиву(ПоляГруппировкиМассив);
	
	Возврат ПеречислениеПолейГруппировки;

КонецФункции

Функция СоздатьПеречислениеПоМассиву(Знач МассивСтрок)
	
	Перем ПеречислениеСтрок;
	
	ПеречислениеСтрок = СтрСоединить(МассивСтрок, "," + Символы.ПС);
	
	Возврат ПеречислениеСтрок;

КонецФункции

Функция СформироватьМассивПолейТаблицыСвертки(ИмяТаблицы, Знач КолонкиТаблицы, Знач ПолеШаблон, Поля, Знач ШаблонПоляАгрегатнойФункции)
	
	ПоляГруппировки = Поля.ПоляГруппировки;
	ПоляМаксимума = Поля.ПоляМаксимума;
	ПоляМинимума = Поля.ПоляМинимума;
	ПоляРасчета = Поля.ПоляРасчета;
	ПоляСуммы = Поля.ПоляСуммы;
	
	ПоляВыборки = Новый Массив; 
	Для Каждого Колонка Из КолонкиТаблицы Цикл 
		
		ИмяКолонки = Колонка.Имя;
		
		Поле = "";
		
		Если ПоляГруппировки.Найти(ИмяКолонки) <> Неопределено Тогда 
			Поле = СтрШаблон(ПолеШаблон, ИмяТаблицы, ИмяКолонки);			
		КонецЕсли;
		
		Если ПоляМаксимума.Найти(ИмяКолонки) <> Неопределено Тогда 
			Поле = СтрШаблон(ШаблонПоляАгрегатнойФункции, "МАКСИМУМ", ИмяТаблицы, ИмяКолонки);
		КонецЕсли;  
		
		Если ПоляСуммы.Найти(ИмяКолонки) <> Неопределено Тогда 
			Поле = СтрШаблон(ШаблонПоляАгрегатнойФункции, "СУММА", ИмяТаблицы, ИмяКолонки);
		КонецЕсли;
		
		Если ПоляМинимума.Найти(ИмяКолонки) <> Неопределено Тогда 
			Поле = СтрШаблон(ШаблонПоляАгрегатнойФункции, "МИНИМУМ", ИмяТаблицы, ИмяКолонки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Поле) Тогда 
			ПоляВыборки.Добавить(Поле);
		КонецЕсли;
		
	КонецЦикла;       
	
	Для Каждого Расчет Из ПоляРасчета Цикл
		ПоляВыборки.Добавить(Расчет);	
	КонецЦикла;        
	
	Возврат ПоляВыборки;

КонецФункции

Функция СформироватьИтоговуюТаблицуЗапроса(НовоеИмяТаблицы, Знач ПеречислениеПолейПрошлойТаблицы, Знач ПолеШаблон)
	
	НовыеПоля = СформироватьМассивПолейВыходнойТаблицыПоПрошлойТаблице(НовоеИмяТаблицы, ПеречислениеПолейПрошлойТаблицы, ПолеШаблон);
	
	// Добавляем поля, которые были опущены в прошлой таблице (чтобы сработала группировка)
	НовыеПоля.Добавить("ДанныеЕдиницыИзмерения.Представление КАК ЕдиницаИзмеренияНаименование");
	НовыеПоля.Добавить("ДанныеЕдиницыИзмерения.Код КАК ЕдиницаИзмеренияКод");
	НовыеПоля.Добавить(СтрШаблон("%1.Номенклатура.ЕдиницаИзмеренияТНВЭД КАК ЕдиницаИзмеренияТНВЭД", НовоеИмяТаблицы));
	НовыеПоля.Добавить(СтрШаблон("%1.Номенклатура.ЕдиницаИзмеренияТНВЭД.Представление КАК ЕдиницаИзмеренияТНВЭДНаименование", НовоеИмяТаблицы));
	НовыеПоля.Добавить(СтрШаблон("%1.Номенклатура.ЕдиницаИзмеренияТНВЭД.Код КАК ЕдиницаИзмеренияТНВЭДКод", НовоеИмяТаблицы));
	НовыеПоля.Добавить("ЕСТЬNULL(ДанныеХарактеристики.НаименованиеПолное, """") КАК ХарактеристикаНаименование");
	НовыеПоля.Добавить("ДанныеСтраныПросхождения.Ссылка КАК СтранаПроисхождения");
	НовыеПоля.Добавить("ДанныеСтраныПросхождения.Код КАК СтранаПроисхожденияКод");
	
	ПеречислениеПолей = СоздатьПеречислениеПоМассиву(НовыеПоля);
	                                                                                              
	// Взято их модуля менеждера СчетФактурыВыданный см. ТекстЗапросаДанныхТабличнойЧастиДляПечатиСчетаФактуры()																								  
	Соединение = СтрШаблон("ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ДанныеЕдиницыИзмерения
	|		ПО %1.ЕдиницаИзмерения = ДанныеЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ДанныеХарактеристики
	|		ПО %1.Характеристика = ДанныеХарактеристики.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК ДанныеСтраныПросхождения
	|		ПО %1.НомерГТД.СтранаПроисхождения = ДанныеСтраныПросхождения.Ссылка", НовоеИмяТаблицы);
	
	ВыходнаяТаблица = "ВЫБРАТЬ &ПереносСтроки &ПеречислениеПолей &ПереносСтроки ИЗ &ПереносСтроки &ИмяТаблицы КАК &ИмяТаблицы &ПереносСтроки &Соединение &ПереносСтроки ИТОГИ ПО ССЫЛКА";
	
	ВыходнаяТаблица = СтрЗаменить(ВыходнаяТаблица, "&ПеречислениеПолей", ПеречислениеПолей);
	ВыходнаяТаблица = СтрЗаменить(ВыходнаяТаблица, "&ИмяТаблицы", НовоеИмяТаблицы);
	ВыходнаяТаблица = СтрЗаменить(ВыходнаяТаблица, "&Соединение", Соединение);
	ВыходнаяТаблица = СтрЗаменить(ВыходнаяТаблица, "&ПереносСтроки", Символы.ПС);
	
	Возврат ВыходнаяТаблица;

КонецФункции

Функция СформироватьМассивПолейВыходнойТаблицыПоПрошлойТаблице(Знач НовоеИмяТаблицы, Знач ПеречислениеПолейПрошлойТаблицы, Знач ПолеШаблон)
	
	Перем ИндексСловаПоиска, НовоеПоле, НовыеПоля, ПеречислениеПолей, Поли, СловоПоиск;
	
	ПеречислениеПолей = СтрРазделить(ПеречислениеПолейПрошлойТаблицы, ",");
	
	НовыеПоля = Новый Массив;
	Для Каждого Поли Из ПеречислениеПолей Цикл    
		
		СловоПоиск = "КАК";
		ИндексСловаПоиска = СтрНайти(Поли, СловоПоиск) + СтрДлина(СловоПоиск);
		НовоеПоле = СокрЛП(Сред(Поли, ИндексСловаПоиска));
		НовоеПоле = СтрШаблон(ПолеШаблон, НовоеИмяТаблицы, НовоеПоле);
		
		НовыеПоля.Добавить(НовоеПоле);
	КонецЦикла;
	Возврат НовыеПоля;

КонецФункции

Функция СформироватьПомещениеТаблицы(ИмяТаблицы, Знач КолонкиТаблицы, Знач ПолеШаблон)
	
	ПоляВыборки = Новый Массив;
	
	Для Каждого Колонка Из КолонкиТаблицы Цикл 
		ТекстПоля = СтрШаблон(ПолеШаблон, ИмяТаблицы, Колонка.Имя);
		ПоляВыборки.Добавить(ТекстПоля);
	КонецЦикла; 
	
	ПеречислениеПолей = СоздатьПеречислениеПоМассиву(ПоляВыборки);
	
	ПомещаемаяТаблица = "ВЫБРАТЬ &ПереносСтроки &ПеречислениеПолей &ПереносСтроки ПОМЕСТИТЬ &ИмяТаблицы &ПереносСтроки ИЗ &ПереносСтроки &&ИмяТаблицы КАК &ИмяТаблицы";
	
	ПомещаемаяТаблица = СтрЗаменить(ПомещаемаяТаблица, "&ПереносСтроки", Символы.ПС);
	ПомещаемаяТаблица = СтрЗаменить(ПомещаемаяТаблица, "&ПеречислениеПолей", ПеречислениеПолей);
	ПомещаемаяТаблица = СтрЗаменить(ПомещаемаяТаблица, "&ИмяТаблицы", ИмяТаблицы);
	
	Возврат ПомещаемаяТаблица;

КонецФункции

Функция МассивПолейРасчета(ИмяТаблицы)
	
	ПоляРасчета = Новый Массив;
														
	Шаблон = ШаблонРасчетаДеленияСуммПолей(ИмяТаблицы, "СуммаСНДС", "Количество", "Цена");
	ПоляРасчета.Добавить(Шаблон);
	Шаблон = ШаблонРасчетаДеленияСуммПолей(ИмяТаблицы, "СуммаСНДСДо", "КоличествоДо", "ЦенаДо");
	ПоляРасчета.Добавить(Шаблон);   
	
	Возврат ПоляРасчета;

КонецФункции

Функция МассивПолейГруппировки(Знач КолонкиТаблицы)
	
	ПоляГруппировки = Новый Массив;
	
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляГруппировки, "Ссылка");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляГруппировки, "НоменклатураПартнера");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляГруппировки, "ДокументОснование");
	
	Возврат ПоляГруппировки;

КонецФункции

Функция МассивПолейМинимум(Знач КолонкиТаблицы)
	
	ПоляМинимума = Новый Массив;                                             
	
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМинимума, "НомерСтроки");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМинимума, "НомерСтрокиИсходногоСФ");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМинимума, "НомерСтрокиНаборы");
	
	Возврат ПоляМинимума;

КонецФункции

Функция МассивПолейМаксимум(Знач КолонкиТаблицы)
	
	ПоляМаксимума = Новый Массив;
	
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "Номенклатура");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "НоменклатураНаименование");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "НоменклатураКод");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "КодТНВЭД");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ЕдиницаИзмерения");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "Упаковка");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "Характеристика");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "СерияНаименование");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "НомерГТД");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "СтавкаНДС");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ВариантПредставленияНабораВПечатныхФормах");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ВариантРасчетаЦеныНабора");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "НоменклатураНабора");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ХарактеристикаНабора");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ЭтоКомплектующие");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ЭтоНабор");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ПолныйНабор");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ЭтоВозвратнаяТара");    
	
	// По данным полям не работает МАКСИМУМ
	//ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ХарактеристикаНаименование");  
	//ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ЕдиницаИзмеренияНаименование");  
	//ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ЕдиницаИзмеренияКод");  
	//ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ЕдиницаИзмеренияТНВЭД");  
	//ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ЕдиницаИзмеренияТНВЭДНаименование");  
	//ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "ЕдиницаИзмеренияТНВЭДКод");  
	//ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "СтранаПроисхождения");  
	//ДобавитьПолеВМассив(КолонкиТаблицы, ПоляМаксимума, "СтранаПроисхожденияКод");  
	
	Возврат ПоляМаксимума;

 КонецФункции

Функция МассивПолейСуммирования(Знач КолонкиТаблицы)
	
	ПоляСуммы = Новый Массив;
	
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "Количество");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "КоличествоПоРНПТ");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "СуммаБезНДС");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "СуммаНДС");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "СуммаСНДС");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "КоличествоДо");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "КоличествоПоРНПТДо");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "КоличествоПрослежУвеличение");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "КоличествоПрослежУменьшение");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "СуммаБезНДСДо");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "РазницаБезНДСУвеличение");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "РазницаБезНДСУменьшение");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "СуммаНДСДо");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "РазницаНДСУвеличение");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "РазницаНДСУменьшение");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "СуммаСНДСДо");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "РазницаСНДСУвеличение");  
	ДобавитьПолеВМассив(КолонкиТаблицы, ПоляСуммы, "РазницаСНДСУменьшение");
	
	Возврат ПоляСуммы;

КонецФункции

Функция ШаблонРасчетаДеленияСуммПолей(ИмяТаблицы, ДелимоеПоле, ДелительПоле, ЧастоеПоле)
	
	Перем Делимое, Делитель, Шаблон;
	
	Делитель = СтрШаблон("%1(%2.%3)", "СУММА", ИмяТаблицы, ДелительПоле);
	Делимое = СтрШаблон("%1(%2.%3)", "СУММА", ИмяТаблицы, ДелимоеПоле);
	
	Шаблон = СтрШаблон("ВЫБОР КОГДА %1 = 0 ТОГДА 0 ИНАЧЕ %2 / %1 КОНЕЦ КАК %3", Делитель, Делимое, ЧастоеПоле);
	
	Возврат Шаблон;

КонецФункции    

&ИзменениеИКонтроль("ПолучитьДанныеДляПечатнойФормыСчетФактура")
Функция РСК_ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТаблицаОснований();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	МассивШапокОснований = РезультатПакета[3].Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	МассивОснований = РезультатПакета[1].Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
	Если МассивОснований.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;


	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Контракт = Неопределено;
	ЕстьЭлектронноеАктирование = Ложь;
	Для Каждого Основание Из МассивОснований Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Основание, "Договор")
			И ТипЗнч(Основание.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.Договор, "Организация");
			ПараметрыОтправкиВЕИС = ЭлектронноеАктированиеЕИСУТ.ПараметрыОтправкиВЕИС(
					Организация, Основание.Договор);
			ЕстьЭлектронноеАктирование = ПараметрыОтправкиВЕИС.ВозможнаОтправка
				И ЭлектронноеАктированиеЕИСУТ.ДокументОтправляетсяВЕИС(Основание);
			Контракт = ПараметрыОтправкиВЕИС.Контракт;
		КонецЕсли;
	КонецЦикла;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

	
	ПоместитьВременнуюТаблицуШапокОснований(МенеджерВременныхТаблиц, МассивШапокОснований);
	ПоместитьВременнуюТаблицуДанныхОснований(МенеджерВременныхТаблиц, МассивОснований);
	ПоместитьВременнуюТаблицуПокупатели(МенеджерВременныхТаблиц, МассивОбъектов);
	
	// Передается Ссылка вместо Организации, чтобы не брать ответственных по умолчанию из организации.
	// Такие ответственные будут взяты из торгового документа-основания.
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
		МассивОбъектов, МенеджерВременныхТаблиц, "Ссылка", ,
		"ОтветственныеЛицаСФ");
	
	МассивАналитикУчетаПоПартнерам = Новый Массив;
	
	// В подчиненном узле нет всех данных для определения авансов, поэтому заполняем только если главный узел:
	ЗаполнятьПлатежноРасчетныеДокументы = ПланыОбмена.ГлавныйУзел() = Неопределено;
	
	Если ЗаполнятьПлатежноРасчетныеДокументы Тогда
		ПоместитьВременнуюТаблицуЗаполненияПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц);
		МассивАналитикУчетаПоПартнерамПлатежноРасчетныхДокументов = 
			АналитикиУчетаПоПартнерамДляАктуализацииПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивАналитикУчетаПоПартнерам,
				МассивАналитикУчетаПоПартнерамПлатежноРасчетныхДокументов);
		ОкончаниеПериодаРасчета = КонецРасчетаДляАктуализацииПлатежноРасчетныхДокументов(МенеджерВременныхТаблиц);
	КонецЕсли;
	
	// Актуализировать расчеты для получения сумм по товарам документа-основания
	Если Не ПараметрыПечати.ПечатьВВалюте Тогда
		
		Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДокументов.Ссылка КАК Ссылка
			|ИЗ
			|	ТаблицаШапокДокументов КАК ДанныеДокументов
			|ГДЕ
			|	ДанныеДокументов.Валюта <> ДанныеДокументов.Организация.ВалютаРегламентированногоУчета
			|	ИЛИ ДанныеДокументов.Валюта <> &ВалютаУправленческогоУчета";
			
			МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			РегистрыСведений.СуммыДокументовВВалютахУчета.РассчитатьСуммыДокументовВВалютахУчета(МассивДокументов);
			
		Иначе
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		ТаблицаШапокДокументов КАК ДанныеДокументов
			|	ПО
			|		РасчетыСКлиентами.Регистратор = ДанныеДокументов.Ссылка
			|
			|ГДЕ
			|	ДанныеДокументов.Валюта <> ДанныеДокументов.Организация.ВалютаРегламентированногоУчета
			|	И РасчетыСКлиентами.Активность
			|";
			
			ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивАналитикУчетаПоПартнерам, 
				ТаблицаАналитик.ВыгрузитьКолонку("АналитикаУчетаПоПартнерам"), Истина);
			
			ОкончаниеПериодаРасчета = КонецМесяца(ВзаиморасчетыСервер.ПолучитьМаксимальнуюДатуВКоллекцииДокументов(МенеджерВременныхТаблиц)) + 1;
			
		КонецЕсли;
	КонецЕсли;
	
	Если (ЗаполнятьПлатежноРасчетныеДокументы ИЛИ Не ПараметрыПечати.ПечатьВВалюте)
		И МассивАналитикУчетаПоПартнерам.Количество() > 0 Тогда
		Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикУчетаПоПартнерам;
			Попытка
				РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ОкончаниеПериодаРасчета, АналитикиРасчета);
			Исключение
				ТекстСообщения = НСтр("ru = 'Печатная форма сформирована по неактуальным данным.
				|Необходимо актуализировать взаиморасчеты вручную и переформировать печатную форму.';
				|en = 'Print form is generated according to irrelevant data. 
				|Update mutual settlements manually, and then create the print form again.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		Иначе
			Если Константы.РаспределятьФактическиеРасчетыФоновымЗаданием.Получить() Тогда
				ТекстСообщения = НСтр("ru = 'Печатная форма сформирована по неактуальным данным.';
										|en = 'The print form is generated according to irrelevant data.'") + Символы.ПС;
				ТекстСообщения = ТекстСообщения + ВзаиморасчетыСервер.ТекстПредупрежденияЗагрузкаДокументовВзаиморасчетов();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнятьПлатежноРасчетныеДокументы Тогда
		ПлатежноРасчетныеДокументы = ПоместитьВременнуюТаблицуПлатежноРасчетныхДокументов(
			МенеджерВременныхТаблиц,
			МассивАналитикУчетаПоПартнерамПлатежноРасчетныхДокументов);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	NULL КАК Ссылка,
		|	NULL КАК СтрокаПлатежноРасчетныеДокументы
		|ПОМЕСТИТЬ ТаблицаПлатежноРасчетныеДокументы";
		Запрос.Выполнить();
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ВыводитьНаборы", Ложь);
	СформироватьВременнуюТаблицуТоваровДляПечати(МенеджерВременныхТаблиц, МассивОснований, ПараметрыПечати);
	
	ПечататьСчетаФактурыПолученные = ПараметрыПечати.Свойство("МассивСчетФактураПолученный");
	Если ПечататьСчетаФактурыПолученные Тогда
		Запрос.УстановитьПараметр("МассивСчетФактураПолученный", ПараметрыПечати.МассивСчетФактураПолученный);
	КонецЕсли;
	
	ЗаполнитьДанныеШтрихкодовДляУКДДо = Ложь;
	Если ПараметрыПечати.Свойство("ЗаполнитьДанныеШтрихкодовДляУКДДо") И ПараметрыПечати.ЗаполнитьДанныеШтрихкодовДляУКДДо Тогда
		ЗаполнитьДанныеШтрихкодовДляУКДДо = Истина;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru = 'счет-фактура';
																|en = 'tax invoice'"));
	Запрос.УстановитьПараметр("ПредставлениеСчетФактураПосредника", НСтр("ru = 'счет-фактура посредника';
																		|en = 'intermediary tax invoice'"));
	Запрос.УстановитьПараметр("ВыводитьБазовыеЕдиницыИзмерения", Константы.ВыводитьБазовыеЕдиницыИзмерения.Получить());
	
	МассивОперацийПередачаНаКомиссию = Новый Массив;
	МассивОперацийПередачаНаКомиссию.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	МассивОперацийПередачаНаКомиссию.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	МассивОперацийПередачаНаКомиссию.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
	Запрос.УстановитьПараметр("ХозяйственныеОперацииПередачаНаКомиссию", МассивОперацийПередачаНаКомиссию);
	
	Запрос.УстановитьПараметр("ВыводитьОсновнойУПД", 
		Не (ПараметрыПечати.Свойство("НеВыводитьОсновнойУПД") И ПараметрыПечати.НеВыводитьОсновнойУПД));
	Запрос.УстановитьПараметр("ДатаОтраженияВозвратовКорректировочнымиСФ", УчетНДСУП.НастройкиУчета().ДатаОтраженияВозвратовКорректировочнымиСФ);
	
	СформироватьВтСчетаФактурыПолученные(МенеджерВременныхТаблиц, ПараметрыПечати);
	СформироватьВТПорядковыеНомераТаблицыТоваровИПредставления5а(МенеджерВременныхТаблиц, ПараметрыПечати);
	СформироватьПредставлениеВыставленКомиссионеру(МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("МассивОснований", МассивОснований);
	
	Запрос.Текст = ТекстЗапросаДанныхШапкиДляПечатиСчетаФактуры(ПараметрыПечати)
		+ ТекстЗапросаИсходныхДокументовДляПечатиСчетаФактуры()
		+ ТекстЗапросаДанныхТабличнойЧастиДляПечатиСчетаФактуры(ПараметрыПечати)
		+ ТекстЗапросаДанныхМаркировки(ЗаполнитьДанныеШтрихкодовДляУКДДо)
		+ ТекстЗапросаДанныхПоПеревыставленномуСчетуФактуре()
		+ ТекстЗапросаДанныхПрослеживаемость()
		+ ТекстЗапросаДанныхПрослеживаемыеКомплектующие();
	

	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Если ЕстьЭлектронноеАктирование Тогда
		Запрос.Текст = Запрос.Текст + ЭлектронноеАктированиеЕИСУТ.ТекстЗапросаДанныеДляПечатиСчетовФактур("МассивОснований");
		Запрос.УстановитьПараметр("ГосударственныйКонтрактЕИС", Контракт);
		Если ТипЗнч(МассивОснований[0]) = Тип("ДокументСсылка.СчетФактураВыданный") 
				Или ТипЗнч(МассивОснований[0]) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
			Запрос.УстановитьПараметр("ЭтапИсполненияКонтрактаЕИС", МассивОснований[0].ДокументОснование.ЭтапГосконтрактаЕИС);
		Иначе
			Запрос.УстановитьПараметр("ЭтапИсполненияКонтрактаЕИС", МассивОснований[0].ЭтапГосконтрактаЕИС);			
		КонецЕсли;		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	КоличествоРезультатов     = МассивРезультатов.Количество();


	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Если ЕстьЭлектронноеАктирование Тогда	
		КоличествоРезультатов     = КоличествоРезультатов - 5;
		#Вставка
		//++РС Консалт Назаров М.Ю. 20 сентября 2022 г. 9:55:13  
		Если ЗаполнитьДанныеШтрихкодовДляУКДДо Тогда
			НомерРезультатаПоТабличнойЧасти = КоличествоРезультатов - 6;
		Иначе
			НомерРезультатаПоТабличнойЧасти = КоличествоРезультатов - 5;
		КонецЕсли;
		
		//СвернутьТабличнуюЧастьРезультатаЗапроса(МассивРезультатов, НомерРезультатаПоТабличнойЧасти);	
		//--РС Консалт Назаров М.Ю. 20 сентября 2022 г. 10:26:19
		#КонецВставки
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

	
	Если ЗаполнитьДанныеШтрихкодовДляУКДДо Тогда
		РезультатПоКонтрагентам   = МассивРезультатов[КоличествоРезультатов - 10];
		РезультатПоШапке          = МассивРезультатов[КоличествоРезультатов - 9];
		РезультатПоИсходнымДанным = МассивРезультатов[КоличествоРезультатов - 8];
		РезультатПоТабличнойЧасти = МассивРезультатов[КоличествоРезультатов - 7];
		
		МаркировкаДо = МассивРезультатов[КоличествоРезультатов - 5].Выгрузить();
		МаркировкаДо = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимое(МаркировкаДо);
		Если МаркировкаДо.Количество() = 0 Тогда // Коды переданы через документ прямого обмена.
			Маркировка = МаркировкаДо.СкопироватьКолонки();
		Иначе
			Маркировка = МассивРезультатов[КоличествоРезультатов - 6].Выгрузить();
			Маркировка = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимое(Маркировка);
		КонецЕсли;
		
		РезультатПоПоставщикам    = МассивРезультатов[КоличествоРезультатов - 4];
		
		Прослеживаемость = МассивРезультатов[КоличествоРезультатов - 2];
		ПрослеживаемыеКомплектующие = УчетПрослеживаемыхТоваровЛокализация.ПрослеживаемыеКомплектующиеДляПечатиДанных(
										МассивРезультатов[КоличествоРезультатов - 1]);
		
		СтруктураДанныхДляПечати = Новый Структура;
		СтруктураДанныхДляПечати.Вставить("РезультатПоШапке"              , РезультатПоШапке);
		СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти"     , РезультатПоТабличнойЧасти);
		СтруктураДанныхДляПечати.Вставить("РезультатПоИсходнымДанным"     , РезультатПоИсходнымДанным);
		СтруктураДанныхДляПечати.Вставить("РезультатПоКонтрагентам"       , РезультатПоКонтрагентам);
		СтруктураДанныхДляПечати.Вставить("Маркировка"                    , Маркировка);
		СтруктураДанныхДляПечати.Вставить("МаркировкаДо"                  , МаркировкаДо);
		СтруктураДанныхДляПечати.Вставить("РезультатПоПоставщикам"        , РезультатПоПоставщикам);
		СтруктураДанныхДляПечати.Вставить("НомерСформированВСчетеФактуре" , Истина);
		СтруктураДанныхДляПечати.Вставить("Прослеживаемость"              , Прослеживаемость);
		СтруктураДанныхДляПечати.Вставить("ПрослеживаемыеКомплектующие"   , ПрослеживаемыеКомплектующие);
		
	Иначе
		РезультатПоКонтрагентам   = МассивРезультатов[КоличествоРезультатов - 9];
		РезультатПоШапке          = МассивРезультатов[КоличествоРезультатов - 8];
		РезультатПоИсходнымДанным = МассивРезультатов[КоличествоРезультатов - 7];
		РезультатПоТабличнойЧасти = МассивРезультатов[КоличествоРезультатов - 6];
		
		Маркировка                = МассивРезультатов[КоличествоРезультатов - 5].Выгрузить();
		Маркировка                = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимое(Маркировка);
		
		РезультатПоПоставщикам    = МассивРезультатов[КоличествоРезультатов - 4];
		
		Прослеживаемость = МассивРезультатов[КоличествоРезультатов - 2];
		ПрослеживаемыеКомплектующие = УчетПрослеживаемыхТоваровЛокализация.ПрослеживаемыеКомплектующиеДляПечатиДанных(
										МассивРезультатов[КоличествоРезультатов - 1]);
		
		СтруктураДанныхДляПечати = Новый Структура;
		СтруктураДанныхДляПечати.Вставить("РезультатПоШапке"              , РезультатПоШапке);
		СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти"     , РезультатПоТабличнойЧасти);
		СтруктураДанныхДляПечати.Вставить("РезультатПоИсходнымДанным"     , РезультатПоИсходнымДанным);
		СтруктураДанныхДляПечати.Вставить("РезультатПоКонтрагентам"       , РезультатПоКонтрагентам);
		СтруктураДанныхДляПечати.Вставить("Маркировка"                    , Маркировка);
		СтруктураДанныхДляПечати.Вставить("РезультатПоПоставщикам"        , РезультатПоПоставщикам);
		СтруктураДанныхДляПечати.Вставить("НомерСформированВСчетеФактуре" , Истина);
		СтруктураДанныхДляПечати.Вставить("Прослеживаемость"              , Прослеживаемость);
		СтруктураДанныхДляПечати.Вставить("ПрослеживаемыеКомплектующие"   , ПрослеживаемыеКомплектующие);
	
	КонецЕсли;
	
	Если ЗаполнятьПлатежноРасчетныеДокументы Тогда
		СтруктураДанныхДляПечати.Вставить("ПлатежноРасчетныеДокументы", ПлатежноРасчетныеДокументы);
	КонецЕсли;


	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Если ЕстьЭлектронноеАктирование Тогда	
		ЭлектронноеАктированиеЕИСУТ.ПоместитьРезультатВыполненияЗапросаВДанныеДляПечати(
			МассивРезультатов, СтруктураДанныхДляПечати, КоличествоРезультатов);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

&ИзменениеИКонтроль("ТекстЗапросаДанныхТабличнойЧастиДляПечатиСчетаФактуры")
Функция РСК_ТекстЗапросаДанныхТабличнойЧастиДляПечатиСчетаФактуры(ПараметрыПечати)
	
	ПечататьСчетаФактурыПолученные = ПараметрыПечати.Свойство("МассивСчетФактураПолученный");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетаФактурыОснования.Ссылка                                 КАК Ссылка,
	|	ВЫБОР КОГДА СчетаФактурыОснования.РеализацияЧерезКомиссионера
	|		ТОГДА СчетаФактурыОснования.ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОснование,
	|	АналитикиТаблицыТоваровСНомерамиСтрок.НомерСтрокиСФ          КАК НомерСтроки,
	|	АналитикиТаблицыТоваровСНомерамиСтрок.НомерСтрокиИсходногоСФ КАК НомерСтрокиИсходногоСФ,
	
	|	ТаблицаДокумента.Номенклатура                                КАК Номенклатура,
	|	ТаблицаДокумента.НоменклатураНаименование                    КАК НоменклатураНаименование,
	|	ТаблицаДокумента.НоменклатураКод                             КАК НоменклатураКод,
	|	ТаблицаДокумента.КодТНВЭД                                    КАК КодТНВЭД,
	|	ТаблицаДокумента.ЕдиницаИзмерения                            КАК ЕдиницаИзмерения,
	|	ДанныеЕдиницыИзмерения.Представление                         КАК ЕдиницаИзмеренияНаименование,
	|	ДанныеЕдиницыИзмерения.Код                                   КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.Упаковка                                    КАК Упаковка,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД          КАК ЕдиницаИзмеренияТНВЭД,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД.Представление КАК ЕдиницаИзмеренияТНВЭДНаименование,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД.Код      КАК ЕдиницаИзмеренияТНВЭДКод,
	|	ТаблицаДокумента.Характеристика                              КАК Характеристика,
	|	ТаблицаДокумента.НоменклатураПартнера          				 КАК НоменклатураПартнера,
	|	ЕСТЬNULL(ДанныеХарактеристики.НаименованиеПолное, """")      КАК ХарактеристикаНаименование,
	|	ТаблицаДокумента.Серия.Наименование                          КАК СерияНаименование,
	#Вставка
	//++ РС Консалт: Минаков А.С. Задача 20226
	|	ТаблицаДокумента.Серия                          			 КАК Серия,
	//++ РС Консалт: Минаков А.С. Задача 20226
	#КонецВставки
	|	ТаблицаДокумента.НомерГТД                                    КАК НомерГТДСсылка,
	|	ЕСТЬNULL(ТаблицаДокумента.НомерГТД.ТипНомераГТД, НЕОПРЕДЕЛЕНО) КАК ТипНомераГТД,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.НомерГТД.РегистрационныйНомер = """"
	|			ТОГДА ТаблицаДокумента.НомерГТД
	|		ИНАЧЕ ТаблицаДокумента.НомерГТД.РегистрационныйНомер
	|	КОНЕЦ                                                        КАК НомерГТД,
	|	ДанныеСтраныПросхождения.Ссылка                              КАК СтранаПроисхождения,
	|	ДанныеСтраныПросхождения.Код                                 КАК СтранаПроисхожденияКод,
	|	СУММА(ТаблицаДокумента.Количество)                           КАК Количество,
	|	СУММА(ТаблицаДокумента.КоличествоПоРНПТ)                     КАК КоличествоПоРНПТ,
	|	ВЫБОР КОГДА СУММА(ТаблицаДокумента.Количество) = 0 И ТаблицаДокумента.Цена = 0
	|		ТОГДА ТаблицаДокумента.ЦенаДо
	|		ИНАЧЕ ТаблицаДокумента.Цена
	|	КОНЕЦ КАК Цена,
	|	СУММА(ТаблицаДокумента.СуммаБезНДС)                          КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.СуммаНДС)                             КАК СуммаНДС,
	|	СУММА(ТаблицаДокумента.СуммаБезНДС
	|		+ ТаблицаДокумента.СуммаНДС)                             КАК СуммаСНДС,
	|	ТаблицаДокумента.СтавкаНДС                                   КАК СтавкаНДС,
	|
	|	СУММА(ТаблицаДокумента.КоличествоДо)                         КАК КоличествоДо,
	|	СУММА(ТаблицаДокумента.КоличествоПоРНПТДо)                   КАК КоличествоПоРНПТДо,
	|	СУММА(ТаблицаДокумента.КоличествоПоРНПТУвеличение)           КАК КоличествоПрослежУвеличение,
	|	СУММА(ТаблицаДокумента.КоличествоПоРНПТУменьшение)           КАК КоличествоПрослежУменьшение,
	|	ТаблицаДокумента.ЦенаДо                                      КАК ЦенаДо,
	|	СУММА(ТаблицаДокумента.СуммаБезНДСДо)                        КАК СуммаБезНДСДо,
	|	СУММА(ТаблицаДокумента.РазницаБезНДСУвеличение)              КАК РазницаБезНДСУвеличение,
	|	СУММА(ТаблицаДокумента.РазницаБезНДСУменьшение)              КАК РазницаБезНДСУменьшение,
	|	СУММА(ТаблицаДокумента.СуммаНДСДо)                           КАК СуммаНДСДо,
	|	СУММА(ТаблицаДокумента.РазницаНДСУвеличение)                 КАК РазницаНДСУвеличение,
	|	СУММА(ТаблицаДокумента.РазницаНДСУменьшение)                 КАК РазницаНДСУменьшение,
	|	СУММА(ТаблицаДокумента.СуммаБезНДСДо
	|		+ ТаблицаДокумента.СуммаНДСДо)                           КАК СуммаСНДСДо,
	|	СУММА(ТаблицаДокумента.РазницаСНДСУвеличение)                КАК РазницаСНДСУвеличение,
	|	СУММА(ТаблицаДокумента.РазницаСНДСУменьшение)                КАК РазницаСНДСУменьшение,
	|
	|	//ДанныеНаборов
	|
	|	ЛОЖЬ                                                         КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	ТаблицаТоваровДокументов КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаФактурыОснования КАК СчетаФактурыОснования
	|		ПО (ВЫБОР
	|				КОГДА СчетаФактурыОснования.ДокументОснование ССЫЛКА Документ.ОтчетКомитентуОЗакупках
	|					ТОГДА СчетаФактурыОснования.Ссылка = ТаблицаДокумента.СсылкаСФ
	|				КОГДА СчетаФактурыОснования.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионера
	|					ТОГДА СчетаФактурыОснования.ДокументОснование = ТаблицаДокумента.Ссылка
	|						И (ТаблицаДокумента.Покупатель, ТаблицаДокумента.НомерСчетаФактуры) В
	|							(ВЫБРАТЬ СчетаФактурыПокупатели.Покупатель,
	|									СчетаФактурыПокупатели.НомерСчетаФактуры
	|								ИЗ СчетаФактурыПокупатели КАК СчетаФактурыПокупатели
	|								ГДЕ
	|								СчетаФактурыПокупатели.Ссылка = СчетаФактурыОснования.Ссылка)
	|				ИНАЧЕ СчетаФактурыОснования.ДокументОснование = ТаблицаДокумента.Ссылка
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ДанныеЕдиницыИзмерения
	|		ПО ТаблицаДокумента.ЕдиницаИзмерения = ДанныеЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ДанныеХарактеристики
	|		ПО ТаблицаДокумента.Характеристика = ДанныеХарактеристики.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК ДанныеСтраныПросхождения
	|		ПО ТаблицаДокумента.НомерГТД.СтранаПроисхождения = ДанныеСтраныПросхождения.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикиТаблицыТоваровСНомерамиСтрок КАК АналитикиТаблицыТоваровСНомерамиСтрок
	|		ПО АналитикиТаблицыТоваровСНомерамиСтрок.СчетФактура = СчетаФактурыОснования.Ссылка
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.ДокументОснование = СчетаФактурыОснования.ДокументОснование
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.НомерСтрокиИсходногоСФ = ТаблицаДокумента.НомерСтрокиИсходногоСФ
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.Номенклатура = ТаблицаДокумента.Номенклатура
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.НоменклатураНаименование = ТаблицаДокумента.НоменклатураНаименование
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.КодТНВЭД = ТаблицаДокумента.КодТНВЭД
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.Характеристика = ТаблицаДокумента.Характеристика
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.Серия = ТаблицаДокумента.Серия
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.НомерГТД = ТаблицаДокумента.НомерГТД
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.Цена = ТаблицаДокумента.Цена
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.СтавкаНДС = ТаблицаДокумента.СтавкаНДС
	|		И АналитикиТаблицыТоваровСНомерамиСтрок.ЦенаДо = ТаблицаДокумента.ЦенаДо
	|		//СоединениеНаборов
	
	|ГДЕ
	|	НЕ ТаблицаДокумента.ЭтоВозвратнаяТара
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактурыОснования.Ссылка,
	|	ВЫБОР КОГДА СчетаФактурыОснования.РеализацияЧерезКомиссионера
	|		ТОГДА СчетаФактурыОснования.ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	АналитикиТаблицыТоваровСНомерамиСтрок.НомерСтрокиСФ,
	|	АналитикиТаблицыТоваровСНомерамиСтрок.НомерСтрокиИсходногоСФ,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.НоменклатураНаименование,
	|	ТаблицаДокумента.НоменклатураКод,
	|	ТаблицаДокумента.КодТНВЭД,
	|	ТаблицаДокумента.ЕдиницаИзмерения,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД.Представление,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД.Код,
	|	ДанныеЕдиницыИзмерения.Представление,
	|	ДанныеЕдиницыИзмерения.Код,
	|	ТаблицаДокумента.Упаковка,
	|	ТаблицаДокумента.Характеристика,
	|	ТаблицаДокумента.НоменклатураПартнера,	
	|	ДанныеХарактеристики.НаименованиеПолное,
	|	ТаблицаДокумента.Серия.Наименование,
	#Вставка
	//++ РС Консалт: Минаков А.С. Задача 20226
	|	ТаблицаДокумента.Серия,
	//++ РС Консалт: Минаков А.С. Задача 20226
	#КонецВставки
	|	ТаблицаДокумента.НомерГТД,
	|	ЕСТЬNULL(ТаблицаДокумента.НомерГТД.ТипНомераГТД, НЕОПРЕДЕЛЕНО),
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.НомерГТД.РегистрационныйНомер = """"
	|			ТОГДА ТаблицаДокумента.НомерГТД
	|		ИНАЧЕ ТаблицаДокумента.НомерГТД.РегистрационныйНомер
	|	КОНЕЦ,
	|	ДанныеСтраныПросхождения.Ссылка,
	|	ТаблицаДокумента.Цена,
	|	ТаблицаДокумента.ЦенаДо,
	|	ТаблицаДокумента.НомерГТД,
	|	ЕСТЬNULL(ТаблицаДокумента.НомерГТД.ТипНомераГТД, НЕОПРЕДЕЛЕНО),
	|	//ГруппировкаНаборов
	|	ТаблицаДокумента.СтавкаНДС";
	
	Если ПараметрыПечати.ВыводитьНаборы Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДанныеНаборов",
		"МИНИМУМ(ТаблицаДокумента.НомерСтрокиНаборы)                     КАК НомерСтрокиНаборы,
		|	ТаблицаДокумента.ВариантПредставленияНабораВПечатныхФормах   КАК ВариантПредставленияНабораВПечатныхФормах,
		|	ТаблицаДокумента.ВариантРасчетаЦеныНабора                    КАК ВариантРасчетаЦеныНабора,
		|	ТаблицаДокумента.НоменклатураНабора                          КАК НоменклатураНабора,
		|	ТаблицаДокумента.ХарактеристикаНабора                        КАК ХарактеристикаНабора,
		|	ТаблицаДокумента.ЭтоКомплектующие                            КАК ЭтоКомплектующие,
		|	ТаблицаДокумента.ЭтоНабор                                    КАК ЭтоНабор,
		|	ТаблицаДокумента.ПолныйНабор                                 КАК ПолныйНабор,");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ГруппировкаНаборов",
		"ТаблицаДокумента.ВариантПредставленияНабораВПечатныхФормах,
		|	ТаблицаДокумента.ВариантРасчетаЦеныНабора,
		|	ТаблицаДокумента.НоменклатураНабора,
		|	ТаблицаДокумента.ХарактеристикаНабора,
		|	ТаблицаДокумента.ЭтоКомплектующие,
		|	ТаблицаДокумента.ЭтоНабор,
		|	ТаблицаДокумента.ПолныйНабор,");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СоединениеНаборов",
		"И АналитикиТаблицыТоваровСНомерамиСтрок.ВариантПредставленияНабораВПечатныхФормах = ТаблицаДокумента.ВариантПредставленияНабораВПечатныхФормах
		|	И АналитикиТаблицыТоваровСНомерамиСтрок.ВариантРасчетаЦеныНабора = ТаблицаДокумента.ВариантРасчетаЦеныНабора
		|	И АналитикиТаблицыТоваровСНомерамиСтрок.НоменклатураНабора = ТаблицаДокумента.НоменклатураНабора
		|	И АналитикиТаблицыТоваровСНомерамиСтрок.ХарактеристикаНабора = ТаблицаДокумента.ХарактеристикаНабора
		|	И АналитикиТаблицыТоваровСНомерамиСтрок.ЭтоКомплектующие = ТаблицаДокумента.ЭтоКомплектующие
		|	И АналитикиТаблицыТоваровСНомерамиСтрок.ЭтоНабор = ТаблицаДокумента.ЭтоНабор
		|	И АналитикиТаблицыТоваровСНомерамиСтрок.ПолныйНабор = ТаблицаДокумента.ПолныйНабор");
		
	КонецЕсли;
	
	Если ПечататьСчетаФактурыПолученные Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" +
		СтрЗаменить(ТекстЗапроса, "СчетаФактурыОснования", "СчетаФактурыПолученныеОснования");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СчетаФактурыПолученныеОснования.РеализацияЧерезКомиссионера", "ЛОЖЬ");
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ДокументОснование,
	|	//ПорядокНаборов
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;";
	
	Если ПараметрыПечати.ВыводитьНаборы Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПорядокНаборов",
			"НомерСтрокиНаборы,
			|	НоменклатураНабора,
			|	ХарактеристикаНабора,
			|	ЭтоНабор УБЫВ,");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

 