
Процедура ЗаполнитьДокументНаОснованииОтчетПоВыдаче(ОтчетПоВыдаче)
	//++ РС Консалт: Трофимов Евгений 05.07.2022 Задача 18491
	//e1cib/data/Документ.Задание?ref=a39436b5a376516f404742bbfaaabc84
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	СтруктураЗаполненияЦены.Вставить("НалогообложениеНДС", НалогообложениеНДС);
	СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДатаСеанса());
	СтруктураЗаполненияЦены.Вставить("Организация", Организация);
	
	РСК_ДокументОснованиеОтчетПоВыдаче = ОтчетПоВыдаче;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.КодСтроки КАК КодСтроки,
		|	ЗаказКлиентаТовары.НоменклатураПартнера КАК ТСР,
		|	ЗаказКлиентаТовары.Цена КАК Цена
		|ИЗ
		|	Документ.РСК_ОтчетПоВыдачеТСР КАК РСК_ОтчетПоВыдачеТСР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ПО РСК_ОтчетПоВыдачеТСР.Контракт = ЗаказКлиентаТовары.Ссылка
		|ГДЕ
		|	РСК_ОтчетПоВыдачеТСР.Ссылка = &ОтчетПоВыдаче
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РСК_ОтчетПоВыдачеТСРРеестр.ТСР КАК ТСР,
		|	СУММА(РСК_ОтчетПоВыдачеТСРРеестр.Количество) КАК Количество,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Цена КАК Цена,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Номенклатура КАК Номенклатура,
		|	РСК_ОтчетПоВыдачеТСРРеестр.ХарактеристикаНоменклатуры КАК Характеристика,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Акт.РСК_Серия КАК Серия,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Акт.Склад КАК Склад
		|ИЗ
		|	Документ.РСК_ОтчетПоВыдачеТСР.Реестр КАК РСК_ОтчетПоВыдачеТСРРеестр
		|ГДЕ
		|	РСК_ОтчетПоВыдачеТСРРеестр.Ссылка = &ОтчетПоВыдаче
		|
		|СГРУППИРОВАТЬ ПО
		|	РСК_ОтчетПоВыдачеТСРРеестр.ТСР,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Цена,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Номенклатура,
		|	РСК_ОтчетПоВыдачеТСРРеестр.ХарактеристикаНоменклатуры,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Акт.РСК_Серия,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Акт.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	докЗаказКлиента.Контрагент КАК Контрагент,
		|	докЗаказКлиента.Организация КАК Организация,
		|	докЗаказКлиента.Партнер КАК Партнер,
		|	докЗаказКлиента.Соглашение КАК Соглашение,
		|	РСК_ОтчетПоВыдачеТСР.Контракт КАК ЗаказКлиента,
		|	докЗаказКлиента.реа_ТерриториальнаяГруппа.РСК_СкладВыдачиТСР КАК СкладОтгрузки
		|ИЗ
		|	Документ.РСК_ОтчетПоВыдачеТСР КАК РСК_ОтчетПоВыдачеТСР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК докЗаказКлиента
		|		ПО РСК_ОтчетПоВыдачеТСР.Контракт = докЗаказКлиента.Ссылка
		|ГДЕ
		|	РСК_ОтчетПоВыдачеТСР.Ссылка = &ОтчетПоВыдаче
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РСК_ОтчетПоВыдачеТСРРеестр.Акт) КАК Акт,
		|	РСК_ОтчетПоВыдачеТСРРеестр.ТСР КАК ТСР,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Цена КАК Цена
		|ИЗ
		|	Документ.РСК_ОтчетПоВыдачеТСР.Реестр КАК РСК_ОтчетПоВыдачеТСРРеестр
		|ГДЕ
		|	РСК_ОтчетПоВыдачеТСРРеестр.Ссылка = &ОтчетПоВыдаче
		|
		|СГРУППИРОВАТЬ ПО
		|	РСК_ОтчетПоВыдачеТСРРеестр.ТСР,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Цена";
	Запрос.УстановитьПараметр("ОтчетПоВыдаче", ОтчетПоВыдаче);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	тзСвязиТСР = РезультатыЗапроса[0].Выгрузить();
	ВыборкаТоварыОтчета = РезультатыЗапроса[1].Выбрать();
	Шапка = РезультатыЗапроса[2].Выбрать();
	тзАкты = РезультатыЗапроса[3].Выгрузить();
	Если Шапка.Следующий() Тогда
		ПараметрыОформления = Новый Структура("ИспользоватьСкладОтгрузки");
		ПараметрыОформления.Вставить("ВводитьНаОснованииНепроведенного", Ложь);
		ПараметрыОформления.Вставить("ПоЗаказам", Истина);
		ПараметрыОформления.Вставить("ПоОрдерам", Ложь);
		ЗаполнитьДокументНаОснованииЗаказаКлиента(Шапка.ЗаказКлиента,Шапка.СкладОтгрузки, Неопределено,,ПараметрыОформления);	
	КонецЕсли;
	Дата = ТекущаяДатаСеанса();
	тзТоварыРеализации = Товары.Выгрузить();
	Если тзТоварыРеализации.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("Нет товаров на складе "+Склад+" готовых к отгрузке!");
		Возврат;
	КонецЕсли;
	Товары.Очистить();
	
	Пока ВыборкаТоварыОтчета.Следующий() Цикл
		//Склад = ВыборкаТоварыОтчета.Склад;
		Требуется = ВыборкаТоварыОтчета.Количество;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ТСР", ВыборкаТоварыОтчета.ТСР);
		Отбор.Вставить("Цена",ВыборкаТоварыОтчета.Цена);
		НайденныеСоответствия = тзСвязиТСР.НайтиСтроки(Отбор);
		//не сделал в запросе так как теоретически в 1 заказе может быть две строки с одинаковыми ТСР и ценой
		Для Каждого Стр Из НайденныеСоответствия Цикл
			//в реализации может быть несколько строк, привязанных к одной строке заказа
			НайденныеСтрокиРеализации = тзТоварыРеализации.НайтиСтроки(Новый Структура("КодСтроки", Стр.КодСтроки));
			Для Каждого СтрокаРеализации Из НайденныеСтрокиРеализации Цикл
				
				Если Требуется <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				МожноСписать = Мин(Требуется, СтрокаРеализации.Количество);
				Если МожноСписать <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НС = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаРеализации);
				НС.Склад = ВыборкаТоварыОтчета.Склад;
				//НС.Серия = ВыборкаТоварыОтчета.Серия;
				НС.Количество = МожноСписать;
				НС.КоличествоУпаковок = МожноСписать;
				Требуется = Требуется - МожноСписать;
				СтрокаРеализации.Количество = СтрокаРеализации.Количество - МожноСписать;
				
				СтруктураДействий = Новый Структура();
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураЗаполненияЦены);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураЗаполненияЦены);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НС, СтруктураДействий, Неопределено);
			КонецЦикла;
		КонецЦикла;
		
		Если Требуется > 0 Тогда
			СтрокиАктов = тзАкты.НайтиСтроки(Новый Структура("ТСР,Цена",ВыборкаТоварыОтчета.ТСР,ВыборкаТоварыОтчета.Цена));
			СсылкаНаАкт = Неопределено;
			Если СтрокиАктов.Количество() > 0 Тогда
				СсылкаНаАкт = СтрокиАктов[0].Акт;
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(
				"В заказе клинта не обеспечена к отгрузке ТСР " + ВыборкаТоварыОтчета.ТСР + " с ценой " + ВыборкаТоварыОтчета.Цена + " в количестве " + Требуется + " шт.", 
				СсылкаНаАкт
			);
			НС = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ВыборкаТоварыОтчета); //Номенклатура,Характеристика,Серия,Цена 
			НС.Количество = Требуется;
			НС.КоличествоУпаковок = Требуется;
			НС.ЗаказКлиента = ЗаказКлиента;
			НС.Склад = ВыборкаТоварыОтчета.Склад;
			НС.Серия = ВыборкаТоварыОтчета.Серия;
			СтруктураДействий = Новый Структура();
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", СтруктураЗаполненияЦены);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураЗаполненияЦены);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураЗаполненияЦены);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НС, СтруктураДействий, Неопределено);
			НС.СуммаВзаиморасчетов = НС.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыУказанияСерий  = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	//НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий, Ложь);
	
//-- КонецЗадачи 18491	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаЗаполнения")
Процедура РСК_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Перем СкладОтгрузки;
	Перем РеквизитыШапки;
	Перем ВариантОформления;
	Перем ПараметрыОформления;

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	ЗаполненНаОснованииДокумента = Ложь;

	Если ТипДанныхЗаполнения = Тип("Структура") Тогда

		// Заполнение из формы списка распоряжений.
		Если ДанныеЗаполнения.Свойство("ДокументОснование")
			И (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") 
			Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
			Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив")) Тогда

			// Если передан склад - необходимо заполнять товары только по указанном складу.
			ДанныеЗаполнения.Свойство("СкладОтгрузки", СкладОтгрузки);
			ДанныеЗаполнения.Свойство("РеквизитыШапки", РеквизитыШапки);
			ДанныеЗаполнения.Свойство("ВариантОформленияПродажи", ВариантОформления);
			ДанныеЗаполнения.Свойство("ПараметрыОформления", ПараметрыОформления);
			#Вставка
			//++РС Консалт Назаров М.Ю. 21 ноября 2022 г. 10:23:48      
			// заполнение менеджера от Заказа клиента
			Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
				МенеджерЗаказа = ДанныеЗаполнения.ДокументОснование.Менеджер;
				Менеджер = МенеджерЗаказа;
			КонецЕсли;
			//--РС Консалт Назаров М.Ю. 21 ноября 2022 г. 10:23:48
			
			//++РС Консалт Назаров М.Ю. 27 июля 2022 г. 15:00:40  
			// Создание реализации через комиссионера
			Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") 
				И ДанныеЗаполнения.ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера Тогда 
				
				ДанныеЗаполнения = ОформитьРеализациюТоваровУслугПоТаблице(ДанныеЗаполнения.ДокументОснование);
				
				ЗаполнитьДаннымиПоПереданнымНаКомиссиюТоварам(ДанныеЗаполнения.Параметры.Основание);
				ЗаполненНаОснованииДокумента = Истина;
			Иначе 
				//--РС Консалт Назаров М.Ю. 27 июля 2022 г. 15:00:40
				#КонецВставки
				
				ЗаполнитьДокументНаОснованииЗаказаКлиента(ДанныеЗаполнения.ДокументОснование,
				СкладОтгрузки, ВариантОформления, РеквизитыШапки, ПараметрыОформления);
				
				ЗаполненНаОснованииДокумента = Ложь;
				#Вставка
				//++РС Консалт Назаров М.Ю. 27 июля 2022 г. 15:02:54                  
			КонецЕсли;			
			//--РС Консалт Назаров М.Ю. 27 июля 2022 г. 15:02:54
			#КонецВставки

		ИначеЕсли ДанныеЗаполнения.Свойство("АктОРасхождениях") 
			И ДанныеЗаполнения.Свойство("ОснованиеАкта") Тогда

			Если ТипЗнч(ДанныеЗаполнения.ОснованиеАкта) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ЗаполнитьДокументНаОснованииАктаОРасхожденияхПослеОтгрузки(ДанныеЗаполнения);
				ЗаполненНаОснованииДокумента = Истина;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОснованиеАкта) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
				ЗаполнитьДокументНаОснованииАктаОРасхожденияхПослеПриемки(ДанныеЗаполнения);
				ЗаполненНаОснованииДокумента = Истина;
			КонецЕсли;

		ИначеЕсли ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
			И ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера Тогда

			ЗаполнитьДаннымиПоПереданнымНаКомиссиюТоварам(ДанныеЗаполнения);
			Если ЗначениеЗаполнено(Договор) Тогда
				ЗаполненНаОснованииДокумента = Истина;
			Иначе
				ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;

		Иначе

			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);

		КонецЕсли;

	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда

		ЗаполнитьДокументНаОснованииСделкиПоПродаже(ДанныеЗаполнения);

	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказКлиента") Или
		ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда

		ЗаполнитьДокументНаОснованииЗаказаКлиента(ДанныеЗаполнения, СкладОтгрузки, ВариантОформления);
		ЗаполненНаОснованииДокумента = Истина;

	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда

		ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(ДанныеЗаполнения);

	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда

		ЗаполнитьДокументНаОснованииВозвратаТоваровОтКлиента(ДанныеЗаполнения);
		ЗаполненНаОснованииДокумента = Истина;

	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда

		ЗаполнитьДокументНаОснованииПриобретенияТоваровУслуг(ДанныеЗаполнения);
		ЗаполненНаОснованииДокумента = Истина;
	#Вставка
	//++ РС Консалт: Трофимов Евгений 15.11.2022 Тикет 21906
	//e1cib/data/Документ.Задание?ref=9acaa7c743adc43941cf20251a08f986
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РСК_ОтчетПоВыдачеТСР") Тогда
		ЗаполнитьДокументНаОснованииОтчетПоВыдаче(ДанныеЗаполнения);
		ЗаполненНаОснованииДокумента = Истина;	
	//-- КонецТикета 21906	
	#КонецВставки
	КонецЕсли;

	Если Не ЗаполненНаОснованииДокумента Тогда
		ИнициализироватьУсловияПродаж();
	КонецЕсли;

	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь", Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);

	Автор = Пользователи.ТекущийПользователь();
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ЭтотОбъект, Ложь);
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);

	РеализацияТоваровУслугЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

	ИнициализироватьДокумент(ДанныеЗаполнения);

	ЕстьКорректировки = Ложь;
	ПродажиСервер.ПроверитьНаличиеКорректировок(Ссылка, Ссылка, ЕстьКорректировки);
	ВзаиморасчетыСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);

	Если РеализацияПоЗаказам И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным
		Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным)
		Или (Не РеализацияПоЗаказам И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов) Тогда

		Если ЗначениеЗаполнено(Соглашение) Тогда
			РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение,"ИспользуютсяДоговорыКонтрагентов,ГруппаФинансовогоУчета");
			Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов 
				И ЗначениеЗаполнено(Договор) Тогда
				ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ГруппаФинансовогоУчета");
			Иначе
				ГруппаФинансовогоУчета = РеквизитыСоглашения.ГруппаФинансовогоУчета;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
			ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ГруппаФинансовогоУчета");
		КонецЕсли;

	КонецЕсли;

	Если Не КомиссионнаяТорговляСервер.РеализацияЧерезКомиссионера(ХозяйственнаяОперация) Тогда
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, Товары, Ложь);
	КонецЕсли;

КонецПроцедуры

// Перенесено из Обработка.ЖурналДокументовОтчетыКомиссионеров
// Типовой способ создания реализации через комиссионера
Функция ОформитьРеализациюТоваровУслугПоТаблице(Объект)
	
	РазбивкаПоДокументам = Новый ТаблицаЗначений;
	РазбивкаПоДокументам.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РазбивкаПоДокументам.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	РазбивкаПоДокументам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	РазбивкаПоДокументам.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры")); 
	
	НоваяСтрока = РазбивкаПоДокументам.Добавить();
	НоваяСтрока.Организация = Объект.Организация;
	НоваяСтрока.Договор = Объект.Договор.ДоговорСКомиссионером;
	НоваяСтрока.Партнер = Объект.Договор.КомиссионерПартнер;
	НоваяСтрока.Контрагент = Объект.Договор.КомиссионерКонтрагент;
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ПерваяСтрока = РазбивкаПоДокументам[0];
	
	МетаданныеРеализацияТоваровУслуг = Метаданные.Документы.РеализацияТоваровУслуг;
	ИмяРеализацияТоваровУслуг        = МетаданныеРеализацияТоваровУслуг.Имя;
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();

	СтруктураПоиска = ПродажиСервер.СтруктураЗначащихРеквизитов();
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПерваяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Истина);
	ДополнительныеПараметры.Вставить("ПустаяСсылкаДокумента", Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("ХозяйственныеОперации", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	ДополнительныеПараметры.Вставить("КомиссионныеПродажи25", Истина);
	
	УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
		СтруктураПоиска.Партнер, ДополнительныеПараметры);
	
	Если Не УсловияПродажПоУмолчанию = Неопределено
		И УсловияПродажПоУмолчанию.Свойство("Соглашение") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, УсловияПродажПоУмолчанию, 
			"Соглашение");
	КонецЕсли;
	
	РеквизитыШапки = Новый Структура();
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, СтруктураПоиска, Истина);
	
	РеквизитыШапки.Вставить("КлиентПартнер", Объект.Партнер);
	РеквизитыШапки.Вставить("КлиентКонтрагент", Объект.Контрагент);
	РеквизитыШапки.Вставить("КлиентДоговор", Объект.Договор);
	РеквизитыШапки.Вставить("РСК_ЗаказКлиента", Объект.Ссылка);
	
	ПараметрыФормы.Вставить("РеквизитыШапки",    РеквизитыШапки);
	ПараметрыФормы.Вставить("ЗаполнятьПоДаннымКОформлению", Истина);
	ПараметрыФормы.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера);
	
	НастройкиФормы.Вставить("ИмяФормы", "Документ." + ИмяРеализацияТоваровУслуг + ".Форма.ФормаДокумента");
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеРеализацияТоваровУслуг.Имя + ".ПустаяСсылка"));
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	
	Возврат НастройкиФормы;
	
КонецФункции

&После("ЗаполнитьДаннымиПоПереданнымНаКомиссиюТоварам")
Процедура РСК_ЗаполнитьДаннымиПоПереданнымНаКомиссиюТоварам(Знач ДанныеЗаполнения)
	
	//++РС Консалт Назаров М.Ю. 27 июля 2022 г. 15:41:09                  
	Если ДанныеЗаполнения.РеквизитыШапки.Свойство("РСК_ЗаказКлиента") 
		И ДанныеЗаполнения.РеквизитыШапки.РСК_ЗаказКлиента <> Неопределено Тогда  
		
		Для Каждого Строка Из ЭтотОбъект.Товары Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", Строка.Номенклатура);
			
			НайденныеСтроки = ДанныеЗаполнения.РеквизитыШапки.РСК_ЗаказКлиента.Товары.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Строка.Цена = НайденныеСтроки[0].Цена;
			
		КонецЦикла; 
		
	КонецЕсли;
	//--РС Консалт Назаров М.Ю. 27 июля 2022 г. 15:41:09
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура РСК_ОбработкаПроведения(Отказ, РежимПроведения)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыРегистрации = Документы.РеализацияТоваровУслуг.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	
	СчетаФактурыВыданныеНаОсновании = УчетНДСУП.СчетаФактурыВыданныеНаОсновании(ПараметрыРегистрации);
	
	ИмяДокумента = УчетНДСУП.ПолноеИмяСчетФактурыВыданный();
	
	Если СчетаФактурыВыданныеНаОсновании.ДокументПоОснованиюТребуется
		И Не СчетаФактурыВыданныеНаОсновании.СчетаФактуры.Количество()
		И ЗначениеЗаполнено(ИмяДокумента) Тогда
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяДокумента);
		
		ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
		
		ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных();
		ПараметрыРегистрации.Ссылка = Ссылка;
		ПараметрыРегистрации.Дата = Дата;
		ПараметрыРегистрации.Организация = Организация;
		ПараметрыРегистрации.Контрагент = Контрагент;
		ПараметрыРегистрации.НалогообложениеНДС = НалогообложениеНДС;
		ПараметрыРегистрации.РеализацияТоваров = Истина;
		ПараметрыРегистрации.РеализацияРаботУслуг = Истина;
		
		УчетНДСУП.ЗаполнитьСчетФактураВыданный(ДокументОбъект, ПараметрыРегистрации)
	КонецЕсли
	//++ РС Консалт: Минаков А.С. Задача 20226

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьДокументНаОснованииЗаказаКлиента")
Процедура РСК_ЗаполнитьДокументНаОснованииЗаказаКлиента(Знач ДокументОснование, Знач СкладОтгрузки, ВариантОформления, РеквизитыЗаказа, ПараметрыОформления)
	ТипОснования = ТипЗнч(ДокументОснование);
	ЗаполнятьПоОстаткам = Ложь;

	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");

	ВводитьНаОснованииНепроведенного = Ложь;
	Если Не ПараметрыОформления = Неопределено И ТипЗнч(ПараметрыОформления) = Тип("Структура") Тогда
		ПараметрыОформления.Свойство("ВводитьНаОснованииНепроведенного", ВводитьНаОснованииНепроведенного);
		ВводитьНаОснованииНепроведенного = ?(ВводитьНаОснованииНепроведенного = Неопределено, Ложь, ВводитьНаОснованииНепроведенного)
	КонецЕсли;

	Если ТипОснования = Тип("ДокументСсылка.ЗаказКлиента") Тогда

		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка                КАК ЗаказКлиента,
		|	ЗаказКлиента.Партнер               КАК Партнер,
		|	ЗаказКлиента.Контрагент            КАК Контрагент,
		|	ЗаказКлиента.КонтактноеЛицо        КАК КонтактноеЛицо,
		|	ЗаказКлиента.Договор               КАК Договор,
		|	ЗаказКлиента.Организация           КАК Организация,
		|	ЗаказКлиента.ФормаОплаты           КАК ФормаОплаты,
		|	ЗаказКлиента.Соглашение            КАК Соглашение,
		|	ЗаказКлиента.КартаЛояльности       КАК КартаЛояльности,
		|	ЗаказКлиента.Сделка                КАК Сделка,
		|	ЗаказКлиента.Валюта                КАК Валюта,
		|	ЗаказКлиента.Валюта                КАК ВалютаВзаиморасчетов,
		|	ЗаказКлиента.ГрафикОплаты          КАК ГрафикОплаты,
		|	ЗаказКлиента.Подразделение         КАК Подразделение,
		|	ЗаказКлиента.ДатаОтгрузки          КАК ДатаОтгрузки,
		|	ВЫБОР
		|		КОГДА
		|			ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ
		|			ЗаказКлиента.Склад
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР
		|		КОГДА
		|			ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|	ЗаказКлиента.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
		|	ВЫБОР 
		|		КОГДА
		|			ЗаказКлиента.НалогообложениеНДС В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров))
		|		ТОГДА 
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
		|		ИНАЧЕ 
		|			ЗаказКлиента.НалогообложениеНДС
		|	КОНЕЦ КАК НалогообложениеНДС,
		|	ЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ЗаказКлиента.НеОтгружатьЧастями    КАК НеОтгружатьЧастями,
		|	ЗаказКлиента.АдресДоставки         КАК АдресДоставки,
		|	ЗаказКлиента.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке   КАК ОрдернаяСхемаПриОтгрузке,
		|
		|	ЗаказКлиента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ЗаказКлиента.Статус                КАК СтатусДокумента,
		|	НЕ ЗаказКлиента.Проведен
		|		И НЕ &ВводитьНаОснованииНепроведенного КАК ЕстьОшибкиПроведен,
		|	ИСТИНА                             КАК ЕстьОшибкиСтатус,
		|
		|	ЗаказКлиента.БанковскийСчет                 КАК БанковскийСчетОрганизации,
		|	ЗаказКлиента.БанковскийСчетКонтрагента      КАК БанковскийСчетКонтрагента,
		|	ЗаказКлиента.Грузоотправитель               КАК Грузоотправитель,
		|	ЗаказКлиента.Грузополучатель                КАК Грузополучатель,
		|	ЗаказКлиента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	ЗаказКлиента.БанковскийСчетГрузополучателя  КАК БанковскийСчетГрузополучателя,
		|	ЗаказКлиента.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
		|	ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ЗаказКлиента.ТребуетсяЗалогЗаТару           КАК ТребуетсяЗалогЗаТару,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСоглашенияСКлиентами 
		|			ТОГДА ЗаказКлиента.Соглашение.КалендарьВозвратаТары
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|	КОНЕЦ                                       КАК КалендарьВозвратаТары,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСоглашенияСКлиентами 
		|			ТОГДА ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                       КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|
		|	ЗаказКлиента.СкидкиНаценки.(
		|		КлючСвязи,
		|		СкидкаНаценка,
		|		Сумма
		|	) КАК СкидкиНаценки,
		|	ЗаказКлиента.АдресДоставкиЗначенияПолей     КАК АдресДоставкиЗначенияПолей,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		#Удаление
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|		И ЗаказКлиента.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ))
		#КонецВставки
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.СпособДоставки
		|	КОНЕЦ                                       КАК СпособДоставки,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		#Удаление
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|		И ЗаказКлиента.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ))
		#КонецВставки
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ЗонаДоставки
		|	КОНЕЦ                                       КАК ЗонаДоставки,
		|
		#Удаление
		|	ВЫБОР КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|	ВЫБОР КОГДА ЗаказКлиента.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ))
		#КонецВставки
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ПеревозчикПартнер
		|	КОНЕЦ                                       КАК ПеревозчикПартнер,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		#Удаление
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|		И ЗаказКлиента.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ))
		#КонецВставки
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ВремяДоставкиС
		|	КОНЕЦ                                       КАК ВремяДоставкиС,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		#Удаление
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|		И ЗаказКлиента.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ))
		#КонецВставки
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ВремяДоставкиПо
		|	КОНЕЦ                                       КАК ВремяДоставкиПо,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		#Удаление
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|		И ЗаказКлиента.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ))
		#КонецВставки
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ДополнительнаяИнформацияПоДоставке
		|	КОНЕЦ                                       КАК ДополнительнаяИнформацияПоДоставке,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		#Удаление
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|		И ЗаказКлиента.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ))
		#КонецВставки
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ОсобыеУсловияПеревозки
		|	КОНЕЦ                                       КАК ОсобыеУсловияПеревозки,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		#Удаление
		|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|		И ЗаказКлиента.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ))
		#КонецВставки
		|		ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента ТОГДА
		|		ЗаказКлиента.ОсобыеУсловияПеревозкиОписание
		|	КОНЕЦ                                       КАК ОсобыеУсловияПеревозкиОписание,
		|
		|	ЗаказКлиента.ЭтапГосконтрактаЕИС            КАК ЭтапГосконтрактаЕИС,
		|	ЗаказКлиента.ПорядокРасчетов                КАК ПорядокРасчетов,
		|	ЗаказКлиента.НаправлениеДеятельности        КАК НаправлениеДеятельности,
		|	ЗаказКлиента.ОплатаВВалюте                  КАК ОплатаВВалюте
		|
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаказКлиента
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыОстатки.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(
		|		,
		|		ЗаказКлиента = &ЗаказКлиента
		|) КАК ЗаказыОстатки
		|");

		Запрос.УстановитьПараметр("ЗаказКлиента", ДокументОснование);
		Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
		Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
		Запрос.УстановитьПараметр("ВводитьНаОснованииНепроведенного", ВводитьНаОснованииНепроведенного);

		РезультатЗапроса = Запрос.ВыполнитьПакет();

		РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
		РеквизитыЗаказа.Следующий();

		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииПоОперации(ДокументОснование,
		"РеализацияТоваровУслуг",
		РеквизитыЗаказа.ХозяйственнаяОперация,
		ВариантОформления);

		Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыЗаказа.ЗаказКлиента,
		РеквизитыЗаказа.СтатусДокумента,
		РеквизитыЗаказа.ЕстьОшибкиПроведен);

		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		#Вставка
		//++ РС Консалт: Трофимов Евгений 07.02.2023 Тикет 23696
		//e1cib/data/Документ.Задание?ref=839a72ccbc41c5584759b4b724f8b01a
		Если Не ПараметрыОформления = Неопределено И ТипЗнч(ПараметрыОформления) = Тип("Структура") Тогда
			Если ПараметрыОформления.Свойство("ИспользоватьСкладОтгрузки") Тогда
				Склад = СкладОтгрузки;
			КонецЕсли;
		КонецЕсли;
		//-- КонецТикета 23696		
		#КонецВставки
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			Если НЕ ЗначениеЗаполнено(Дата) Тогда
				Дата = ТекущаяДатаСеанса();
			КонецЕсли;
		КонецЕсли;
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
		ЭтотОбъект,
		РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
		РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю,
		РеквизитыЗаказа.КалендарьВозвратаТары);

		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
		КонецЕсли;

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаНаВозврат.Ссылка                КАК ЗаказКлиента,
		|	ЗаявкаНаВозврат.Партнер               КАК Партнер,
		|	ЗаявкаНаВозврат.Контрагент            КАК Контрагент,
		|	ЗаявкаНаВозврат.КонтактноеЛицо        КАК КонтактноеЛицо,
		|	ЗаявкаНаВозврат.Договор               КАК Договор,
		|	ЗаявкаНаВозврат.Организация           КАК Организация,
		|	ЗаявкаНаВозврат.ФормаОплаты           КАК ФормаОплаты,
		|	ЗаявкаНаВозврат.Соглашение            КАК Соглашение,
		|	ЗаявкаНаВозврат.Сделка                КАК Сделка,
		|	ЗаявкаНаВозврат.Валюта                КАК Валюта,
		|	ЗаявкаНаВозврат.Валюта                КАК ВалютаВзаиморасчетов,
		|	ЗаявкаНаВозврат.ГрафикОплаты          КАК ГрафикОплаты,
		|	ЗаявкаНаВозврат.ДатаОтгрузки          КАК ДатаОтгрузки,
		|	ВЫБОР КОГДА ЗаявкаНаВозврат.Склад.ЭтоГруппа 
		|		И ЗаявкаНаВозврат.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ ЗаявкаНаВозврат.Склад
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР КОГДА ЗаявкаНаВозврат.Склад.ЭтоГруппа
		|		И ЗаявкаНаВозврат.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|	ЗаявкаНаВозврат.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
		|	ЗаявкаНаВозврат.НалогообложениеНДС    КАК НалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|				ИЛИ ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|		КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|	КОНЕЦ КАК ХозяйственнаяОперация,
		|	ЗаявкаНаВозврат.НеОтгружатьЧастями    КАК НеОтгружатьЧастями,
		|	ЗаявкаНаВозврат.АдресДоставки         КАК АдресДоставки,
		|	ЗаявкаНаВозврат.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ОрдернаяСхемаПриОтгрузке,
		|	ЗаявкаНаВозврат.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
		|	ЗаявкаНаВозврат.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ЗаявкаНаВозврат.ТребуетсяЗалогЗаТару           КАК ТребуетсяЗалогЗаТару,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСоглашенияСКлиентами 
		|			ТОГДА ЗаявкаНаВозврат.Соглашение.КалендарьВозвратаТары
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|	КОНЕЦ КАК КалендарьВозвратаТары,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСоглашенияСКлиентами 
		|			ТОГДА ЗаявкаНаВозврат.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ЗаявкаНаВозврат.Статус               КАК СтатусДокумента,
		|	НЕ ЗаявкаНаВозврат.Проведен          КАК ЕстьОшибкиПроведен,
		|
		|	ЗаявкаНаВозврат.БанковскийСчет                 КАК БанковскийСчетОрганизации,
		|	ЗаявкаНаВозврат.БанковскийСчетКонтрагента      КАК БанковскийСчетКонтрагента,
		|	ЗаявкаНаВозврат.Грузоотправитель               КАК Грузоотправитель,
		|	ЗаявкаНаВозврат.Грузополучатель                КАК Грузополучатель,
		|	ЗаявкаНаВозврат.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	ЗаявкаНаВозврат.БанковскийСчетГрузополучателя  КАК БанковскийСчетГрузополучателя,
		|
		|	ЗаявкаНаВозврат.СкидкиНаценки.(
		|		КлючСвязи,
		|		СкидкаНаценка,
		|		Сумма
		|	) КАК СкидкиНаценки,
		|	ЗаявкаНаВозврат.АдресДоставкиЗначенияПолей     КАК АдресДоставкиЗначенияПолей,
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		#Удаление
		|		И ЗаявкаНаВозврат.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|		И ЗаявкаНаВозврат.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ)) ТОГДА
		#КонецВставки
		|		ЗаявкаНаВозврат.СпособДоставки
		|	КОНЕЦ                                          КАК СпособДоставки,
		|	
		#Удаление
		|	ВЫБОР КОГДА ЗаявкаНаВозврат.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|	ВЫБОР КОГДА ЗаявкаНаВозврат.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ)) ТОГДА
		#КонецВставки
		|		ЗаявкаНаВозврат.ПеревозчикПартнер
		|	КОНЕЦ                                          КАК ПеревозчикПартнер,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		#Удаление
		|		И ЗаявкаНаВозврат.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		#КонецУдаления
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		|		И ЗаявкаНаВозврат.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента),ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ)) ТОГДА
		#КонецВставки
		|		ЗаявкаНаВозврат.ДополнительнаяИнформацияПоДоставке
		|	КОНЕЦ                                          КАК ДополнительнаяИнформацияПоДоставке,
		|
		|	ЗаявкаНаВозврат.ПорядокРасчетов                КАК ПорядокРасчетов,
		|	ЗаявкаНаВозврат.НаправлениеДеятельности        КАК НаправлениеДеятельности
		|
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
		|ГДЕ
		|	ЗаявкаНаВозврат.Ссылка = &ДокументОснование
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыОстатки.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(
		|		,
		|		ЗаказКлиента = &ДокументОснование
		|) КАК ЗаказыОстатки
		|";

		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
		Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));

		РезультатЗапроса = Запрос.ВыполнитьПакет();

		РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
		РеквизитыЗаказа.Следующий();

		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииПоОперации(ДокументОснование,
		"РеализацияТоваровУслуг",
		РеквизитыЗаказа.ХозяйственнаяОперация,
		ВариантОформления);

		Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыЗаказа.ЗаказКлиента,
		РеквизитыЗаказа.СтатусДокумента,
		РеквизитыЗаказа.ЕстьОшибкиПроведен);

		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			Если НЕ ЗначениеЗаполнено(Дата) Тогда
				Дата = ТекущаяДатаСеанса();
			КонецЕсли;
		КонецЕсли;
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
		ЭтотОбъект,
		РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
		РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю,
		РеквизитыЗаказа.КалендарьВозвратаТары);

		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
		КонецЕсли;

	ИначеЕсли ТипОснования = Тип("Массив") Тогда

		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		Валюта = ВалютаВзаиморасчетов;
		БанковскийСчетОрганизации = РеквизитыЗаказа.БанковскийСчет;
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
		ЭтотОбъект,
		РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
		РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю,
		РеквизитыЗаказа.КалендарьВозвратаТары);

		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация    		= Организация;
			СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		КонецЕсли;

		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказыОстатки.Склад КАК Склад
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(
			|		,
			|		ЗаказКлиента В (&МассивДокументов)
			|) КАК ЗаказыОстатки
			|";

			РезультатЗапросаПоСкладам = Запрос.Выполнить();
			МассивСкладов = РезультатЗапросаПоСкладам.Выгрузить().ВыгрузитьКолонку("Склад");
			Склад = РеквизитыЗаказа.СкладОтгрузки;

		КонецЕсли;

	КонецЕсли;

	РеализацияПоЗаказам = Истина;

	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Соглашение) Тогда
			УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
			ФормаОплаты   = УсловияПродаж.ФормаОплаты;

			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация    			= Организация;
			СтруктураПараметров.НаправлениеДеятельности	= НаправлениеДеятельности;
			СтруктураПараметров.ФормаОплаты				= ФормаОплаты;
			СтруктураПараметров.ФизическоеЛицо			= Курьер;

			Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;

	// Заполнение т.ч. товары.
	Если Не ЗначениеЗаполнено(СкладОтгрузки) Тогда
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			// Только услуги
			Если МассивСкладов.Количество() = 0 Тогда
				ЗаполнятьПоОстаткам = Истина;
				// Услуги или товары
			ИначеЕсли МассивСкладов.Количество() >= 1 Тогда
				СкладОтгрузки = МассивСкладов[0];
				Склад = СкладОтгрузки;
				ЗаполнятьПоОстаткам = Истина;
			КонецЕсли;
		Иначе
			ЗаполнятьПоОстаткам = Истина;
			СкладОтгрузки = Склад;
		КонецЕсли;
	Иначе
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			Склад = СкладОтгрузки;
		КонецЕсли;
		ЗаполнятьПоОстаткам = Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Статус) Тогда
		Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	КонецЕсли;

	Если ВводитьНаОснованииНепроведенного Тогда
		ЗаполнятьПоОстаткам = Ложь;
	КонецЕсли;

	Если ЗаполнятьПоОстаткам Тогда

		Если ТипОснования = Тип("Массив") Тогда
			МассивЗаказов = ДокументОснование;
		Иначе
			МассивЗаказов = Новый Массив();
			МассивЗаказов.Добавить(ЗаказКлиента);
		КонецЕсли;

		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ВариантОформления", ВариантОформления);
		ПараметрыЗаполнения.Вставить("ПараметрыОформления", ПараметрыОформления);

		РеализацияТоваровУслугЛокализация.ДополнитьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыЗаказа);

		Документы.РеализацияТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
		ЭтотОбъект,
		Товары,
		СкидкиНаценки,
		НачислениеБонусныхБаллов,
		?(СкладОтгрузки=Неопределено, Справочники.Склады.ПустаяСсылка(), СкладОтгрузки),
		МассивЗаказов,
		ПараметрыЗаполнения,
		ШтрихкодыУпаковок);

		ЭтотОбъект.ВариантОформленияПродажи = ?(ЗначениеЗаполнено(ВариантОформления), 
		ВариантОформления,
		Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);

		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказКлиента, Товары, "ЗаказКлиента");

		Если НЕ ЗначениеЗаполнено(ЗаказКлиента)
			И МассивЗаказов.Количество() = 1
			И ТипЗнч(МассивЗаказов[0]) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ЗаказКлиента = МассивЗаказов[0];
		КонецЕсли;

		СкидкиРассчитаны = (СкидкиНаценки.Количество() > 0);

		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг);
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий, Ложь);

	КонецЕсли;

	СтруктураОснование = Документы.РеализацияТоваровУслуг.СтруктураОснованияДляПечати(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураОснование);

КонецПроцедуры

&После("ПриКопировании")
Процедура РСК_ПриКопировании(ОбъектКопирования)
	
	//++ РС Консалт: Трофимов Евгений 11.02.2023 Тикет 23696
	//e1cib/data/Документ.Задание?ref=839a72ccbc41c5584759b4b724f8b01a
	РСК_ДокументОснованиеОтчетПоВыдаче = Неопределено;
	//-- КонецТикета 23696	
	
КонецПроцедуры




