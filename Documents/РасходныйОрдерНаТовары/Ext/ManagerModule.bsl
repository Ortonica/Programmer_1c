
&ИзменениеИКонтроль("ПечатьРасходногоОрдераНаТовары")
Функция РСК_ПечатьРасходногоОрдераНаТовары(МассивОбъектов, ОбъектыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерНаТовары_РасходныйОрдерНаТовары";

	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);

	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс,Представление");
	СинонимДокумента = НСтр("ru = 'Расходный ордер на товары';
	|en = 'Goods issue note'", ОбщегоНазначения.КодОсновногоЯзыка());

	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");

	ИспользуетсяМаркируемаяПродукция = РасходныйОрдерНаТоварыЛокализация.ИспользуетсяМаркируемаяПродукция();

	ЗапросПоШапке = Новый Запрос;
	ЗапросПоШапке.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.ЗонаОтгрузки) КАК ПредставлениеЗоныОтгрузки,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.Получатель) КАК ПредставлениеПолучателя,
	|	РасходныйОрдерНаТовары.Дата КАК Дата,
	|	РасходныйОрдерНаТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	РасходныйОрдерНаТовары.Номер КАК Номер,
	|	РасходныйОрдерНаТовары.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	РасходныйОрдерНаТовары.Склад КАК Склад,
	|	РасходныйОрдерНаТовары.Помещение КАК Помещение,
	|	РасходныйОрдерНаТовары.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку КАК ОтгрузкаПоЗаданиюНаПеревозку,
	|	РасходныйОрдерНаТовары.ПорядокДоставки КАК ПорядокДоставки,
	|	РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Дата КАК ЗаданиеНаПеревозкуДата,
	|	РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Номер КАК ЗаданиеНаПеревозкуНомер,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.ЗаданиеНаПеревозку) КАК ЗаданиеНаПеревозкуПредставление
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|ИТОГИ ПО
	|	ИспользоватьСерииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение.Организация.Префикс) КАК РаспоряжениеПрефикс,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение) КАК РаспоряжениеПредставление,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение.Дата КАК РаспоряжениеДата,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение.Организация) КАК ПредставлениеОрганизации,
	|	МИНИМУМ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение.Номер,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение.Дата,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение.Организация.Префикс),
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение),
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение.Организация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";

	ЗапросПоШапке.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов     = ЗапросПоШапке.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ДеревоОбъектов        = МассивРезультатов[0].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаРаспоряжений   = МассивРезультатов[1].Выбрать();

	Для Каждого ИспользованиеСерий Из ДеревоОбъектов.Строки Цикл

		ЗапросПоТоварам = Новый Запрос;
		МассивОбъектовИспользованиеСерий = ИспользованиеСерий.Строки.ВыгрузитьКолонку("Ссылка");
		ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектовИспользованиеСерий);

		Если ИспользованиеСерий.ИспользоватьСерииНоменклатуры Тогда

			ТекстЗапросаПоТоварам = 
			"ВЫБРАТЬ
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка КАК Ссылка,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.НомерСтроки КАК НомерСтроки,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.Код КАК Код,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура КАК Номенклатура,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Характеристика КАК Характеристика,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Серия КАК Серия,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель.Код КАК УпаковочныйЛистРодительКод,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество,
			|	ВЫБОР
			|		КОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НеОтгружать,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка,
			|	&ОпределениеПризнакаМаркируемаяПродукция КАК МаркируемаяПродукция
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
			|ГДЕ
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка В(&МассивОбъектов)
			|	И НЕ РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Ссылка,
			|	Максимум(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|			ТОГДА NULL
			|		ИНАЧЕ ТаблицаТоваров.Серия
			|	КОНЕЦ КАК Серия,
			|	ТаблицаТоваров.УпаковочныйЛистРодитель,
			|	ТаблицаТоваров.УпаковочныйЛистРодительКод,
			|	СУММА(ТаблицаТоваров.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
			|	ТаблицаТоваров.НеОтгружать,
			|	ТаблицаТоваров.Упаковка,
			|	ТаблицаТоваров.МаркируемаяПродукция			
			|ПОМЕСТИТЬ СуммированнаяТаблицаТоваров
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Ссылка,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.НеОтгружать,
			|	ТаблицаТоваров.Упаковка,
			|	ТаблицаТоваров.МаркируемаяПродукция,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|			ТОГДА NULL
			|		ИНАЧЕ ТаблицаТоваров.Серия
			|	КОНЕЦ,
			|	ТаблицаТоваров.УпаковочныйЛистРодитель,
			|	ТаблицаТоваров.УпаковочныйЛистРодительКод
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Ссылка КАК Ссылка,
			|	ТаблицаТоваров.Номенклатура.ИмяКолонкиКодов КАК Артикул,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТоваров.Номенклатура.Код КАК Код,
			#Удаление
			|	ТаблицаТоваров.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,		
			#КонецУдаления
			#Вставка
			//++РС Консалт: Минаков А.С. Задача 21223
			|	ТаблицаТоваров.Номенклатура.Наименование КАК ПредставлениеНоменклатуры,
			//++РС Консалт: Минаков А.С. Задача 21223
			|	ТаблицаТоваров.Серия КАК Серия,
			|	ТаблицаТоваров.Упаковка КАК Упаковка,
			//++ РС Консалт: Минаков А.С. Задача 20226
			#КонецВставки
			|	ТаблицаТоваров.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
			|	ТаблицаТоваров.Серия.Наименование КАК ПредставлениеСерии,
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.УпаковочныйЛистРодитель,
			|	ТаблицаТоваров.УпаковочныйЛистРодительКод,
			|	ТаблицаТоваров.КоличествоУпаковок,
			|	ТаблицаТоваров.Количество,
			|	ТаблицаТоваров.НеОтгружать КАК НеОтгружать,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Упаковка)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения)
			|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
			|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
			|	ТаблицаТоваров.МаркируемаяПродукция
			|ИЗ
			|	СуммированнаяТаблицаТоваров КАК ТаблицаТоваров
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки
			|ИТОГИ ПО
			|	Ссылка,
			|	НеОтгружать,
			|	УпаковочныйЛистРодитель,
			|	Номенклатура,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТоваров.Ссылка КАК Ссылка,
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			#Вставка
			//++ РС Консалт: Минаков А.С. Задача 20226
			|	ТаблицаТоваров.Серия КАК Серия,
			|	ТаблицаТоваров.Упаковка КАК Упаковка,
			//++ РС Консалт: Минаков А.С. Задача 20226
			#КонецВставки
			|	ТаблицаТоваров.Серия.Наименование КАК ПредставлениеСерии,
			|	ТаблицаТоваров.УпаковочныйЛистРодитель,
			|	ТаблицаТоваров.НеОтгружать КАК НеОтгружать,
			|	ТаблицаТоваров.МаркируемаяПродукция КАК МаркируемаяПродукция
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|	И НЕ ТаблицаТоваров.Серия ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаТоваров.Ссылка,
			|	ТаблицаТоваров.НеОтгружать,
			|	ТаблицаТоваров.УпаковочныйЛистРодитель,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.МаркируемаяПродукция,
			|	ПредставлениеСерии
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Ссылка,
			|	МАКСИМУМ(ТаблицаТоваров.МаркируемаяПродукция) КАК ЕстьМаркируемаяПродукция
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Ссылка";

			Если ВыводитьКоды Тогда
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "ИмяКолонкиКодов", ИмяКолонкиКодов);
			Иначе	
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "ТаблицаТоваров.Номенклатура.ИмяКолонкиКодов КАК Артикул,", "");
			КонецЕсли;

			Если ИспользуетсяМаркируемаяПродукция Тогда
				ОпределениеМаркируемаяПродукция = РасходныйОрдерНаТоварыЛокализация.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура");
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
			Иначе
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ОпределениеПризнакаМаркируемаяПродукция", "ЛОЖЬ");
			КонецЕсли; 

			ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
			МассивРезультатов  = ЗапросПоТоварам.ВыполнитьПакет();

			РезультатЗапроса   = МассивРезультатов[2]; // РезультатЗапроса
			ВыборкаТЧПоСсылкам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			РезультатЗапроса   = МассивРезультатов[3]; // РезультатЗапроса
			ВыборкаПоСериям    = РезультатЗапроса.Выбрать();

			РезультатЗапроса   = МассивРезультатов[4]; // РезультатЗапроса
			ВыборкаПоМаркам    = РезультатЗапроса.Выбрать();

		Иначе

			ТекстЗапросаПоТоварам = 
			"ВЫБРАТЬ
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка КАК Ссылка,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.НомерСтроки КАК НомерСтроки,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура КАК Номенклатура,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.Код КАК Код,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.ИмяКолонкиКодов КАК Артикул,
			#Удаление
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,		
			#КонецУдаления
			#Вставка
			//++РС Консалт: Минаков А.С. Задача 21223
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.Наименование КАК ПредставлениеНоменклатуры,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка КАК Упаковка,
			//++РС Консалт: Минаков А.С. Задача 21223
			#КонецВставки
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Характеристика КАК Характеристика,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Серия КАК Серия,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Серия.Наименование КАК ПредставлениеСерии,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество,
			|	ВЫБОР
			|		КОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НеОтгружать,
			|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
			|	ВЫБОР
			|		КОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.ЕдиницаИзмерения)
			|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель.Код КАК УпаковочныйЛистРодительКод,
			|	&ОпределениеПризнакаМаркируемаяПродукция КАК МаркируемаяПродукция
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
			|
			|ГДЕ
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка В(&МассивОбъектов)
			|	И НЕ РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка КАК Ссылка,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура КАК Номенклатура,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Характеристика КАК Характеристика,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.Код КАК Код,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.ИмяКолонкиКодов КАК Артикул,
			#Удаление
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,		
			#КонецУдаления
			#Вставка
			//++РС Консалт: Минаков А.С. Задача 21223
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.Наименование КАК ПредставлениеНоменклатуры,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка КАК Упаковка,
			//++РС Консалт: Минаков А.С. Задача 21223
			#КонецВставки
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Серия КАК Серия,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ПредставлениеСерии КАК ПредставлениеСерии,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.НеОтгружать,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ПредставлениеБазовойЕдиницыИзмерения,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ПредставлениеЕдининицыИзмеренияУпаковки,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель.Код КАК УпаковочныйЛистРодительКод,
			|	РасходныйОрдерНаТоварыОтгружаемыеТовары.МаркируемаяПродукция
			|ИЗ
			|	ТаблицаТоваров КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки
			|ИТОГИ ПО
			|	Ссылка,
			|	НеОтгружать,
			|	УпаковочныйЛистРодитель,
			|	Номенклатура,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Ссылка,
			|	МАКСИМУМ(ТаблицаТоваров.МаркируемаяПродукция) КАК ЕстьМаркируемаяПродукция
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Ссылка";

			Если ВыводитьКоды Тогда
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "ИмяКолонкиКодов", ИмяКолонкиКодов);
			Иначе	
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.ИмяКолонкиКодов КАК Артикул,", "");
			КонецЕсли;

			Если ИспользуетсяМаркируемаяПродукция Тогда
				ОпределениеМаркируемаяПродукция = РасходныйОрдерНаТоварыЛокализация.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура");
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
			Иначе
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ОпределениеПризнакаМаркируемаяПродукция", "ЛОЖЬ");
			КонецЕсли; 

			ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
			МассивРезультатов  = ЗапросПоТоварам.ВыполнитьПакет();

			РезультатЗапроса   = МассивРезультатов[1]; // РезультатЗапроса
			ВыборкаТЧПоСсылкам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			РезультатЗапроса   = МассивРезультатов[2]; // РезультатЗапроса
			ВыборкаПоМаркам    = РезультатЗапроса.Выбрать();

		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка
		|		ИНАЧЕ РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель
		|	КОНЕЦ КАК УпаковочныйЛистРодитель,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка КАК Ссылка,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист.Дата КАК Дата,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист.Код КАК Код,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВложенность
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка В(&МассивОбъектов)
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист";

		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектовИспользованиеСерий);
		УпаковочныеЛистыПоДокументам = Запрос.Выполнить().Выгрузить();

		ПервыйДокумент = Истина;

		Для Каждого ВыборкаПоДокументам Из ИспользованиеСерий.Строки Цикл

			Если НЕ ВыборкаТЧПоСсылкам.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
				Продолжить;
			КонецЕсли;

			Если ВыборкаПоМаркам.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
				ВыводитьМарки = ВыборкаПоМаркам.ЕстьМаркируемаяПродукция;
			Иначе	
				ВыводитьМарки = Ложь;
			КонецЕсли;

			УпаковочныеЛистыДокумента = УпаковочныеЛистыПоДокументам.Скопировать(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка));

			ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение, ВыборкаПоДокументам.ДатаОтгрузки);
			ВыводитьУпаковочныеЛисты = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковочныеЛисты")
			И УпаковочныеЛистыДокумента.Количество() > 0;

			ВыводитьУпаковки = ИспользоватьУпаковкиНоменклатуры Или ИспользуетсяАдресноеХранение;

			// Макет получаем в цикле,т.к. ширина колонок зависит от склада и помещения в документе.
			#Удаление
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходныйОрдерНаТовары.ПФ_MXL_РасходныйОрдерНаТовары");
			#КонецУдаления
			#Вставка
			//++ РС Консалт: Минаков А.С. Задача 20226
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходныйОрдерНаТовары.РС_ПФ_MXL_РасходныйОрдерНаТовары");
			//++ РС Консалт: Минаков А.С. Задача 20226
			#КонецВставки

			ОбластьЗаголовок 		  = Макет.ПолучитьОбласть("Заголовок");
			ОбластьЗаданиеНаПеревозку = Макет.ПолучитьОбласть("ЗаданиеНаПеревозку");
			ОбластьШапка 			  = Макет.ПолучитьОбласть("Шапка");
			ОбластьПокупатель	 	  = Макет.ПолучитьОбласть("Покупатель");

			ОбластьШапкаТаблицыУпаковочныеЛисты  = Макет.ПолучитьОбласть("ШапкаТаблицыУпаковочныеЛисты");  
			ОбластьСтрокаТаблицыУпаковочныеЛисты = Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныеЛисты");
			ОбластьПодвалТаблицыУпаковочныеЛисты = Макет.ПолучитьОбласть("ПодвалТаблицыУпаковочныеЛисты");

			ОбластьШапкаТаблицы   = Неопределено;
			ОбластьСтрокаТаблицы  = Неопределено;
			ОбластьПодвалТаблицы  = Неопределено;

			Если Не ВыводитьУпаковочныеЛисты И Не ВыводитьКоды И Не ВыводитьУпаковки Тогда
				ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
				ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
			ИначеЕсли ВыводитьУпаковочныеЛисты И Не ВыводитьКоды И Не ВыводитьУпаковки Тогда 
				ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыУпаковочныйЛист");
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист");
				ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицыУпаковочныйЛист");
			ИначеЕсли Не ВыводитьУпаковочныеЛисты И ВыводитьКоды И Не ВыводитьУпаковки Тогда
				ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыКолонкаКодов");
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыКолонкаКодов");
				ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицыКолонкаКодов");
			ИначеЕсли Не ВыводитьУпаковочныеЛисты И Не ВыводитьКоды И ВыводитьУпаковки Тогда
				ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыУпаковки");
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыУпаковки");
				ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицыУпаковки");
			ИначеЕсли ВыводитьУпаковочныеЛисты И ВыводитьКоды И Не ВыводитьУпаковки Тогда
				ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыУпаковочныйЛистКолонкаКодов");
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛистКолонкаКодов");
				ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицыУпаковочныйЛистКолонкаКодов");
			ИначеЕсли Не ВыводитьУпаковочныеЛисты И ВыводитьКоды И ВыводитьУпаковки Тогда
				ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыКолонкаКодовУпаковки");
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыКолонкаКодовУпаковки");
				ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицыКолонкаКодовУпаковки");
			ИначеЕсли ВыводитьУпаковочныеЛисты И Не ВыводитьКоды И ВыводитьУпаковки Тогда
				ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыУпаковочныйЛистУпаковки");
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛистУпаковки");
				ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицыУпаковочныйЛистУпаковки");
			ИначеЕсли ВыводитьУпаковочныеЛисты И ВыводитьКоды И ВыводитьУпаковки Тогда
				ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыВсе");
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыВсе");
				ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицыВсе");
			КонецЕсли;

			Если ВыводитьКоды Тогда 
				ОбластьШапкаТаблицы.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
			КонецЕсли;

			ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");

			ОбластьЗаголовокНеОтгружать = Макет.ПолучитьОбласть("ЗаголовокНеОтгружать");

			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			// Выведем шапку табличного документа
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);

			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

			Если ИспользуетсяАдресноеХранение Тогда

				ТекстЗоны = НСтр("ru = 'Зона отгрузки:';
				|en = 'Outbound area:'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныОтгрузки;

			Иначе

				ТекстЗоны = "";
				ЗонаПредставление = "";

			КонецЕсли;

			ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);

			СтруктураДанныхЗаголовка = Новый Структура;
			СтруктураДанныхЗаголовка.Вставить("ТекстЗаголовка", 
			ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента));
			ОбластьЗаголовок.Параметры.Заполнить(СтруктураДанныхЗаголовка);

			Если ВыводитьМарки Тогда
				ОбластьЗаголовок.Параметры.ПризнакМаркировки = "[М]";
			КонецЕсли; 

			ТабличныйДокумент.Вывести(ОбластьЗаголовок);

			Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПолучателя) Тогда //если не перемещение или оприходование
				ОбластьПокупатель.Параметры.Заполнить(ВыборкаПоДокументам);
				ТабличныйДокумент.Вывести(ОбластьПокупатель);		
			КонецЕсли;

			ОбластьШапка.Параметры.ПредставлениеСклада			=
			СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.ПредставлениеСклада,ВыборкаПоДокументам.ПредставлениеПомещения);
			ОбластьШапка.Параметры.ТекстЗоны 					= ТекстЗоны;
			ОбластьШапка.Параметры.ПредставлениеЗоныОтгрузки	= ЗонаПредставление;

			Счетчик = 0;
			ПредставлениеРаспоряжений = "";
			ПервоеРаспоряжение = Истина;
			Пока ВыборкаРаспоряжений.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоДокументам.Ссылка)) Цикл

				РеквизитыДокумента.Дата          = ВыборкаРаспоряжений.РаспоряжениеДата;
				РеквизитыДокумента.Номер         = ВыборкаРаспоряжений.РаспоряжениеНомер;
				РеквизитыДокумента.Префикс       = ВыборкаРаспоряжений.РаспоряжениеПрефикс;
				РеквизитыДокумента.Представление = ВыборкаРаспоряжений.РаспоряжениеПредставление;

				ПредставлениеРаспоряжения = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);

				Если Не ПервоеРаспоряжение Тогда
					ПредставлениеРаспоряжений = ПредставлениеРаспоряжений + ", ";		
				КонецЕсли;

				ПервоеРаспоряжение = Ложь;

				ПредставлениеРаспоряжений = ПредставлениеРаспоряжений + ПредставлениеРаспоряжения;

				Счетчик = Счетчик + 1;

			КонецЦикла;

			ЗаголовокРаспоряжения = "";
			Если Счетчик > 1 Тогда 
				ЗаголовокРаспоряжения = НСтр("ru = 'Распоряжения:';
				|en = 'References:'", ОбщегоНазначения.КодОсновногоЯзыка());
			Иначе
				ЗаголовокРаспоряжения = НСтр("ru = 'Распоряжение:';
				|en = 'Reference:'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;

			ОбластьШапка.Параметры.ПредставлениеРаспоряжений = ПредставлениеРаспоряжений;
			ОбластьШапка.Параметры.ЗаголовокРаспоряжения     = ЗаголовокРаспоряжения;

			ОбластьШапка.Параметры.ДатаОтгрузки	= ВыборкаПоДокументам.ДатаОтгрузки;

			ТабличныйДокумент.Вывести(ОбластьШапка);

			Если ВыборкаПоДокументам.ОтгрузкаПоЗаданиюНаПеревозку Тогда

				РеквизитыДокумента.Дата          = ВыборкаПоДокументам.ЗаданиеНаПеревозкуДата;
				РеквизитыДокумента.Номер         = ВыборкаПоДокументам.ЗаданиеНаПеревозкуНомер;
				РеквизитыДокумента.Префикс       = "";
				РеквизитыДокумента.Представление = ВыборкаПоДокументам.ЗаданиеНаПеревозкуПредставление;

				ОбластьЗаданиеНаПеревозку.Параметры.ПредставлениеЗаданияНаПеревозку	 =
				ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);				
				ОбластьЗаданиеНаПеревозку.Параметры.ПорядокДоставки = ВыборкаПоДокументам.ПорядокДоставки;

				ТабличныйДокумент.Вывести(ОбластьЗаданиеНаПеревозку);

			КонецЕсли;

			// Выведем шапку таблицы номенклатуры
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

			ВсегоНаименований = 0;

			// Создадим табличный документ для неотгружаемой номенклатуры
			ТабличныйДокументНеОтгружать = Новый ТабличныйДокумент;
			ВсегоНаименованийНеОтгружать = 0;

			ВыборкаПоПараметруНеОтгружать = ВыборкаТЧПоСсылкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоПараметруНеОтгружать.Следующий() Цикл

				ВыборкаТЧПоУпаковочнымЛистам = ВыборкаПоПараметруНеОтгружать.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Пока ВыборкаТЧПоУпаковочнымЛистам.Следующий() Цикл

					ВыборкаПоНоменклатуреТЧ = ВыборкаТЧПоУпаковочнымЛистам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

					Пока ВыборкаПоНоменклатуреТЧ.Следующий() Цикл

						ВыборкаПоХарактеристикамТЧ = ВыборкаПоНоменклатуреТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаПоХарактеристикамТЧ.Следующий() Цикл
							ВыборкаПоСтрокамТЧ = ВыборкаПоХарактеристикамТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

							ПерваяСтрока = Истина;
							СтрокаУпаковок = "";
							СтрокаКоличесткаУпаковок = "";
							СтрокаЕдиницИзмерений = "";
							СтрокаКоличества = "";

							Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл

								Если ВыборкаПоНоменклатуреТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда

									Если ПерваяСтрока Тогда

										// Определим, в какой табличный документ выводим номенклатуру
										Если ВыборкаПоСтрокамТЧ.НеОтгружать = 0 Тогда
											ТабличныйДокументДляВыводаСтроки = ТабличныйДокумент;
											ВсегоНаименований 				 = ВсегоНаименований + 1;
											НомерСтроки 					 = ВсегоНаименований;
										Иначе
											ТабличныйДокументДляВыводаСтроки = ТабличныйДокументНеОтгружать;
											ВсегоНаименованийНеОтгружать 	 = ВсегоНаименованийНеОтгружать + 1;
											НомерСтроки 					 = ВсегоНаименованийНеОтгружать;
										КонецЕсли;

										ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
										ОбластьСтрокаТаблицы.Параметры.Заполнить(Новый Структура("НомерСтроки", НомерСтроки));

										Если ВыводитьУпаковочныеЛисты Тогда
											ОбластьСтрокаТаблицы.Параметры.УпаковочныйЛистРодитель = ВыборкаПоСтрокамТЧ.УпаковочныйЛистРодительКод; 
										КонецЕсли;

										Если ВыводитьКоды Тогда
											ОбластьСтрокаТаблицы.Параметры.Артикул = ВыборкаПоСтрокамТЧ[ИмяКолонкиКодов];
										КонецЕсли;

										СтруктураПоиска = Новый Структура;
										СтруктураПоиска.Вставить("Ссылка", ВыборкаПоСтрокамТЧ.Ссылка);
										СтруктураПоиска.Вставить("Номенклатура", ВыборкаПоСтрокамТЧ.Номенклатура);
										СтруктураПоиска.Вставить("Характеристика", ВыборкаПоСтрокамТЧ.Характеристика);
										СтруктураПоиска.Вставить("НеОтгружать", ВыборкаПоСтрокамТЧ.НеОтгружать);
										СтруктураПоиска.Вставить("УпаковочныйЛистРодитель", ВыборкаПоСтрокамТЧ.УпаковочныйЛистРодитель);

										СтрокаСерий = "";
										Пока ВыборкаПоСериям.НайтиСледующий(СтруктураПоиска) Цикл
											СтрокаСерий = СтрокаСерий + ВыборкаПоСериям.ПредставлениеСерии + ", ";
										КонецЦикла;

										Если СтрДлина(СтрокаСерий) <> 0 Тогда
											СтрокаСерий = Лев(СтрокаСерий, СтрДлина(СтрокаСерий) - 2);
										КонецЕсли;

										ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
										ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

										Если ВыводитьМарки И ВыборкаПоСтрокамТЧ.МаркируемаяПродукция Тогда
											ОбластьСтрокаТаблицы.Параметры.ПризнакМаркировки = "[М]";
										Иначе	
											ОбластьСтрокаТаблицы.Параметры.ПризнакМаркировки = "";
										КонецЕсли; 

										ОбластьСтрокаТаблицы.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
										ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
										ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики,
										, // Упаковка
										СтрокаСерий,
										ДопПараметрыПредставлениеНоменклатуры);

										ПерваяСтрока = Ложь;

										ТоварССериямиЭкземплярами = Истина;

									КонецЕсли;

									Если ВыводитьУпаковки Тогда
										СтрокаУпаковок = СтрокаУпаковок + ВыборкаПоСтрокамТЧ.ПредставлениеЕдининицыИзмеренияУпаковки + Символы.ПС;
										СтрокаКоличесткаУпаковок = СтрокаКоличесткаУпаковок + ВыборкаПоСтрокамТЧ.КоличествоУпаковок + Символы.ПС;
									КонецЕсли;

									СтрокаЕдиницИзмерений = СтрокаЕдиницИзмерений + ВыборкаПоСтрокамТЧ.ПредставлениеБазовойЕдиницыИзмерения + Символы.ПС;
									СтрокаКоличества = СтрокаКоличества + ВыборкаПоСтрокамТЧ.Количество + Символы.ПС;

								Иначе
									// Определим, в какой табличный документ выводим номенклатуру
									Если ВыборкаПоСтрокамТЧ.НеОтгружать = 0 Тогда
										ТабличныйДокументДляВыводаСтроки = ТабличныйДокумент;
										ВсегоНаименований 				 = ВсегоНаименований + 1;
										НомерСтроки 					 = ВсегоНаименований;
									Иначе
										ТабличныйДокументДляВыводаСтроки = ТабличныйДокументНеОтгружать;
										ВсегоНаименованийНеОтгружать 	 = ВсегоНаименованийНеОтгружать + 1;
										НомерСтроки 					 = ВсегоНаименованийНеОтгружать;
									КонецЕсли;

									ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
									ОбластьСтрокаТаблицы.Параметры.Заполнить(Новый Структура("НомерСтроки", НомерСтроки));

									Если ВыводитьУпаковочныеЛисты Тогда
										ОбластьСтрокаТаблицы.Параметры.УпаковочныйЛистРодитель = ВыборкаПоСтрокамТЧ.УпаковочныйЛистРодительКод; 
									КонецЕсли;

									Если ВыводитьКоды Тогда
										ОбластьСтрокаТаблицы.Параметры.Артикул = ВыборкаПоСтрокамТЧ[ИмяКолонкиКодов];
									КонецЕсли;

									ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
									ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

									Если ВыводитьМарки И ВыборкаПоСтрокамТЧ.МаркируемаяПродукция Тогда
										ОбластьСтрокаТаблицы.Параметры.ПризнакМаркировки = "[М]";
									Иначе	
										ОбластьСтрокаТаблицы.Параметры.ПризнакМаркировки = "";
									КонецЕсли; 

									ОбластьСтрокаТаблицы.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
									ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
									ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики,
									, // Упаковка
									ВыборкаПоСтрокамТЧ.ПредставлениеСерии,
									ДопПараметрыПредставлениеНоменклатуры);
									#Вставка
									//++ РС Консалт: Минаков А.С. Задача 20226
									ОбластьСтрокаТаблицы.Параметры.Штрихкод = РСК_ВызовСервера.НайтиШтрихкоды(
									ВыборкаПоСтрокамТЧ.Номенклатура,
									ВыборкаПоСтрокамТЧ.Характеристика,
									ВыборкаПоСтрокамТЧ.Серия,
									ВыборкаПоСтрокамТЧ.Упаковка);
									//++ РС Консалт: Минаков А.С. Задача 20226
									#КонецВставки

									ТабличныйДокументДляВыводаСтроки.Вывести(ОбластьСтрокаТаблицы);

									ТоварССериямиЭкземплярами = Ложь;

								КонецЕсли;

							КонецЦикла;

							Если ТоварССериямиЭкземплярами Тогда

								Если ВыводитьУпаковки Тогда
									ОбластьСтрокаТаблицы.Параметры.КоличествоУпаковок = СтрокаКоличесткаУпаковок;
									ОбластьСтрокаТаблицы.Параметры.ПредставлениеЕдининицыИзмеренияУпаковки = СтрокаУпаковок;
								КонецЕсли;

								ОбластьСтрокаТаблицы.Параметры.Количество = СтрокаКоличества;
								ОбластьСтрокаТаблицы.Параметры.ПредставлениеБазовойЕдиницыИзмерения = СтрокаЕдиницИзмерений; 
								#Вставка
								//++ РС Консалт: Минаков А.С. Задача 20226
								ОбластьСтрокаТаблицы.Параметры.Штрихкод = РСК_ВызовСервера.НайтиШтрихкоды(
								ВыборкаПоСтрокамТЧ.Номенклатура,
								ВыборкаПоСтрокамТЧ.Характеристика,
								ВыборкаПоСтрокамТЧ.Серия,
								ВыборкаПоСтрокамТЧ.Упаковка);
								//++ РС Консалт: Минаков А.С. Задача 20226
								#КонецВставки

								ТабличныйДокументДляВыводаСтроки.Вывести(ОбластьСтрокаТаблицы);

							КонецЕсли;

						КонецЦикла;
					КонецЦикла;

				КонецЦикла;

			КонецЦикла;

			// Выведем подвал таблицы и подписи
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);

			ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%';
			|en = 'Total items %ВсегоНаименований%'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки, "%ВсегоНаименований%", ВсегоНаименований);
			ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;

			ОбластьПодписей.Параметры.ПредставлениеОтветсвенного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный, ВыборкаПоДокументам.Дата);

			ТабличныйДокумент.Вывести(ОбластьПодписей);

			// Дополним основной табличный документ таблицей неотгружаемой номенклатуры
			Если ВсегоНаименованийНеОтгружать > 0 Тогда

				// Выведем заголовок и шапку таблицы неотгружаемой номенклатуры
				ТекстЗаголовка = НСтр("ru = 'В зоне отгрузки необходимо оставить следующие позиции товаров';
				|en = 'The following goods items should be left in the shipping area'", ОбщегоНазначения.КодОсновногоЯзыка());
				ОбластьЗаголовокНеОтгружать.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", ТекстЗаголовка));
				ТабличныйДокумент.Вывести(ОбластьЗаголовокНеОтгружать);

				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

				// Присоединим таблицу неотгружаемой номенклатуры к основному табличному документу
				ТабличныйДокумент.Вывести(ТабличныйДокументНеОтгружать);

				// Выведем подвал таблицы неотгружаемой номенклатуры
				ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);

			КонецЕсли;

			#Область ПечатьИерархииУпаковочныхЛистов

			Если ВыводитьУпаковочныеЛисты
				И УпаковочныеЛистыДокумента.НайтиСтроки(Новый Структура("ЕстьВложенность", Истина)).Количество() > 0 Тогда

				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыУпаковочныеЛисты);

				Документы.УпаковочныйЛист.РекурсивноВывестиИерархиюУпаковочныхЛистов(ТабличныйДокумент, ОбластьСтрокаТаблицыУпаковочныеЛисты, УпаковочныеЛистыДокумента, ВыборкаПоДокументам.Ссылка);

				ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыУпаковочныеЛисты);

			КонецЕсли;

			#КонецОбласти

			ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();

			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);

		КонецЦикла;

	КонецЦикла;

	ТабличныйДокумент.АвтоМасштаб = Истина;

	Возврат ТабличныйДокумент;

КонецФункции
  
&ИзменениеИКонтроль("ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары")
Функция РСК_ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании)
	Если ПравоДоступа("Добавление", Метаданные.Документы.РасходныйОрдерНаТовары) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьНаОснованииРасходныйОрдерНаТовары";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНаОснованииРасходныйОрдерНаТовары";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.РасходныйОрдерНаТовары);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		#Удаление
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "РасходныеОрдераФормируютсяМенеджером";
		#КонецУдаления
		#Вставка
		//++ РС Консалт: Минаков А.С. Задача 20226
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОрдернуюСхемуПриОтгрузке";
		//++ РС Консалт: Минаков А.С. Задача 20226
		#КонецВставки

		Возврат КомандаСоздатьНаОсновании;

	КонецЕсли;

	Возврат Неопределено;
КонецФункции

&ИзменениеИКонтроль("ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТоварыПоЗаданиюНаПеревозку")
Функция РСК_ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТоварыПоЗаданиюНаПеревозку(КомандыСозданияНаОсновании)
	Если ПравоДоступа("Добавление", Метаданные.Документы.РасходныйОрдерНаТовары) Тогда

		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьНаОснованииРасходныйОрдерНаТовары";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНаОснованииРасходныйОрдерНаТоварыПоЗаданиюНаПеревозку";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.РасходныйОрдерНаТовары);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		#Удаление
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "РасходныеОрдераФормируютсяМенеджером";
		#КонецУдаления
		#Вставка
		//++ РС Консалт: Минаков А.С. Задача 20226
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОрдернуюСхемуПриОтгрузке";
		//++ РС Консалт: Минаков А.С. Задача 20226
		#КонецВставки

		Возврат КомандаСоздатьНаОсновании;

	КонецЕсли;

	Возврат Неопределено;
КонецФункции
