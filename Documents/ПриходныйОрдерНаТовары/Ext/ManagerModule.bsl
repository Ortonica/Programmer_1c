 
 //++ РС Консалт: Минаков А.С. Задача 20226
&ИзменениеИКонтроль("ВозможноЗаполнениеСерийПоРаспоряжению")
Функция РСК_ВозможноЗаполнениеСерийПоРаспоряжению(Объект, ВыдаватьОшибки)

	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад",Объект.Склад)) Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'На складе не ведется учет серий.';
			|en = 'Batches are not accounted in the warehouse.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;	
	КонецЕсли;

	Если СкладыСервер.ИспользоватьСкладскиеПомещения(Объект.Склад,Объект.Дата)
		И Не ЗначениеЗаполнено(Объект.Помещение) Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Помещение""';
			|en = '""Wareroom"" is required'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Помещение","Объект");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	Если Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению Тогда
		
		#Удаление
		СкладОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Распоряжение,"СкладОтправитель");

		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад",СкладОтправитель)) Тогда
			Если ВыдаватьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'На складе-отправителе не ведется учет по сериям';
				|en = 'Accounting by batch is not kept in the origin warehouse'");

				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;	
		КонецЕсли;

		Если СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(СкладОтправитель,Объект.Дата) Тогда

			Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата)
				И Не СкладыСервер.ИспользоватьАдресноеХранение(СкладОтправитель, Справочники.СкладскиеПомещения.ПустаяСсылка(),Объект.Дата)
				И Не СкладыСервер.ИспользоватьСкладскиеПомещения(СкладОтправитель,Объект.Дата) Тогда

				Если ВыдаватьОшибки Тогда
					ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек, поэтому серии нужно указывать в разрезе упаковок. На складе-отправителе учет в разрезе складских ячеек не ведется, поэтому серии учитываются без разреза упаковок. Заполнить серии по данным отгрузки нельзя.';
					|en = 'Remaining quantity is accounted by storage bins in warehouse ""%Склад%"", that is why batch should be specified by packages. Accounting by storage bins in the origin warehouse is not kept, that is why batches are not recorded by packages. You cannot fill in the batch by shipment data.'");

					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 

					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				Возврат Ложь;	

			КонецЕсли;

			Если СкладыСервер.ИспользоватьСкладскиеПомещения(СкладОтправитель,Объект.Дата)
				И СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата) Тогда

				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ТоварыПоРаспоряжениям.Ссылка
				|ИЗ
				|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыПоРаспоряжениям
				|ГДЕ
				|	ТоварыПоРаспоряжениям.Распоряжение = &Распоряжение 
				|	И ТоварыПоРаспоряжениям.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
				|	И ТоварыПоРаспоряжениям.Ссылка.Проведен
				|	И (НЕ (ТоварыПоРаспоряжениям.Ссылка.Помещение.ИспользоватьАдресноеХранение)
				|		ИЛИ ТоварыПоРаспоряжениям.Ссылка.Дата < ТоварыПоРаспоряжениям.Ссылка.Помещение.ДатаНачалаАдресногоХраненияОстатков)";

				Запрос.УстановитьПараметр("Распоряжение", Объект.Распоряжение);

				Если Не Запрос.Выполнить().Пустой() Тогда
					Если ВыдаватьОшибки Тогда
						ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек, поэтому серии нужно указывать в разрезе упаковок. Отгрузка производилась из помещений склада-отправителя, на которых учет в разрезе складския ячеек не ведется, поэтому серии учитываются без разреза упаковок. Заполнить серии по данным отгрузки нельзя.';
						|en = 'Remaining quantity is accounted by storage bins in warehouse ""%Склад%"", that is why batch should be specified by packages. Shipment was performed from the origin warehouse warerooms where accounting by storage bins is not kept, that is why batches are not recorded by packages. You cannot fill in the batch by shipment data.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					Возврат Ложь;	
				КонецЕсли;

			КонецЕсли;

		Иначе
			Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата) Тогда
				Если ВыдаватьОшибки Тогда
					ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек, поэтому серии нужно указывать в разрезе упаковок. На складе-отправителе учет в разрезе складских ячеек не ведется, поэтому серии учитываются без разреза упаковок. Заполнить серии по данным отгрузки нельзя.';
					|en = 'Remaining quantity is accounted by storage bins in warehouse ""%Склад%"", that is why batch should be specified by packages. Accounting by storage bins in the origin warehouse is not kept, that is why batches are not recorded by packages. You cannot fill in the batch by shipment data.'");

					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 

					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;

		КонецЕсли;
		#КонецУдаления
		//++ НЕ УТ
	ИначеЕсли Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства Тогда

		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыПроизводство") 
			И Не ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура("Склад", Объект.Склад)) 
			//++ НЕ УТКА
			//++ Устарело_Производство21
			И Не НоменклатураСервер.ИспользуетсяСправочноеУказаниеСерийВМаршрутныхЛистах(, Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие)
			//-- Устарело_Производство21 
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыПроизводство22")
			//-- НЕ УТКА
			Тогда
			Если ВыдаватьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'На настроено указание серий в производственных документах.';
				|en = 'Batch specification is not set for manufacturing documents.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;	
		КонецЕсли;

		Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата)
			И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства Тогда
			Если ВыдаватьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек, поэтому серии нужно указывать в разрезе упаковок. В производстве серии заполняются без учета упаковок. Заполнить серии по данным выпуска продукции нельзя.';
				|en = 'Remaining quantity is accounted by storage bins in warehouse ""%Склад%"", that is why batch should be specified by packages. During manufacturing batches are filled in without recording packages. You cannot fill in the batch by product release data.'");

				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 

				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		//-- НЕ УТ
	ИначеЕсли Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваров
		Или Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваровУстарел Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'В операциях при приемке по возврату непринятых получателем товаров заполнение серий по распоряжению не поддерживается.';
			|en = 'Specifying batch under the reference is not supported in operations of receiving when a recipient returns unaccepted goods.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;
	Иначе

		Если Не ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура("Склад",Объект.Склад)) Тогда
			Если ВыдаватьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'В распоряжении могут быть указаны только серии, по которым учитывается себестоимость, но складе не настроено использование таких серий.';
				|en = 'Only batch according to which cost is recorded can be specified in the reference. Using such batch is not set for the warehouse.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;	
		КонецЕсли;
		
		#Удаление
		Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата) Тогда
			Если ВыдаватьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек. Серии могут быть заполнены по распоряжению только при перемещении товаров с адресного склада. По другим типам распоряжений заполнение серий на этом складе не поддерживается.';
				|en = 'Stock balance is accounted by storage bins in warehouse ""%Склад%"". Batch can be filled in against the reference only while moving goods from the bin location warehouse. Batch population against other reference types is not supported in this warehouse.'");

				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 

				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		#КонецУдаления
	КонецЕсли;

	Возврат Истина;
КонецФункции

&ИзменениеИКонтроль("ПечатьПриходногоОрдераНаТовары")
Функция РСК_ПечатьПриходногоОрдераНаТовары(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_ПриходныйОрдерНаТовары";

	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);

	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс,Представление");
	СинонимДокумента = НСтр("ru = 'Приходный ордер на товары';
	|en = 'Goods receipt'", ОбщегоНазначения.КодОсновногоЯзыка());

	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользуетсяМаркируемаяПродукция = ПриходныйОрдерНаТоварыЛокализация.ИспользуетсяМаркируемаяПродукция();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.ЗонаПриемки) КАК ПредставлениеЗоныПриемки,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Отправитель) КАК ПредставлениеПартнера,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение) КАК РаспоряжениеПредставление,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Номер
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.НомерДокументаИБ, """""""")
	|	КОНЕЦ КАК РаспоряжениеНомер,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Дата
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК РаспоряжениеДата,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Организация.Префикс
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.Организация.Префикс, """""""")
	|	КОНЕЦ КАК РаспоряжениеПрефикс,
	|	ПриходныйОрдерНаТовары.Дата,
	|	ПриходныйОрдерНаТовары.Номер,
	|	ПриходныйОрдерНаТовары.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	ПриходныйОрдерНаТовары.Исполнитель.ФизическоеЛицо КАК Исполнитель,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Помещение КАК Помещение,
	|	ПриходныйОрдерНаТовары.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ПриходныйОрдерНаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПриходныйОрдерНаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО (НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись)
	|			И ПриходныйОрдерНаТовары.Распоряжение = РеквизитыРаспоряжения.Ссылка
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.Артикул
	|		КОГДА &КолонкаКодов = ""Код""
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Артикул,
	|	ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист) КАК УпаковочныйЛист,
	#Удаление
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,	
	#КонецУдаления
	#Вставка
	//++РС Консалт: Минаков А.С. Задача 21223
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.Наименование КАК ПредставлениеНоменклатуры,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка КАК Упаковка,
	//++РС Консалт: Минаков А.С. Задача 21223
	#КонецВставки
	|	ПриходныйОрдерНаТоварыТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Серия КАК Серия,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Серия) КАК ПредставлениеСерии,
	|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПриходныйОрдерНаТоварыТовары.Количество КАК Количество,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТоварыТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Упаковка)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
	|	NULL КАК НастройкаИспользованияСерий,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК МаркируемаяПродукция
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка В (&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.Артикул,
	|	ТаблицаТоваров.ЭтоУпаковочныйЛист,
	|	ТаблицаТоваров.УпаковочныйЛист,
	|	ТаблицаТоваров.ПредставлениеНоменклатуры,
	|	ТаблицаТоваров.ПредставлениеХарактеристики,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия, 
	#Вставка
	//++РС Консалт: Минаков А.С. Задача 21223
	|	ТаблицаТоваров.Упаковка,
	//++РС Консалт: Минаков А.С. Задача 21223
	#КонецВставки
	|	ТаблицаТоваров.ПредставлениеСерии,
	|	ТаблицаТоваров.КоличествоУпаковок,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.ПредставлениеБазовойЕдиницыИзмерения,
	|	ТаблицаТоваров.ПредставлениеЕдининицыИзмеренияУпаковки,
	|	ТаблицаТоваров.НастройкаИспользованияСерий,
	|	ТаблицаТоваров.МаркируемаяПродукция,
	|	НомерСтроки
	|ИЗ
	|	ТаблицаТоваров
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаТоваров.НомерСтроки
	|ИТОГИ
	#Вставка
	//++ РС Консалт: Трофимов Евгений 19.01.2023 Задача 23137
	//e1cib/data/Документ.Задание?ref=8578bc537841a43d4c6889221b15fc6a
	|	СУММА(КоличествоУпаковок),
	|	СУММА(Количество)
	//-- КонецЗадачи 23137	
	#КонецВставки
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	МАКСИМУМ(ТаблицаТоваров.МаркируемаяПродукция) КАК ЕстьМаркируемаяПродукция
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка";


	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("КолонкаКодов", ИмяКолонкиКодов);
	Если ИспользуетсяМаркируемаяПродукция Тогда
		ОпределениеМаркируемаяПродукция = ПриходныйОрдерНаТоварыЛокализация.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("ПриходныйОрдерНаТоварыТовары.Номенклатура");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеПризнакаМаркируемаяПродукция", "ЛОЖЬ");
	КонецЕсли; 

	МассивРезультатов = Запрос.ВыполнитьПакет();

	РезультатЗапроса = МассивРезультатов[0]; // РезультатЗапроса
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать();

	РезультатЗапроса = МассивРезультатов[2]; // РезультатЗапроса
	ВыборкаПоТабличнымЧастям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	РезультатЗапроса   = МассивРезультатов[3]; // РезультатЗапроса
	ВыборкаПоМаркам    = РезультатЗапроса.Выбрать();

	ПервыйДокумент = Истина;
	Пока ВыборкаПоДокументам.Следующий() Цикл

		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;

		Если ВыборкаПоМаркам.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			ВыводитьМарки = ВыборкаПоМаркам.ЕстьМаркируемаяПродукция;
		Иначе	
			ВыводитьМарки = Ложь;
		КонецЕсли;


		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(
		ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение, ВыборкаПоДокументам.Дата);

		ВыводитьУпаковки = ИспользоватьУпаковкиНоменклатуры Или ИспользуетсяАдресноеХранение;

		// Макет получаем в цикле,т.к. ширина колонок зависит от склада и помещения в документе.
		#Удаление
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходныйОрдерНаТовары.ПФ_MXL_ПриходныйОрдерНаТовары");
		#КонецУдаления
		#Вставка
		//++ РС Консалт: Минаков А.С. Задача 20226
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходныйОрдерНаТовары.РС_ПФ_MXL_ПриходныйОрдерНаТовары");
		//++ РС Консалт: Минаков А.С. Задача 20226
		#КонецВставки

		ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьПоставщик	 	= Макет.ПолучитьОбласть("Поставщик");

		ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
		ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
		ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");

		ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");

		ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;

		ОбластьШапкаТаблицыКолонкаУпаковок 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьСтрокаТаблицыКолонкаУпаковок 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
		ОбластьПодвалТаблицыКолонкаУпаковок		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");

		ОбластьШапкаТаблицыКолонкаМаркировки 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаМаркировки");
		ОбластьСтрокаТаблицыКолонкаМаркировки 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаМаркировки");
		ОбластьПодвалТаблицыКолонкаМаркировки	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаМаркировки");

		ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");

		ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");

		Если НЕ ВыводитьКоды Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;

		Если НЕ ВыводитьУпаковки Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
			+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки; 		
		КонецЕсли;

		Если НЕ ИспользуетсяМаркируемаяПродукция Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаМаркировки").ШиринаКолонки; 		
		КонецЕсли;		  

		ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
		ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
		ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");

		ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
		ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
		ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");

		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);

		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		Если ИспользуетсяАдресноеХранение Тогда

			ТекстЗоны = НСтр("ru = 'Зона приемки:';
			|en = 'Inbound area:'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныПриемки;

		Иначе

			ТекстЗоны = "";
			ЗонаПредставление = "";

		КонецЕсли;

		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);

		СтруктураДанныхЗаголовка = Новый Структура;
		СтруктураДанныхЗаголовка.Вставить("ТекстЗаголовка", ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента));
		ОбластьЗаголовок.Параметры.Заполнить(СтруктураДанныхЗаголовка);

		Если ВыводитьМарки Тогда
			ОбластьЗаголовок.Параметры.ПризнакМаркировки = "[М]";
		КонецЕсли; 

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПартнера) Тогда
			// если не перемещение или оприходование
			ОбластьПоставщик.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьПоставщик);
		КонецЕсли;

		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("ПредставлениеСклада",
		СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.ПредставлениеСклада,ВыборкаПоДокументам.ПредставлениеПомещения));
		ПараметрыШапки.Вставить("ТекстЗоны", ТекстЗоны);
		ПараметрыШапки.Вставить("ПредставлениеЗоныПриемки", ЗонаПредставление);
		ПредставлениеВходящегоДокумента = ?(ПустаяСтрока(ВыборкаПоДокументам.НомерВходящегоДокумента),"","№ " + СокрЛП(ВыборкаПоДокументам.НомерВходящегоДокумента))
		+ ?(Не ЗначениеЗаполнено(ВыборкаПоДокументам.ДатаВходящегоДокумента),""," от " + Формат(ВыборкаПоДокументам.ДатаВходящегоДокумента,"ДЛФ=D"));
		ПараметрыШапки.Вставить("ПредставлениеВходящегоДокумента", ПредставлениеВходящегоДокумента);

		ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);

		Если Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДата)
			Или Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеНомер) Тогда
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ВыборкаПоДокументам.РаспоряжениеПредставление;
		Иначе
			РеквизитыДокумента.Дата          = ВыборкаПоДокументам.РаспоряжениеДата;
			РеквизитыДокумента.Номер         = ВыборкаПоДокументам.РаспоряжениеНомер;
			РеквизитыДокумента.Префикс       = ВыборкаПоДокументам.РаспоряжениеПрефикс;
			РеквизитыДокумента.Представление = ВыборкаПоДокументам.РаспоряжениеПредставление;

			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьШапка);

		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);

		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;

		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);

		Если ИспользуетсяМаркируемаяПродукция Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаМаркировки);
		КонецЕсли;

		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
		КонецЕсли;

		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);

		ВсегоНаименований = 0;

		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		ПерваяСтрока = Истина;
		СтрокаУпаковок = "";
		СтрокаКоличесткаУпаковок = "";
		СтрокаЕдиницИзмерений = "";
		СтрокаКоличества = "";

		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл

			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(Новый Структура("НомерСтроки", ВсегоНаименований + 1));
			#Вставка
			//++ РС Консалт: Минаков А.С. Задача 20226
			ОбластьСтрокаТаблицыНачало.Параметры.Штрихкод = РСК_ВызовСервера.НайтиШтрихкоды(
			ВыборкаПоСтрокамТЧ.Номенклатура,
			ВыборкаПоСтрокамТЧ.Характеристика,
			ВыборкаПоСтрокамТЧ.Серия,
			ВыборкаПоСтрокамТЧ.Упаковка);
			//++ РС Консалт: Минаков А.С. Задача 20226
			#КонецВставки
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);

			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;

			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ВыборкаПоСтрокамТЧ.УпаковочныйЛист;
			Иначе
				ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
				ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
				ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики,
				, // Упаковка
				ВыборкаПоСтрокамТЧ.ПредставлениеСерии,
				ДопПараметрыПредставлениеНоменклатуры);
			КонецЕсли;

			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);

			ВсегоНаименований = ВсегоНаименований + 1;

			Если ИспользуетсяМаркируемаяПродукция Тогда
				Если ВыводитьМарки И ВыборкаПоСтрокамТЧ.МаркируемаяПродукция Тогда
					ОбластьСтрокаТаблицыКолонкаМаркировки.Параметры.ПризнакМаркировки = "[М]";
				Иначе	
					ОбластьСтрокаТаблицыКолонкаМаркировки.Параметры.ПризнакМаркировки = "";
				КонецЕсли; 
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаМаркировки);
			КонецЕсли;

			Если ВыводитьУпаковки Тогда
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
					ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.ПредставлениеЕдининицыИзмеренияУпаковки = НСтр("ru = 'место';
					|en = 'place'", ОбщегоНазначения.КодОсновногоЯзыка());
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
			КонецЕсли;

			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыКонец.Параметры.ПредставлениеБазовойЕдиницыИзмерения = НСтр("ru = 'место';
				|en = 'place'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);

		КонецЦикла;

		#Вставка
		//++ РС Консалт: Трофимов Евгений 19.01.2023 Задача 23137
		//e1cib/data/Документ.Задание?ref=8578bc537841a43d4c6889221b15fc6a
		ОбластьПодвалТаблицыКолонкаУпаковок.Параметры.ИтогоУп = ВыборкаПоТабличнымЧастям.КоличествоУпаковок;		
		ОбластьПодвалТаблицыКонец.Параметры.ИтогоШт = ВыборкаПоТабличнымЧастям.Количество;
		//-- КонецЗадачи 23137		
		#КонецВставки
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);

		Если ИспользуетсяМаркируемаяПродукция Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаМаркировки);
		КонецЕсли;

		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);

		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%';
		|en = 'Total items %ВсегоНаименований%'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;

		ОбластьПодписей.Параметры.ПредставлениеОтветственного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный, ВыборкаПоДокументам.Дата);
		ОбластьПодписей.Параметры.ПредставлениеИсполнителя = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Исполнитель, ВыборкаПоДокументам.Дата);

		ТабличныйДокумент.Вывести(ОбластьПодписей);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);

	КонецЦикла;

	ТабличныйДокумент.АвтоМасштаб = Истина;

	Возврат ТабличныйДокумент;	

КонецФункции

Функция РСК_ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании) Экспорт
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйОрдерНаТовары) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "РСК_Клиент.СоздатьНаОснованииПриходныйОрдерНаТовары";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНаОснованииПриходныйОрдерНаТовары";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПриходныйОрдерНаТовары);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Ложь;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОрдернуюСхемуПриПоступлении";

		Возврат КомандаСоздатьНаОсновании

	КонецЕсли;

	Возврат Неопределено
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецФункции

&Вместо("ДанныеДокументаДляПроведения")
Функция РСК_ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры)
	
	ТаблицыДляДвижений = ПродолжитьВызов(Документ, Регистры, ДопПараметры);
	//++ РС Консалт: Минаков А.С. Задача 20226
	Если ЗначениеЗаполнено(Документ)
		И ЗначениеЗаполнено(Документ.Распоряжение)
		И (ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ЗаказПоставщику")
		Или ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")) Тогда
		
		РеквзитыНаклдадной = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Распоряжение.Склад, Распоряжение.ХозяйственнаяОперация");
		Если РеквзитыНаклдадной.РаспоряжениеХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути Тогда
			СкладНакладной = РеквзитыНаклдадной.РаспоряжениеСклад;	
			Если ТаблицыДляДвижений.Свойство("ТаблицаЗапасыИПотребности") Тогда		
				Для Каждого СтрокаТч Из ТаблицыДляДвижений.ТаблицаЗапасыИПотребности Цикл
					Если СтрокаТч.ЗакрытьГрафикПоступления > 0 Тогда
						СтрокаТч.Склад = СкладНакладной	
					КонецЕсли
				КонецЦикла	
			КонецЕсли;
			
			Если ТаблицыДляДвижений.Свойство("ТаблицаРаспределениеЗапасовДвижения") Тогда		
				Для Каждого СтрокаТч Из ТаблицыДляДвижений.ТаблицаРаспределениеЗапасовДвижения Цикл
					Если СтрокаТч.ЗакрытьГрафикПоступления > 0 Тогда
						СтрокаТч.Склад = СкладНакладной	
					КонецЕсли
				КонецЦикла	
			КонецЕсли
		КонецЕсли
	КонецЕсли;
	//++ РС Консалт: Минаков А.С. Задача 20226
	Возврат ТаблицыДляДвижений
	
КонецФункции

&После("ПринятьТоварНаСклад")
Процедура РСК_ПринятьТоварНаСклад(Запрос, ТекстыЗапроса, Регистры)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	Для Каждого Стр Из ТекстыЗапроса Цикл
		Если Стр.Представление = "ТоварыВЯчейках" Тогда
			ТекстПоиска = "ТаблицаТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)";
			Если СтрНайти(Стр.Значение, ТекстПоиска) Тогда
				Стр.Значение = СтрЗаменить(Стр.Значение, ТекстПоиска, "ТаблицаТовары.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят),ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.ТребуетсяОбработка))")	
			Иначе
				ВызватьИсключение("Ошибка при изменении запроса. Требуется обновить расширение ""РСК""")
			КонецЕсли;
			Прервать
		КонецЕсли
	КонецЦикла
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

&ИзменениеИКонтроль("ПараметрыУказанияСерий")
Функция РСК_ПараметрыУказанияСерий(Объект)

	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ПриходныйОрдерНаТовары";

	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);

	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = 
	ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад",Объект.Склад));

	ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста = Истина;

	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Объект.СкладскаяОперация);

	ПараметрыУказанияСерий.ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.Дата);

	ПараметрыУказанияСерий.ИмяТЧТовары = "Товары";
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";

	ПараметрыУказанияСерий.ПоляСвязи.Добавить("УпаковочныйЛистРодитель");

	Если ПараметрыУказанияСерий.ИспользоватьАдресноеХранение Тогда
		ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
		ПараметрыУказанияСерий.ИмяПоляКоличество = "КоличествоУпаковок";	
	КонецЕсли;

	Если Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваров Тогда
		ПараметрыУказанияСерий.ПоляСвязи.Добавить("ДокументОтгрузки");
	КонецЕсли;
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерий.ЭтоОрдер = Истина;
	ПараметрыУказанияСерий.ИмяПоляПомещение = "Помещение";

	Если Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению
		#Удаление
		Или Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.ТребуетсяОбработка
		#КонецУдаления
		Или Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.ВРаботе Тогда
		ПараметрыУказанияСерий.ПодготовкаОрдера = Истина;
	КонецЕсли;

	ПараметрыУказанияСерий.Дата = Объект.Дата;

	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Распоряжение");
	ПараметрыУказанияСерий.РегистрироватьСерии = Истина;

	Возврат ПараметрыУказанияСерий;

КонецФункции

&ИзменениеИКонтроль("ТаблицаФинансовыхСерийИзРаспоряжения")
Функция РСК_ТаблицаФинансовыхСерийИзРаспоряжения(Объект)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Назначение КАК Назначение,
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	-СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОформлениюПоступленияОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКОформлениюПоступленияОстатки.Характеристика КАК Характеристика,
	|		ТоварыКОформлениюПоступленияОстатки.Назначение КАК Назначение,
	|		ТоварыКОформлениюПоступленияОстатки.Серия КАК Серия,
	|		ТоварыКОформлениюПоступленияОстатки.КОформлениюПоступленийПоОрдерамОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(
	|				,
	|				ДокументПоступления = &Распоряжение
	|					И НЕ &ЭтоТоварыВПути
	|					И Склад = &Склад
	|					И Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК ТоварыКОформлениюПоступленияОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОформлениюПоступленияОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКОформлениюПоступленияОстатки.Характеристика КАК Характеристика,
	|		ТоварыКОформлениюПоступленияОстатки.Назначение КАК Назначение,
	|		ТоварыКОформлениюПоступленияОстатки.Серия КАК Серия,
	|		-ТоварыКОформлениюПоступленияОстатки.КОформлениюПоступленийПоНакладнымОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(
	#Вставка
	//++ РС Консалт: Трофимов Евгений 29.11.2022 Задача 21820
	//e1cib/data/Документ.Задание?ref=81f43edfcdb118474c2efc9b2af95e79
	|				&МоментПоступления
	//-- КонецЗадачи 21820	
	#КонецВставки
	|				,
	|				ДокументПоступления = &Распоряжение
	|					И &ЭтоТоварыВПути
	|					И Склад = &Склад
	|					И Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК ТоварыКОформлениюПоступленияОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОформлениюПоступления.Номенклатура,
	|		ТоварыКОформлениюПоступления.Характеристика,
	|		ТоварыКОформлениюПоступления.Назначение,
	|		ТоварыКОформлениюПоступления.Серия,
	|		ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерам
	|			ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерам
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению КАК ТоварыКОформлениюПоступления
	|	ГДЕ
	|		ТоварыКОформлениюПоступления.Регистратор = &ТекущийПриходныйОрдер) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Серия
	|
	|ИМЕЮЩИЕ
	|	-СУММА(ВложенныйЗапрос.Количество) > 0";

	ОперацииТоварыВПути = Новый Массив();
	ОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	ОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	ОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
	ЭтоТоварыВПути = ОперацииТоварыВПути.Найти(Объект.ХозяйственнаяОперация) <> Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Распоряжение", Объект.Распоряжение);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	#Вставка
	//++ РС Консалт: Трофимов Евгений 29.11.2022 Задача 21820
	//e1cib/data/Документ.Задание?ref=81f43edfcdb118474c2efc9b2af95e79
	Если ЭтоТоварыВПути И ЗначениеЗаполнено(Объект.Распоряжение) 
		И РегистрыСведений.реа_ПредопределенныеЗначения.Значение("Скорректировать алгоритм подбора серий для ордеров", Истина) Тогда
		Запрос.УстановитьПараметр("Склад", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Распоряжение, "Склад"));
		МоментПоступления = ПолучитьМоментПоступленияПоПриобретению(Объект.Распоряжение);
		Если ЗначениеЗаполнено(МоментПоступления) Тогда
			Запрос.УстановитьПараметр("МоментПоступления", Новый Граница(МоментПоступления, ВидГраницы.Исключая));
		Иначе
			Запрос.УстановитьПараметр("МоментПоступления", '3999.12.31 23:59:59');
		КонецЕсли;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МоментПоступления", "");
	КонецЕсли;
	//-- КонецЗадачи 21820	
	#КонецВставки
	Запрос.УстановитьПараметр("ТекущийПриходныйОрдер", Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоТоварыВПути", ЭтоТоварыВПути);
	Серии = Запрос.Выполнить().Выгрузить();

	Возврат Серии;

КонецФункции

Функция ПолучитьМоментПоступленияПоПриобретению(Распоряжение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровНаСклад.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровНаСклад.МоментВремени КАК МоментВремени
		|ИЗ
		|	Документ.ПоступлениеТоваровНаСклад КАК ПоступлениеТоваровНаСклад
		|ГДЕ
		|	ПоступлениеТоваровНаСклад.Распоряжение = &Распоряжение
		|	И ПоступлениеТоваровНаСклад.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени";
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.МоментВремени;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции // ПолучитьПоступлениеПоПриобретению()

&ИзменениеИКонтроль("ЗаполнитьСерииПоРаспоряжению")
Функция РСК_ЗаполнитьСерииПоРаспоряжению(Объект, ВыдаватьОшибки)

	Если Не ВозможноЗаполнениеСерийПоРаспоряжению(Объект, ВыдаватьОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению Тогда
		Серии = ТаблицаСерийПоОтгрузкеПриПеремещении(Объект);
	ИначеЕсли Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства Тогда
		Серии = ТаблицаСерийВыпущеннойПродукции(Объект);
	ИначеЕсли Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПрочемуОприходованию Тогда
		Серии = ТаблицаСерийПриПриемкеПоПрочемуОприходованию(Объект);
	Иначе
		Серии = ТаблицаФинансовыхСерийИзРаспоряжения(Объект);
	КонецЕсли;

	Если Серии.Количество() = 0 Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'По распоряжению нет серий, которые можно перенести в ордер.';
			|en = 'There are no batch for the reference which can be transferred to the note.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары);

	НоменклатураСервер.ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, Серии,, Истина);
	#Вставка
	//++ РС Консалт: Трофимов Евгений 22.12.2022 Задача 22653
	//e1cib/data/Документ.Задание?ref=9720046cd6bb3f8b4eb7614e2de73ed4
	//В типовом алгоритме на текущий момент заполнена таблица товаров с упаковкой и количеством
	//В таблице "Серии" уже есть незаполненная колонка "Упаковка".
	//Цель её заполнить, чтобы правильно отработала процедура НоменклатураСервер.ЗаполнитьСерииВТЧПоТаблицеСерий 
	//которая ищет по ключам "Номенклатура,Характеристика,УпаковочныйЛистРодитель,Упаковка,Назначение"
	Если РегистрыСведений.реа_ПредопределенныеЗначения.Значение("Скорректировать алгоритм подбора серий для ордеров 2", Истина) Тогда
		Если Серии.Колонки.Найти("Упаковка") <> Неопределено Тогда
			ЗаполняющиеСерии = Серии.Скопировать();
			Серии.Очистить();
			УпаковкиКРаспределению = Объект.Товары.Выгрузить(,"Номенклатура,Характеристика,Упаковка,Назначение,Количество");
			ФильтрУпаковок = Новый Структура("Номенклатура,Характеристика,Назначение");
			Для Каждого СтрСерии Из ЗаполняющиеСерии Цикл
				ЗаполнитьЗначенияСвойств(ФильтрУпаковок, СтрСерии);
				НайденныеУпаковки = УпаковкиКРаспределению.НайтиСтроки(ФильтрУпаковок);
				Для Каждого НайденнаяУпаковка Из НайденныеУпаковки Цикл
					Если СтрСерии.Количество <= 0 Тогда
						Прервать;
					КонецЕсли;
					Если НайденнаяУпаковка.Количество <= 0 Тогда
						Продолжить;
					КонецЕсли;
					МожноРаспределить = Мин(СтрСерии.Количество, НайденнаяУпаковка.Количество);
					НС = Серии.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрСерии);
					НС.Количество = МожноРаспределить;
					НС.Упаковка = НайденнаяУпаковка.Упаковка;
					СтрСерии.Количество = СтрСерии.Количество - МожноРаспределить;
					НайденнаяУпаковка.Количество = НайденнаяУпаковка.Количество - МожноРаспределить;
				КонецЦикла;
				Если СтрСерии.Количество > 0 Тогда
					НС = Серии.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрСерии);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//-- КонецЗадачи 22653	
	#КонецВставки

	Действия = Новый Структура;
	Действия.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	#Удаление
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено Тогда 
		Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	Иначе
		Действия.Вставить("ПересчитатьКоличествоУпаковок");
	КонецЕсли;
	#КонецУдаления
	#Вставка
	//++ РС Консалт: Трофимов Евгений 22.12.2022 Задача 22653
	//e1cib/data/Документ.Задание?ref=9720046cd6bb3f8b4eb7614e2de73ed4
	Если РегистрыСведений.реа_ПредопределенныеЗначения.Значение("Скорректировать алгоритм подбора серий для ордеров 2", Истина) Тогда
		Действия.Вставить("ПересчитатьКоличествоУпаковок");
	Иначе //Типовой алгоритм
		Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено Тогда 
			Действия.Вставить("ПересчитатьКоличествоЕдиниц");
		Иначе
			Действия.Вставить("ПересчитатьКоличествоУпаковок");
		КонецЕсли;
	КонецЕсли;
	//-- КонецЗадачи 22653	
	#КонецВставки
	НоменклатураСервер.ЗаполнитьСерииВТЧПоТаблицеСерий(Объект,
	ПараметрыУказанияСерий,
	Серии,
	Действия);
	Возврат Истина;
КонецФункции

