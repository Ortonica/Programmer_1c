
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат
	КонецЕсли;
	
	Склад = Параметры.Склад;
	ЗаданиеНаПеревозку = Параметры.ЗаданиеНаПеревозку;
	
	ОбновитьСписокРаспоряженийНаДоставку()
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ГуидВладельца = ВладелецФормы.УникальныйИдентификатор
	
КонецПроцедуры

&НаСервере
Функция СохранитьРезультаты()
	
	Товары = ТоварыРаспоряженийКДоставке.Выгрузить(,
	"Распоряжение,Склад,ПолучательОтправитель,Номенклатура,Характеристика,Назначение,Серия,Количество,ВсеТовары").СкопироватьКолонки();
	
	Распоряжения = РаспоряженияНаДоставку.Выгрузить(,"Распоряжение,РСК_Накладная,РСК_Транзитная,Склад,Вес,Объем,ВремяС,ВремяПо,ПолучательОтправитель,Перевозчик,ДополнительнаяИнформация,
	|Зона,Адрес,АдресЗначенияПолей").СкопироватьКолонки();
	
	СтруктураПоиска = Новый Структура("КлючСвязи");
	ВыделенныеСтроки = Элементы.РаспоряженияНаДоставку.ВыделенныеСтроки;
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		НайденнаяСтрокаРаспоряжение = РаспоряженияНаДоставку.НайтиПоИдентификатору(Идентификатор);
		СтрокаРаспоряжение = Распоряжения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспоряжение, НайденнаяСтрокаРаспоряжение);
		СтруктураПоиска.КлючСвязи = НайденнаяСтрокаРаспоряжение.КлючСвязи;
		
		НайденныеСтрокиТоваров = ТоварыРаспоряженийКДоставке.НайтиСтроки(СтруктураПоиска);
		Для Каждого Стр Из НайденныеСтрокиТоваров Цикл
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), Стр)
		КонецЦикла
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("АдресРаспоряжений", ПоместитьВоВременноеХранилище(Распоряжения, ГуидВладельца));
	СтруктураВозврата.Вставить("АдресТоваров", ПоместитьВоВременноеХранилище(Товары, ГуидВладельца));
	СтруктураВозврата.Вставить("Транзит", Истина);
	
	Возврат СтруктураВозврата
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура СкладОтборПриИзменении(Элемент)
	
	ОбновитьСписокРаспоряженийНаДоставку()
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыездаПриИзменении(Элемент)
	
	ОбновитьСписокРаспоряженийНаДоставку()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспоряженияНаДоставку

&НаКлиенте
Процедура РаспоряженияНаДоставкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Результат = СохранитьРезультаты();
	ОповеститьОВыборе(Результат)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	Если Элементы.РаспоряженияНаДоставку.ТекущиеДанные = Неопределено Тогда
		Возврат
	Иначе
		Результат = СохранитьРезультаты();
		ОповеститьОВыборе(Результат)
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиДоставки(Команда)
	
	ОбновитьСписокРаспоряженийНаДоставку()
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
Процедура ОбновитьСписокРаспоряженийНаДоставку()
	
	Запрос = Новый Запрос(	
	"ВЫБРАТЬ
	|	ИСТИНА КАК РСК_Транзитная,
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК ЗаданиеНаПеревозку,
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК Распоряжение,
	|	ЗаданиеНаПеревозкуРаспоряжения.РСК_Накладная КАК РСК_Накладная,
	|	ЗаданиеНаПеревозкуРаспоряжения.Склад КАК Склад,
	|	ЗаданиеНаПеревозкуРаспоряжения.Вес КАК Вес,
	|	ЗаданиеНаПеревозкуРаспоряжения.Объем КАК Объем,
	|	ЗаданиеНаПеревозкуРаспоряжения.ВремяС КАК ВремяС,
	|	ЗаданиеНаПеревозкуРаспоряжения.ВремяПо КАК ВремяПо,
	|	ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель КАК ПолучательОтправитель,
	|	ЗаданиеНаПеревозкуРаспоряжения.Перевозчик КАК Перевозчик,
	|	ЗаданиеНаПеревозкуРаспоряжения.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ЗаданиеНаПеревозкуМаршрут.Зона КАК Зона,
	|	ЗаданиеНаПеревозкуМаршрут.Адрес КАК Адрес,
	|	ЗаданиеНаПеревозкуМаршрут.АдресЗначенияПолей КАК АдресЗначенияПолей,
	|	ТоварыКДоставке.Номенклатура КАК Номенклатура,
	|	ТоварыКДоставке.Характеристика КАК Характеристика,
	|	ТоварыКДоставке.Назначение КАК Назначение,
	|	ТоварыКДоставке.Серия КАК Серия,
	|	ТоварыКДоставке.Количество КАК Количество,
	|	ТоварыКДоставке.ВсеТовары КАК ВсеТовары
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ЗаданиеНаПеревозку.Ссылка
	|			И (НЕ ЗаданиеНаПеревозкуРаспоряжения.Склад = &Склад)
	|			И (НЕ ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &ЗаданиеНаПеревозку)
	|			И (ЗаданиеНаПеревозку.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Отправлено), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыто)))
	|			И (НЕ ЗаданиеНаПеревозкуРаспоряжения.РСК_Накладная В (&ПустыеЗначения))
	|			И (НЕ ЗаданиеНаПеревозку.РСК_ВыдачаТСР)
	|			И (&БезОтбораПоСкладу
	|				ИЛИ ЗаданиеНаПеревозку.Склад = &СкладОтбор)
	|			И (&БезОтбораПоДате
	|				ИЛИ НАЧАЛОПЕРИОДА(ЗаданиеНаПеревозку.ДатаВремяРейсаПланС, ДЕНЬ) = &ДатаВыезда)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ЗаданиеНаПеревозкуМаршрут.Ссылка
	|			И ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи = ЗаданиеНаПеревозкуМаршрут.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ТоварыКДоставке.ЗаданиеНаПеревозку
	|			И ЗаданиеНаПеревозкуРаспоряжения.Склад = ТоварыКДоставке.Склад
	|			И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение = ТоварыКДоставке.Распоряжение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаданиеНаПеревозку,
	|	Распоряжение,
	|	РСК_Накладная");
	
	ПустыеЗначения = Новый Массив(3);
	ПустыеЗначения[0] = Неопределено;
	ПустыеЗначения[1] = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	ПустыеЗначения[2] = Документы.ПеремещениеТоваров.ПустаяСсылка();
	
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ПустыеЗначения", ПустыеЗначения);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("БезОтбораПоСкладу", Не ЗначениеЗаполнено(СкладОтбор));
	Запрос.УстановитьПараметр("СкладОтбор", СкладОтбор);
	Запрос.УстановитьПараметр("БезОтбораПоДате", Не ЗначениеЗаполнено(ДатаВыезда));
	Запрос.УстановитьПараметр("ДатаВыезда", ДатаВыезда);
	
	ТекущееЗадание = Неопределено;
	ТекущееРаспоряжение = Неопределено;
	ТекущийСклад = Неопределено;
	
	КлючСвязи = 0;
	
	РаспоряженияНаДоставку.Очистить();
	ТоварыРаспоряженийКДоставке.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл 
		
		Если Не Выборка.ЗаданиеНаПеревозку = ТекущееЗадание
			Или Не Выборка.Распоряжение = ТекущееРаспоряжение
			Или Не Выборка.Склад = ТекущийСклад Тогда
			
			КлючСвязи = КлючСвязи + 1;
			
			ТекущееЗадание = Выборка.ЗаданиеНаПеревозку;
			ТекущееРаспоряжение = Выборка.Распоряжение;
			ТекущийСклад = Выборка.Склад;
						
			НоваяСтрока = РаспоряженияНаДоставку.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.КлючСвязи = КлючСвязи
		КонецЕсли; 
		
		НоваяСтрока = ТоварыРаспоряженийКДоставке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КлючСвязи = КлючСвязи		
	КонецЦикла	

КонецПроцедуры

#КонецОбласти

#КонецОбласти