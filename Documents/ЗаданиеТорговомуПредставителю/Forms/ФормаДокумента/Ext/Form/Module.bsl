&НаСервере
Процедура САВ_ЗаполнитьУслугиПоТоваруПослеНаСервере()   
	Объект.САВ_Услуги.Очистить();	
	ТЗ=Новый ТаблицаЗначений;
	ТЗ=Объект.Товары.Выгрузить();
	Для Каждого Колонка Из ТЗ Цикл
        ТОВ=Объект.САВ_Услуги.Добавить();
		ТОВ.Номенклатура=Колонка.Номенклатура;
		ТОВ.Количество=Колонка.Количество;
		НаименованиеУслуги="Выдача: "+Тов.Номенклатура.ВидНоменклатуры.Наименование;
		ТекЭл=Справочники.Номенклатура.НайтиПоНаименованию(НаименованиеУслуги);
		Если  Не ЗначениеЗаполнено(ТекЭл) Тогда 
			 УстановитьПривилегированныйРежим(Истина);
			НЭ=Справочники.Номенклатура.СоздатьЭлемент();
			НЭ.Наименование=НаименованиеУслуги;
			НЭ.Родитель=Справочники.Номенклатура.НайтиПоКоду("УП-00000045");
			НЭ.ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот;
			НЭ.НаименованиеПолное=НаименованиеУслуги;
			НЭ.Качество=Перечисления.ГрадацииКачества.Новый;
			НЭ.СтавкаНДС=Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
			НЭ.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Услуга;
			НЭ.КоэффициентЕдиницыДляОтчетов=1; 
			НЭ.ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги");
			НЭ.ИспользованиеХарактеристик=Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
			НЭ.Записать();  
			 УстановитьПривилегированныйРежим(Ложь);
			ТОВ.Номенклатура=Справочники.Номенклатура.НайтиПоНаименованию(НаименованиеУслуги);
		Иначе
			Тов.Номенклатура=ТекЭл;
		КонецЕсли;  
		Тов.Цена=ЦенаКА(Объект.Партнер,Справочники.Номенклатура.НайтиПоНаименованию(НаименованиеУслуги));
		Тов.Сумма=Тов.Цена*Тов.Количество
	КонецЦикла; 
	    ТЗн=Объект.САВ_Услуги.Выгрузить();
		ТЗн.Свернуть("Номенклатура,Цена,Содержание,Комментарий,ЗонаДоставки","Количество,Сумма");
		Объект.САВ_Услуги.Загрузить(ТЗн);
КонецПроцедуры

&НаКлиенте
Процедура САВ_ЗаполнитьУслугиПоТоваруПосле(Команда)
	САВ_ЗаполнитьУслугиПоТоваруПослеНаСервере(); 
	
	Элементы.САВ_УслугиЦеныКонтрагента.Доступность=Ложь;
КонецПроцедуры

Функция ЦенаКА(Партнер, Номенклатура)
	Запрос=Новый Запрос;  
	//ЦеныНоменклатурыПоставщиков
	Запрос.Текст="ВЫБРАТЬ
		|	ЦНП.Цена
		|ИЗ
		|  	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
        |       &ДатаДок,
        |       Партнер = &Партнер И
        |       Номенклатура = &Номенклатура
        |    )КАК ЦНП";
	Запрос.УстановитьПараметр("ДатаДок",Объект.Дата);
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура САВ_ЦеныКонтрагентаПослеНаСервере()
	ТЗ=Новый ТаблицаЗначений;
	ТЗ=Объект.САВ_Услуги.Выгрузить(); 
	
	Доц=Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
	ДОЦ.Партнер=Объект.Партнер;
	Доц.Дата=НачалоДня(Объект.Дата);
			
	Для Каждого Колонка Из ТЗ Цикл 
		НСТ=Доц.Товары.Добавить();
		НСТ.Цена=Колонка.Цена;
		НСТ.Номенклатура=Колонка.Номенклатура;
		
		ВЦ=Справочники.ВидыЦенПоставщиков.НайтиПоНаименованию(Объект.Партнер.Наименование);
		Если НЕ ЗначениеЗаполнено(ВЦ) Тогда
			НВЦ=Справочники.ВидыЦенПоставщиков.СоздатьЭлемент();
			НВЦ.Владелец=Объект.Партнер; 
			НВЦ.Наименование=Объект.Партнер.Наименование;
			НВЦ.Валюта=Справочники.Валюты.НайтиПоКоду("643");
			НВЦ.ЦенаВключаетНДС=Истина;
			НВЦ.ДоступноДляЗакупки=Истина;
			НВЦ.Записать();
		КонецЕсли;
		    НСТ.ВидЦеныПоставщика=Справочники.ВидыЦенПоставщиков.НайтиПоНаименованию(Объект.Партнер.Наименование);
		
		
	КонецЦикла;
		    ДОЦ.Записать(РежимЗаписиДокумента.Проведение); 
				
		
			
			
			
			
			
			
			
КонецПроцедуры

&НаКлиенте
Процедура САВ_ЦеныКонтрагентаПосле(Команда)
	САВ_ЦеныКонтрагентаПослеНаСервере();
	Элементы.САВ_УслугиЦеныКонтрагента.Доступность=Ложь;
КонецПроцедуры 


&НаКлиенте
Процедура САВ_САВ_УслугиКоличествоПриИзмененииПосле(Элемент) 
	 СтрокаТЧ = Элементы.САВ_Услуги.ТекущиеДанные;
    СтрокаТЧ.Сумма = СтрокаТЧ.Цена * СтрокаТЧ.Количество; 
	Элементы.САВ_УслугиЦеныКонтрагента.Доступность=Истина;
КонецПроцедуры


&НаКлиенте
Процедура САВ_УчетПоЗонамДоставкиПриИзмененииПосле(Элемент)
	
	//Элементы.САВ_УслугиКоличество.Видимость=НЕ Объект.УчетПоЗонамДоставки;
	Элементы.САВ_УслугиЗонаДоставки.Видимость=Объект.УчетПоЗонамДоставки;
	Элементы.САВ_УслугиСумма.Видимость=НЕ Объект.УчетПоЗонамДоставки; 
	Элементы.САВ_УслугиЦеныКонтрагента.Видимость=НЕ Объект.УчетПоЗонамДоставки;
	
КонецПроцедуры


&НаКлиенте
Процедура САВ_ПриОткрытииПосле(Отказ)
	//Элементы.САВ_УслугиКоличество.Видимость=НЕ Объект.УчетПоЗонамДоставки;
	Элементы.САВ_УслугиЗонаДоставки.Видимость=Объект.УчетПоЗонамДоставки;
	Элементы.САВ_УслугиСумма.Видимость=НЕ Объект.УчетПоЗонамДоставки;   
		Элементы.САВ_УслугиЦеныКонтрагента.Видимость=НЕ Объект.УчетПоЗонамДоставки;
    ОбновитьПараметрыОтбора();   
	
КонецПроцедуры




&НаКлиенте
Процедура ОткрытьФормуВО(ВидОснования)
	
	ПараметрыФормы = Новый Структура();
	
	СтруктураОтбора = Новый Структура();
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		СтруктураОтбора.Вставить("Партнер", Объект.Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;    
	
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;

	
	//Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
	//	СтруктураОтбора.Вставить("Соглашение", Объект.Соглашение);
	//КонецЕсли;
	
	Если СтруктураОтбора.Количество()>0 Тогда
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	Если ВидОснования = "ДоговорКА" Тогда
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
	Если ВидОснования = "КП" Тогда
		//ОткрытьФорму("Документ.КоммерческоеПредложениеКлиенту.МножественныйОтборСписка", ПараметрыФормы, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ОткрытьФорму("Документ.КоммерческоеПредложениеКлиенту.ФормаВыбора", ПараметрыФормы,ЭтаФорма); 
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура САВ_ЗаполнитьЗаданиеПоДоговоруПосле(Команда) 
	Объект.Товары.Очистить();

		ОткрытьФормуВО("ДоговорКА");

КонецПроцедуры


&НаКлиенте
Процедура САВ_ОбработкаВыбораВместо(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора" Тогда  
		Если ИсточникВыбора.РежимОткрытияОкна="Блокировать окно владельца" Тогда
			ЗаполнениеПоДоговору(ВыбранноеЗначение);  
		Иначе
			Объект.ДоговорСИ=ВыбранноеЗначение;
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.САВ_ФормаВыбора" Тогда
		  ЗаполнениеПоКП(ВыбранноеЗначение);
		
		
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
	//ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.СоглашенияСКлиентами.Форма.ФормаВыбора" Тогда
	//	Объект.СоглашениеСИ=ВыбранноеЗначение;
	Иначе
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаданиеТорговомуПредставителю")
			ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
				
				Если Объект.Товары.Количество()>0 Тогда
					ТекстВопроса = НСтр("ru = 'Ранее заполненный состав задания будет очищен. Продолжить?';
										|en = 'Job content filled in earlier will be cleared. Continue?'");
					Структура = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
					ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, Структура);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
				Иначе
					ОбработатьЗаполнениеНаОсновании(ВыбранноеЗначение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры


&НаСервере
Процедура ЗаполнениеПоДоговору(ВыбранноеЗначение)
	
	//ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
		|	Дог.Номенклатура, 
		|	Дог.Характеристика, 
		|	"""" КАК ХарактеристикиИспользуются, 
		|	Дог.Упаковка, 
		|	Дог.ВидЦены, 
		|	Дог.Цена, 
		|	Дог.ПроцентРучнойСкидки,
		|	Дог.КоличествоУпаковок
		|ИЗ
		| 	Документ.ЗаказКлиента.Товары КАК Дог
		|ГДЕ
		|   Дог.Ссылка.Договор=&Договор";
	Запрос.УстановитьПараметр("Договор",ВыбранноеЗначение);
	ТаблицаТоваров=Запрос.Выполнить().Выгрузить();
	
	
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, ВидЦены, Цена, ПроцентРучнойСкидки");
		ТекущаяСтрока.КоличествоУпаковокПлан = СтрокаТовара.КоличествоУпаковок;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);		
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий,КэшированныеЗначения );
		
	КонецЦикла;
	
	СтруктураВариантОформленияПродажи = Новый Структура("Номенклатура", "ВариантОформленияПродажи");
	СтруктураХарактеристикиИспользуются = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	
	СтруктураЗаполнитьПризнаки = Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
			СтруктураХарактеристикиИспользуются,
			СтруктураВариантОформленияПродажи);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,
			СтруктураЗаполнитьПризнаки);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПоКП(ВыбранноеЗначение)
	
	//ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
		|	Дог.Номенклатура, 
		|	Дог.Характеристика, 
		|	"""" КАК ХарактеристикиИспользуются, 
		|	Дог.ЕдиницаИзмерения КАК Упаковка, 
		|	Дог.ВидЦены, 
		|	Дог.Цена, 
		|	Дог.ПроцентРучнойСкидки,
		|	Дог.Количество как КоличествоУпаковок
		|ИЗ
		| 	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Дог
		|ГДЕ
		|   Дог.Ссылка=&Договор";
	Запрос.УстановитьПараметр("Договор",ВыбранноеЗначение);
	ТаблицаТоваров=Запрос.Выполнить().Выгрузить();
	
	
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, ВидЦены, Цена, ПроцентРучнойСкидки");
		ТекущаяСтрока.КоличествоУпаковокПлан = СтрокаТовара.КоличествоУпаковок;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);		
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий,КэшированныеЗначения );
		
	КонецЦикла;
	
	СтруктураВариантОформленияПродажи = Новый Структура("Номенклатура", "ВариантОформленияПродажи");
	СтруктураХарактеристикиИспользуются = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	
	СтруктураЗаполнитьПризнаки = Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
			СтруктураХарактеристикиИспользуются,
			СтруктураВариантОформленияПродажи);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,
			СтруктураЗаполнитьПризнаки);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры


&НаСервере
Процедура САВ_ТоварыНоменклатураПриИзмененииПослеНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура САВ_ТоварыНоменклатураПриИзмененииПосле(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные; 
    ТекДанные.НоменклатураКлиента = ТекстНоменклатуры(ТекДанные.Номенклатура);

	
	САВ_ТоварыНоменклатураПриИзмененииПослеНаСервере();
КонецПроцедуры


Функция ТекстНоменклатуры(Ном)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
		|	НП.Ссылка КАК Номенклатура	
		|ИЗ Справочник.НоменклатураКонтрагентов КАК НП
		|ГДЕ 
		|	НП.Владелец=&Партнер 
		|И НП.Номенклатура=&Номенклатура";
	Запрос.УстановитьПараметр("Партнер",Объект.Партнер);
	Запрос.УстановитьПараметр("Номенклатура",Ном);
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
	
	Возврат Результат.Номенклатура;
Иначе
	Возврат "";
КонецЕсли;

		
	КонецФункции


&НаСервере
	Процедура САВ_ЗаполнитьНоменклатуруПартнераПослеНаСервере()
Запрос = Новый Запрос(
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    НП.Наименование КАК Наименование,
	|    НП.Номенклатура КАК Номенклатура,
	|	НП.Ссылка

    |ИЗ Справочник.НоменклатураКонтрагентов КАК НП
    |ГДЕ
    |    НП.Номенклатура В(&СписокНоменклатуры)
	|И
	|	НП.Владелец=&Партнер"
    );
    Запрос.УстановитьПараметр("СписокНоменклатуры",Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Партнер",Объект.Партнер);
    Выборка = Запрос.Выполнить().Выбрать(); 
	ФильтрТЗ = Новый Структура;
	Для Каждого Стр Из Объект.Товары Цикл  
	ФильтрТЗ.Очистить();
   ФильтрТЗ.Вставить("Номенклатура",Стр.Номенклатура);
        Если Выборка.НайтиСледующий(Стр.Номенклатура,"номенклатура") Тогда
            Стр.НоменклатураКлиента = Выборка.Ссылка;
        Иначе
            Стр.НоменклатураКлиента = "";
        КонецЕсли;
    КонецЦикла;	КонецПроцедуры
	
	Функция НайтиПартнера(Польз)
		Возврат Польз.ФизическоеЛицо.Партнер;
	КонецФункции
	

&НаКлиенте
	Процедура САВ_ЗаполнитьНоменклатуруПартнераПосле(Команда)
		САВ_ЗаполнитьНоменклатуруПартнераПослеНаСервере();
	КонецПроцедуры

&НаСервере
Функция СПоставщиком()
	Возврат Перечисления.ТипыДоговоров.СПоставщиком;
КонецФункции


&НаКлиенте
	Процедура САВ_ДоговорСИНачалоВыбораПосле(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		Попытка
		        СтандартнаяОбработка = Ложь;    
    ПараметрыФормы = Новый Структура;
    
    Отборы = Новый Структура;
    Отборы.Вставить("Партнер", НайтиПартнера(Объект.ТорговыйПредставитель));
    Отборы.Вставить("Организация", Объект.Организация);
    Отборы.Вставить("ТипДоговора", СПоставщиком());
    ПараметрыФормы.Вставить("Отбор", Отборы);
    ПараметрыФормы.Вставить("РежимВыбора", Истина);
        ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
    
    ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.Независимый); 
Исключение
	КонецПопытки;

	КонецПроцедуры




&НаКлиенте
	Процедура САВ_ЗаполнитьПоКППосле(Команда)
		Объект.Товары.Очистить();

		ОткрытьФормуВО("КП");
	КонецПроцедуры

	
	&НаСервере
	Функция НайтиСИ(Склад) 
		Если Склад.Поклажедержатель = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
			|	Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Юр
			|ГДЕ
			|	Юр.ФизическоеЛицо = &Партнер";
		Запрос.УстановитьПараметр("Партнер",Склад.Поклажедержатель);
		Рез=Запрос.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда
			Возврат Рез.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции
	
&НаКлиенте
	Процедура САВ_СкладПриИзмененииПосле(Элемент)
		Объект.ТорговыйПредставитель=НайтиСИ(Объект.Склад);
		Объект.ДоговорСИ="";
		ОбновитьПараметрыОтбора();
	КонецПроцедуры  

&НаСервереБезКонтекста 
Функция ЗначениеРеквизита(Ссылка,ИмяРеквизита) 
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,ИмяРеквизита);	
КонецФункции


&НаСервереБезКонтекста
&Вместо("ВозможныКоллизииСМобильнымПриложением")
	Функция РСК_ВозможныКоллизииСМобильнымПриложением(ДокументСсылка)
		// Вставить содержимое метода.
		
		Возврат Ложь;
	КонецФункции

//++Конарев корректировка функционала условий обслуживания
&НаКлиенте
Процедура ОбновитьПараметрыОтбора()
	СоисполнительКонтрагент = ЗначениеРеквизита(Объект.Склад,"Поклажедержатель");
	Если ЗначениеЗаполнено(СоисполнительКонтрагент) Тогда
		СоисполнительПартнер = ЗначениеРеквизита(СоисполнительКонтрагент,"Партнер");
	Иначе
		СоисполнительПартнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("УсловияОбслуживанияПриИзмененииСервер")
Процедура РСК_УсловияОбслуживанияПриИзмененииСервер()
	
	#Удаление
	Соглашение   = Объект.Соглашение;
	#КонецУдаления
	ГрафикОплаты = Объект.ГрафикОплаты;

	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУсловиямОбслуживания();
	ЗначениеВДанныеФормы(ДокументПродажи,Объект);
	
	#Удаление
	Если ИспользоватьСоглашенияСКлиентами 
		И Соглашение <> Объект.Соглашение И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПриИзмененииСоглашенияСервер(Ложь);
	КонецЕсли;
	#КонецУдаления

КонецПроцедуры
//--

//Сторожук 21.12.22 по ТЗ Соболевой О.В.
&НаКлиенте
Процедура РСК_ПередЗаписьюПосле(Отказ, ПараметрыЗаписи)
	Если Объект.Сделка=Неопределено И Объект.Дата>'20230101' Тогда
		Сообщить("Не указана сделка предложения");
		Отказ=Истина;
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_КоммерческоеПредложениеКлиентуНачалоВыбораПосле(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;    
	ПараметрыФормы = Новый Структура;
	
	Отборы = Новый Структура;
	Отборы.Вставить("Сделка", Объект.Сделка);
	ПараметрыФормы.Вставить("Отбор", Отборы);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Документ.КоммерческоеПредложениеКлиенту.ФормаВыбора",ПараметрыФормы,Элементы.КоммерческоеПредложениеКлиенту,,,, Неопределено, РежимОткрытияОкнаФормы.Независимый); 

КонецПроцедуры
//--

