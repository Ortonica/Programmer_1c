
&ИзменениеИКонтроль("СформироватьПечатнуюФормуАктСверкиВзаиморасчетов")
Функция РСК_СформироватьПечатнуюФормуАктСверкиВзаиморасчетов(МассивОбъектов, ОбъектыПечати, ДляОтладки)

	УстановитьПривилегированныйРежим(Истина);
	НастройкиПечати = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
							КлючОбъектаПользовательскихНастроек(),
							"НастройкиПечати");
	Если НастройкиПечати = Неопределено Тогда
		НастройкиПечати = НастройкиПечатиПоУмолчанию();
	КонецЕсли;
	Если ТипЗнч(ДляОтладки) = Тип("Структура") Тогда
		НастройкиПечати.Вставить("ДляОтладки", ДляОтладки);
	КонецЕсли;
	
	ЗапросДанныеНаПечать = ЗапросДанныеНаПечать(МассивОбъектов, НастройкиПечати);
	РезультатЗапроса = ЗапросДанныеНаПечать.Выполнить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	ДанныеСверки = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого ДанныеДокумента Из ДанныеСверки.Строки Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СверкаВзаиморасчетов.ПФ_MXL_АктСверкиВзаимныхРасчетов"); // ТабличныйДокумент - 
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		#Область ШапкаДокумента
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеДокумента.ДокументСсылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеДокумента, НСтр("ru = 'Акт сверки взаимных расчетов';
																											|en = 'AR/AP reconciliation statement'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ЕстьОстаткиОборотыЗаПериод = ДанныеДокумента.ЕстьОбороты ИЛИ ДанныеДокумента.НачальноеСальдоДт <> 0 ИЛИ ДанныеДокумента.НачальноеСальдоКт <> 0
			ИЛИ ДанныеДокумента.КонечноеСальдоДт <> 0 ИЛИ ДанныеДокумента.КонечноеСальдоКт <> 0;
		
		Если ДанныеДокумента.НачалоПериода = '00010101' Тогда
			
			ПредставлениеПериода = СтрШаблон(НСтр("ru = 'по состоянию на %1';
													|en = 'as on %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
			ПредставлениеПериодаРасчетов = СтрШаблон(НСтр("ru = 'По состоянию на %1';
															|en = 'As on %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		Иначе
			
			ПредставлениеПериода = ПредставлениеПериода(ДанныеДокумента.НачалоПериода, КонецДня(ДанныеДокумента.КонецПериода));

			ПервыйСимволПредставлениеПериода = Лев(ПредставлениеПериода, 1);
			Если  КодСимвола(ПервыйСимволПредставлениеПериода) >= 48
				И КодСимвола(ПервыйСимволПредставлениеПериода) <= 57 Тогда
				ПредставлениеПериода = СтрШаблон(НСтр("ru = 'за период: %1';
														|en = 'for the period: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеПериода);
				
			Иначе
				ПредставлениеПериода = СтрШаблон(НСтр("ru = 'за %1';
														|en = 'for %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеПериода);
				
			КонецЕсли;
			
			ШаблонПериодаРасчетов = НСтр("ru = 'В период с %1 по %2 были осуществлены следующие расчеты';
										|en = 'In the period from %1 to %2 the following settlements were made'", ОбщегоНазначения.КодОсновногоЯзыка())+":";
			Если НЕ ЕстьОстаткиОборотыЗаПериод Тогда
				ШаблонПериодаРасчетов = НСтр("ru = 'В период с %1 по %2 операции по расчетам не производились.';
											|en = 'In the period from %1 to %2 no settlement operations were performed.'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
			ПредставлениеПериодаРасчетов = СтрШаблон(
				ШаблонПериодаРасчетов,
				Формат(ДанныеДокумента.НачалоПериода, "ДЛФ=ДД"),
				Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		КонецЕсли;

		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
									"ПолноеНаименование");
		СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент,  ДанныеДокумента.Дата);
		КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
								  "ПолноеНаименование");
		
		СтруктураПредставленийУчастников = Новый Структура;
		СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		Если ЗначениеЗаполнено(ДанныеДокумента.Договор) Тогда
			ОбластьМакета.Параметры.ПредставлениеДоговора = НСтр("ru = 'по договору';
																|en = 'by contract'", ОбщегоНазначения.КодОсновногоЯзыка()) + ": " + ДанныеДокумента.ПредставлениеДоговора;
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
		ОбластьМакета.Параметры.ТекстЗаголовкаМакета         = ТекстЗаголовка;
		ОбластьМакета.Параметры.ФИОРуководителяКонтрагента   = СокрЛП(ДанныеДокумента.ФИОРуководителяКонтрагента);
		ОбластьМакета.Параметры.ПредставлениеПериода         = ПредставлениеПериода;
		ОбластьМакета.Параметры.ПредставлениеПериодаРасчетов = ПредставлениеПериодаРасчетов;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		#КонецОбласти
		
		#Область ДетальныеЗаписи
		ТипЧисло = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
		ИтогоЗадолженность = Новый ТаблицаЗначений;
		ИтогоЗадолженность.Колонки.Добавить("Валюта");
		ИтогоЗадолженность.Колонки.Добавить("СуммаДт", ТипЧисло);
		ИтогоЗадолженность.Колонки.Добавить("СуммаКт", ТипЧисло);
		НастройкиПечати.Вставить("ПредставленияУчастников", СтруктураПредставленийУчастников);
		ДанныеДокумента.Строки.Сортировать("ПредставлениеТипРасчетов");
		Для Каждого ДанныеПоТипуРасчетов Из ДанныеДокумента.Строки Цикл
			Для Каждого ДанныеПоВалюте Из ДанныеПоТипуРасчетов.Строки Цикл
				ДанныеПоВалюте.Строки.Сортировать("ОбъектГруппировки");
				Для Каждого ДанныеПоОбъектуГруппировки Из ДанныеПоВалюте.Строки Цикл
					ЕстьДанныеГруппировки = ДанныеПоОбъектуГруппировки.НачальноеСальдоДт <> 0
												ИЛИ ДанныеПоОбъектуГруппировки.НачальноеСальдоКт <> 0
												ИЛИ ДанныеПоОбъектуГруппировки.ЕстьОбороты;
					Если ЕстьДанныеГруппировки Тогда
						ТабличныйДокумент.Вывести(ВывестиДетальныеЗаписи(ДанныеПоОбъектуГруппировки, ДанныеДокумента, Макет, ИтогоЗадолженность, НастройкиПечати));
					КонецЕсли;
				КонецЦикла; // по детальным записям
			КонецЦикла; // по детальным записям
		КонецЦикла; // по видам расчетов Взаиморасчеты/ФинансовыеИнструменты
		#КонецОбласти
		
		#Область Задолженность
		Если ИтогоЗадолженность.Количество() > 0 Тогда
			
			ОбластьМакетаЗаголовок	= Макет.ПолучитьОбласть("ЗаголовокЗадолженность");
			ОбластьДолг				= Макет.ПолучитьОбласть("СтрокаЗадолженность");
			ОбластьДолгРегл			= Макет.ПолучитьОбласть("СтрокаЗадолженностьВалютаРегл");
			ОбластьПустаяСтрока		= Макет.ПолучитьОбласть("ПустаяСтрока");
			
			ОбластьМакетаЗаголовок.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			ЗадолженностьПоВалютам = ИтогоЗадолженность.Скопировать(); // ТаблицаЗначений
			ЗадолженностьПоВалютам.Свернуть("Валюта", "СуммаДт,СуммаКт");
			Для Каждого ДолгВВалюте Из ЗадолженностьПоВалютам Цикл
				
				ВывестиПустуюСтроку = Истина;
				ПредставлениеПартнера = ДанныеДокумента.ПредставлениеПартнера;
				Если НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер) Тогда
					ПредставлениеПартнера = СтруктураПредставленийУчастников.КонтрагентНаименование;
				КонецЕсли;
				
				Если ДолгВВалюте.СуммаДт <> 0 И ДолгВВалюте.СуммаКт <> 0 Тогда
					РассчитатьСальдо(ДолгВВалюте, "Сумма");
				КонецЕсли;
				
				ОбластьДолг.Параметры.Валюта = ДолгВВалюте.Валюта;
				
				// Долг партнера
				СуммаДолга = 0;
				Если ДолгВВалюте.СуммаДт > 0 Тогда
					СуммаДолга = ДолгВВалюте.СуммаДт;
					ОбластьДолг.Параметры.Сумма = Формат(ДолгВВалюте.СуммаДт, "ЧДЦ=2; ЧН=0; ЧГ=3,0");
					ОбластьДолг.Параметры.Дебитор = ПредставлениеПартнера;
				Иначе
					// Наш долг
					СуммаДолга = ДолгВВалюте.СуммаКт;
					ОбластьДолг.Параметры.Сумма = Формат(ДолгВВалюте.СуммаКт, "ЧДЦ=2; ЧН=0; ЧГ=3,0");
					ОбластьДолг.Параметры.Дебитор = СтрШаблон(
							НСтр("ru = '%1 перед %2';
								|en = '%1 before %2'"),
							СтруктураПредставленийУчастников.ПредставлениеОрганизации,
							ПредставлениеПартнера);
				КонецЕсли;
				ОбластьДолг.Параметры.СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(СуммаДолга,ДолгВВалюте.Валюта);
				ТабличныйДокумент.Вывести(ОбластьДолг);
				
				Если ВывестиПустуюСтроку Тогда
					ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
				КонецЕсли;
			КонецЦикла; 
			
		Иначе
		
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокЗадолженностьОтсутствует");
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		
		КонецЕсли;
		#КонецОбласти 
		
		// РАСХОЖДЕНИЙ НЕ ВЫЯВЛЕНО
		ДанныеКонтрагентаЗаполнены = НЕ НастройкиПечати.НеЗаполнятьДанныеКонтрагента;
		Если НЕ ДанныеДокумента.ЕстьРасхождения И ДанныеКонтрагентаЗаполнены Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокРасхождения");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		#Область Подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		#Вставка 
		Если ЗначениеЗаполнено(ДанныеДокумента.ДокументСсылка.Руководитель) Тогда
			
			Печать = ПолучитьПечатьИлиПодпись(Справочники.Пользователи.НайтиПоНаименованию("Мартыненко Сергей Федорович"));
			
			Если ЗначениеЗаполнено(Печать) Тогда                                                    
				
				ИмяРисункаПодписи = "Подпись";
				ПутьКФайлу = СтрШаблон("%1%2",Печать[0].Каталог, Печать[0].ПутьКФайлу);
				
				ДанныеПодписи = Новый Картинка(ПутьКФайлу,Истина);
				
				Подпись_Рисунок = ОбластьМакета.Рисунки[ИмяРисункаПодписи];
				Подпись_Высота = Подпись_Рисунок.Высота;
				Подпись_Ширина = Подпись_Рисунок.Ширина;
				Подпись_Рисунок.Картинка = ДанныеПодписи;
				
			Иначе 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Подпись ответственного лица не найдена");
				
			КонецЕсли;
		КонецЕсли;
		#КонецВставки
		ТабличныйДокумент.Вывести(ОбластьМакета);
		#КонецОбласти
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.ДокументСсылка);
	
	КонецЦикла; // конец цикла по данным документа

	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ТипЗнч(ДляОтладки) = Тип("Структура") Тогда
		ДляОтладки.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПечатьИлиПодпись(Объект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Файлы.ТекущаяВерсия.Том.ПолныйПутьWindows КАК Каталог,
	|	Файлы.ПутьКФайлу КАК ПутьКФайлу
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ДополнительныеСведения.Значение = Файлы.Ссылка
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект
	|	И ДополнительныеСведения.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
				
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ПечатьОрганизации"));
		
	Иначе         
		
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ПодписьПользователя"));
		
	КонецЕсли; 
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции