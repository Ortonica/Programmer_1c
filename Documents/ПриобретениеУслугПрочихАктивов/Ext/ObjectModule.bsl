
&ИзменениеИКонтроль("ОбработкаЗаполнения")
Процедура РСК_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	//++ НЕ УТ
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПереработчику")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		ЗаполнитьДокументНаОснованииДанныхПереработчика(ДанныеЗаполнения);

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПереработчику2_5")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетПереработчика2_5") Тогда

		ЗаполнитьДокументНаОснованииДанныхПереработчика2_5(ДанныеЗаполнения);

	КонецЕсли;
	//-- НЕ УТ
	#Вставка 
	//Конарев++ Заполнение на основании задания торговому представителю
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") тогда
		СтрокиДляЗаполнения = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресСтрокВоВременномХранилище);
		ЗаполнитьДокументНаОснованииДанныхЗаданияТорговомуПредставителю(ДанныеЗаполнения.ДокументОснование,СтрокиДляЗаполнения);
	КонецЕсли;
	#КонецВставки
	
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(НалогообложениеНДС, ПараметрыЗаполнения);

	ПараметрыЗаполнения = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗакупкаПодДеятельность, ПараметрыЗаполнения);

	ПараметрыВыбораСтатейИАналитик = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);

	ВзаиморасчетыСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);

	ПриобретениеУслугПрочихАктивовЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

	ИнициализироватьДокумент(ДанныеЗаполнения);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);

КонецПроцедуры   

Процедура ЗаполнитьДокументНаОснованииДанныхЗаданияТорговомуПредставителю(Основание,СтрокиДляЗаполнения)
	
	Расходы.Загрузить(СтрокиДляЗаполнения);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание",Основание);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаданиеТорговомуПредставителю.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ЗаданиеТорговомуПредставителю.Склад.Поклажедержатель КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ЗаданиеТорговомуПредставителю.Склад.Поклажедержатель КАК Справочник.Контрагенты).Партнер КАК Партнер,
	|	ЗаданиеТорговомуПредставителю.ДоговорСИ КАК Договор
	|ИЗ
	|	Документ.ЗаданиеТорговомуПредставителю КАК ЗаданиеТорговомуПредставителю
	|ГДЕ
	|	ЗаданиеТорговомуПредставителю.Ссылка = &Основание";
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Результат);
	ЭтотОбъект.СуммаВзаиморасчетов = СтрокиДляЗаполнения.Итог("Сумма");
	ЭтотОбъект.СуммаДокумента	   = СтрокиДляЗаполнения.Итог("Сумма");
	
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаПроведения")
Процедура РСК_ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);

	ПриобретениеУслугПрочихАктивовЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);

	ПараметрыРегистрации = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыРегистрацииСчетовФактурПолученных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыПолученныеПриПроведении(ПараметрыРегистрации);
	#Вставка 
	ПроверитьОтражениеУслугСоисполнителей();
	#КонецВставки
	
КонецПроцедуры  

Процедура ПроверитьОтражениеУслугСоисполнителей()

	Набор = РегистрыСведений.РСК_ОтраженныеУслугиСоисполнителей.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОтражения.Установить(Ссылка);
	Набор.Прочитать(); 
	Для Каждого Запись из Набор Цикл
		Запись.Активно = Истина;	
	КонецЦикла;
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаПроверкиЗаполнения")
Процедура РСК_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Соглашение) Или Не ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС 
		 ИЛИ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Расходы.СтавкаНДС");
	КонецЕсли;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ПриобретениеУслугПрочихАктивов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	МассивНепроверяемыхРеквизитов.Добавить("Расходы.КоличествоПоРНПТ");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	#Вставка
	ПроверитьПревышениеКоличестваОтраженныхУслуг(Отказ);
	#КонецВставки	
	
	ПараметрыПроверки = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыПроверкиЗаполнениеДокументаПоНалогообложениюНДСЗакупки(ЭтотОбъект);
	УчетНДСУП.ПроверитьЗаполнениеДокументаЗакупкиПоНалогообложениюНДС(ЭтотОбъект, НалогообложениеНДС, ПараметрыПроверки, Отказ);
	
	ПараметрыПроверки = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(ЭтотОбъект, ЗакупкаПодДеятельность, ПараметрыПроверки, Отказ);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	
	ПриобретениеУслугПрочихАктивовЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПревышениеКоличестваОтраженныхУслуг(Отказ) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеДокумента",Расходы.Выгрузить());
	Запрос.УстановитьПараметр("ДокументОтражения",Ссылка);
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ДанныеДокумента.РСК_ИдентификаторСтрокиЗадания КАК РСК_ИдентификаторСтрокиЗадания,
	|	ДанныеДокумента.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ДанныеДокументов
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.РСК_ИдентификаторСтрокиЗадания <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РСК_ОтраженныеУслугиСоисполнителей.Услуга КАК Услуга,
	|	РСК_ОтраженныеУслугиСоисполнителей.ЗаданиеТорговомуПредставителю КАК ЗаданиеТорговомуПредставителю,
	|	ВТ_ДанныеДокументов.РСК_ИдентификаторСтрокиЗадания КАК РСК_ИдентификаторСтрокиЗадания
	|ПОМЕСТИТЬ ВТ_УслугаСтроки
	|ИЗ
	|	ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РСК_ОтраженныеУслугиСоисполнителей КАК РСК_ОтраженныеУслугиСоисполнителей
	|		ПО ВТ_ДанныеДокументов.РСК_ИдентификаторСтрокиЗадания = РСК_ОтраженныеУслугиСоисполнителей.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЗаданиеТорговомуПредставителюСАВ_Услуги.Количество, 0) КАК КоличествоЗадание,
	|	ЕСТЬNULL(ВТ_ДанныеДокументов.Количество, 0) КАК КоличествоДокумент,
	|	СУММА(ЕСТЬNULL(РСК_ОтраженныеУслугиСоисполнителей.Количество, 0)) КАК КоличествоРегистр,
	|	ВТ_УслугаСтроки.Услуга КАК Услуга,
	|	ВТ_УслугаСтроки.ЗаданиеТорговомуПредставителю КАК ЗаданиеТорговомуПредставителю
	|ПОМЕСТИТЬ ВТ_ИтоговаяТаблица
	|ИЗ
	|	ВТ_УслугаСтроки КАК ВТ_УслугаСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеТорговомуПредставителю.САВ_Услуги КАК ЗаданиеТорговомуПредставителюСАВ_Услуги
	|		ПО ВТ_УслугаСтроки.Услуга = ЗаданиеТорговомуПредставителюСАВ_Услуги.Номенклатура
	|			И ВТ_УслугаСтроки.ЗаданиеТорговомуПредставителю = ЗаданиеТорговомуПредставителюСАВ_Услуги.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДокументов КАК ВТ_ДанныеДокументов
	|		ПО ВТ_УслугаСтроки.РСК_ИдентификаторСтрокиЗадания = ВТ_ДанныеДокументов.РСК_ИдентификаторСтрокиЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РСК_ОтраженныеУслугиСоисполнителей КАК РСК_ОтраженныеУслугиСоисполнителей
	|		ПО ВТ_УслугаСтроки.Услуга = РСК_ОтраженныеУслугиСоисполнителей.Услуга
	|			И ВТ_УслугаСтроки.ЗаданиеТорговомуПредставителю = РСК_ОтраженныеУслугиСоисполнителей.ЗаданиеТорговомуПредставителю
	|			И (РСК_ОтраженныеУслугиСоисполнителей.Активно)
	|			И (РСК_ОтраженныеУслугиСоисполнителей.ДокументОтражения <> &ДокументОтражения)
	|ГДЕ
	|	НЕ ВТ_УслугаСтроки.Услуга ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВТ_ДанныеДокументов.Количество, 0),
	|	ВТ_УслугаСтроки.Услуга,
	|	ВТ_УслугаСтроки.ЗаданиеТорговомуПредставителю,
	|	ЕСТЬNULL(ЗаданиеТорговомуПредставителюСАВ_Услуги.Количество, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтоговаяТаблица.КоличествоЗадание - ВТ_ИтоговаяТаблица.КоличествоДокумент - ВТ_ИтоговаяТаблица.КоличествоРегистр КАК Количество,
	|	ВТ_ИтоговаяТаблица.Услуга КАК Услуга,
	|	ВТ_ИтоговаяТаблица.ЗаданиеТорговомуПредставителю КАК ЗаданиеТорговомуПредставителю,
	|	ВТ_ИтоговаяТаблица.КоличествоЗадание - ВТ_ИтоговаяТаблица.КоличествоРегистр КАК КоличествоДоступно
	|ИЗ
	|	ВТ_ИтоговаяТаблица КАК ВТ_ИтоговаяТаблица
	|ГДЕ
	|	ВТ_ИтоговаяТаблица.КоличествоЗадание - ВТ_ИтоговаяТаблица.КоличествоДокумент - ВТ_ИтоговаяТаблица.КоличествоРегистр < 0";
		
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда   
		Ошибки = Результат.Выбрать();
		Пока Ошибки.Следующий() Цикл
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("По услуге %1 превышено количество, доступное к отражению! (Превышение - %2, Доступно к отражению - %3)",
															Ошибки.Услуга,-Ошибки.Количество,Ошибки.КоличествоДоступно),,,,Отказ);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
	





