
&ИзменениеИКонтроль("ЗаполнитьДанныеПервичногоДокументаУПД_2019")
Процедура РСК_ЗаполнитьДанныеПервичногоДокументаУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Настройки, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
		НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			или ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		ДокументОтгрузки = ДанныеШапки.Ссылка.ДокументОснование;
	Иначе
		ДокументОтгрузки = ДанныеШапки.Ссылка;
	КонецЕсли;
	
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" Тогда
		ЭтоКомиссия = Истина;
	Иначе
		ЭтоКомиссия = Ложь
	КонецЕсли;
	
	ЕстьТаблицаРезультатПоКонтрагентам = Ложь;
	Если СтруктураДанных.Свойство("РезультатПоКонтрагентам") Тогда
		ЕстьТаблицаРезультатПоКонтрагентам = Истина;
	КонецЕсли;
	
	Если ЕстьТаблицаРезультатПоКонтрагентам Тогда
		ВыборкаДанныхКонтрагента = СтруктураДанных.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДанныхКонтрагента.НайтиСледующий(Новый Структура("Ссылка", ДанныеШапки.Ссылка));
		ДанныеКонтрагента = ВыборкаДанныхКонтрагента.Выбрать();
		ДанныеКонтрагента.Следующий();
		Если Не ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда
			ЕстьТаблицаРезультатПоКонтрагентам = Ложь;	
		КонецЕсли;		
	КонецЕсли;  	
	

	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	Если СтруктураДанных.Свойство("ДанныеЭлектронногоАктирования") Тогда
		ЭтоЭлектронноеАктированиеЕИС = Истина;
		ДанныеЭлектронногоАктированияЕИС = СтруктураДанных.ДанныеЭлектронногоАктирования;
		ДанныеПриложенияЕИС = ЭлектронноеАктированиеЕИС.НовыеДанныеПриложенияКТитулуПродавцаУПД();
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения", ДанныеПриложенияЕИС);
		ЭлектронноеАктированиеЕИСУТ.ЗаполнитьДанныеДереваДляЭлектронногоАктированияЕИС(ДеревоДанных,
			ДанныеЭлектронногоАктированияЕИС,
			ДанныеШапки,
			ДанныеПриложенияЕИС,
			ДокументОтгрузки,
			Ложь);
	Иначе
		ЭлектронноеАктированиеЕИСУТ.ПроверитьДоговорЭД(
			Настройки, ДокументОтгрузки, ДеревоДанных, Ложь);
	КонецЕсли;
	ИдентификаторМестаПоставкиЕИС = "";
	Если ЭтоЭлектронноеАктированиеЕИС Тогда
		ИдентификаторМестаПоставкиЕИС = Строка(Новый УникальныйИдентификатор);
		ИдентификаторМестаПоставкиЕИС = СтрЗаменить(ИдентификаторМестаПоставкиЕИС, "-", "");
	КонецЕсли;	

	МестаПоставкиНеЗаполнены = Истина;
	Если ЭтоЭлектронноеАктированиеЕИС И ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(ДокументОтгрузки.АдресДоставкиЗначенияПолей) Тогда
			МестаПоставкиНеЗаполнены = Ложь;
			ЭлектронноеАктированиеЕИСУТ.ЗаполнитьМестаПоставкиПриложенияЕИСПоАдресуДоставки(
				ДокументОтгрузки.АдресДоставкиЗначенияПолей, ИдентификаторМестаПоставкиЕИС, ДанныеПриложенияЕИС);
		КонецЕсли;
	КонецЕсли;	
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

		
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И СтруктураЭД.Функция <> "СЧФ" Тогда
		Если ДокументОтгрузки.Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено Тогда
			ВидОперации = НСтр("ru = 'Формирование ЭД';
								|en = 'ED generation'");
			ПодробныйТекстОшибки = НСтр("ru = 'Ошибка при формирование ЭД. Неверный статус документа.';
										|en = 'Error when generating ED. Invalid document status.'");
			ТекстСообщения = НСтр("ru = 'Формирование ЭД возможно только для документов в статусе ""Реализовано"".';
									|en = 'ED can be generated only for the documents in the Sold status.'");
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			Отказ = Истина;
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПроверитьМаркируемуюПродукциюДокумента(ДокументОтгрузки, Отказ);
	
	Если Отказ Тогда
		ВидОперации = НСтр("ru = 'Формирование ЭД';
							|en = 'ED generation'");
		ПодробныйТекстОшибки = НСтр("ru = 'Ошибка при формирование ЭД. Неверное указание маркированной продукции.';
									|en = 'Error when generating ED. Invalid marked manufactured products specification.'");
		ТекстСообщения = НСтр("ru = 'Проверьте указание кодов маркировки.';
								|en = 'Check labeling codes.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Заполнение параметра ВидОборота
	ВидОборота = "";
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ДокументОтгрузки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			ВидОборота = "04";	
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Если ДокументОтгрузки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту Тогда
			ВидОборота = "05";	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидОборота) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОборота", ВидОборота);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВнестиСведенияОВыбытииМаркированныхТоваровВДеревоУПДУКД(ДеревоДанных, ДокументОтгрузки.ВариантВыбытияМаркируемойПродукции);
	КонецЕсли;
	
	СтрокаДереваВидСчетаФактуры = ЭлектронноеВзаимодействие.СтрокаДерева(ДеревоДанных, "ВидСчетаФактуры");
	ВидСчетаФактуры = СтрокаДереваВидСчетаФактуры.Значение;
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", СтруктураДанных.Свойство("НомерСформированВСчетеФактуре"));
	
	Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",  ДанныеШапки.Номер);		
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
			"НомерДокумента",  НомерСчетаФактурыНаПечать(ДанныеШапки.Номер, ДанныеШапки.ИндексПодразделения));
	КонецЕсли;
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.Дата);
	#Вставка
	//+РС Консалт Назаров М.Ю. 10.02.2023 6:58:51 
	// Указание дат по началу и окончанию поставки цчлцг и товаров
	
	Если ЭтоЭлектронноеАктированиеЕИС И ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		
		Если ЗначениеЗаполнено(ДокументОтгрузки.РСК_ДатаНачалаПоставки) Тогда 
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНачалаПоставки", ДокументОтгрузки.РСК_ДатаНачалаПоставки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОтгрузки.РСК_ДатаОкончанияПоставки) Тогда 
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОкончанияПоставки", ДокументОтгрузки.РСК_ДатаОкончанияПоставки);
		КонецЕсли;   
		
	КонецЕсли;
	//-РС Консалт Назаров М.Ю. 10.02.2023 6:58:51
	#КонецВставки
	
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Число(ДанныеШапки.НомерИсправления));	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.';
	|en = 'Cannot fill in the document currency code. Make sure that:
	|	- Currency is specified in the document.
	|	- Code according to All-Russian Classifier of Currencies is filled in for the currency.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643", ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", "Российский рубль");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ДанныеШапки.ТолькоУслуги);			
	
	// Выводим данные продавца. 
	ЕстьТаблицаРезультатПоПоставщикам = Ложь;
	Если СтруктураДанных.Свойство("РезультатПоПоставщикам") Тогда
		ЕстьТаблицаРезультатПоПоставщикам = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ОтчетКомитентуОЗакупках")
		И ЕстьТаблицаРезультатПоПоставщикам Тогда
		ВыборкаДанныхКонтрагента = СтруктураДанных.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДанныхКонтрагента.НайтиСледующий(Новый Структура("Ссылка", ДанныеШапки.Ссылка));
		ДанныеПоставщика = ВыборкаДанныхКонтрагента.Выбрать();
		ДанныеПоставщика.Следующий();
		Если ЗначениеЗаполнено(ДанныеПоставщика.Поставщик) Тогда
			СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеПоставщика.Поставщик, , ДанныеШапки.Дата);
			Если ЗначениеЗаполнено(ДанныеПоставщика.КПППоставщика) Тогда
				СведенияОПоставщике.КПП = ДанныеПоставщика.КПППоставщика;
			КонецЕсли;
			Поставщик = ДанныеПоставщика.Поставщик;
		Иначе
			ЕстьТаблицаРезультатПоПоставщикам = Ложь;
		КонецЕсли;
	Иначе
		ЕстьТаблицаРезультатПоПоставщикам = Ложь;
	КонецЕсли;
	
	Если Не ЕстьТаблицаРезультатПоПоставщикам Тогда
		Поставщик = ДанныеШапки.Организация;
		Если ЗначениеЗаполнено(ДанныеШапки.БанковскийСчетОрганизации) Тогда
			БанковскийСчетОрганизации = ДанныеШапки.БанковскийСчетОрганизации;
		Иначе
			БанковскийСчетОрганизации = Неопределено;
		КонецЕсли;
	
		СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация, БанковскийСчетОрганизации, ДанныеШапки.Дата);
	
		// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан гос.контракт или не выбран этап гос.контракта.';
									|en = 'The state contract or state contract step is not specified.'");
				ЭлектронноеАктированиеЕИС.ДобавитьОшибкуЗаполненияПриложения(
					ДанныеПриложенияЕИС, ТекстОшибки);		
			Иначе
				НаименованиеПоставщикаДляЕИС =
					ЭлектронноеАктированиеЕИСУТ.НаименованиеПоставщика(
						ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0]);
				СведенияОПоставщике.ПолноеНаименование = НаименованиеПоставщикаДляЕИС;
			КонецЕсли;
		КонецЕсли;
		// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
		Если ЗначениеЗаполнено(ДанныеШапки.КПППоставщика) Тогда
			СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПродавцов = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОПродавце");
	ТаблицаПродавцов.Колонки.Добавить("СведенияОбУчастнике");
	ДанныеПродавца = ПолучитьДанныеУчастникаУПД(СведенияОПоставщике, "Юр");
	СтрокаПродавца = ТаблицаПродавцов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПродавца, ДанныеПродавца);
	// Заполняем структурное подразделение
	Если ДанныеШапки.ПредставлениеДокумента <> "счет-фактура комиссионера" Тогда
		Если ЗначениеЗаполнено(ДанныеШапки.Ссылка.Подразделение) Тогда
			СтрокаПродавца.СтруктурноеПодразделение = ДанныеШапки.Ссылка.Подразделение.Наименование;
		КонецЕсли;
	КонецЕсли;
	ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаПродавцов);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПродавцов, "СведенияОПродавце");
	
	Если ВидСчетаФактуры <> "Авансовый" Тогда	
		// Выводим данные грузоотправителя.
		ТаблицаГрузоотправителей = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОГрузоотправителе");
		ТаблицаГрузоотправителей.Колонки.Добавить("СведенияОбУчастнике");
		
		Если Поставщик = ДанныеШапки.Грузоотправитель И Не ДанныеШапки.ТолькоУслуги Тогда
			ТаблицаГрузоотправителей.Добавить().ОнЖе = Истина;	
		ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель) И Не ДанныеШапки.ТолькоУслуги Тогда
			СведенияОГрузоотправителе = Неопределено; 
			Если ЗначениеЗаполнено(ДанныеШапки.БанковскийСчетГрузоотправителя) Тогда
				БанковскийСчетГрузоотправителя = ДанныеШапки.БанковскийСчетГрузоотправителя;
			Иначе
				БанковскийСчетГрузоотправителя = Неопределено;
			КонецЕсли;
			СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, БанковскийСчетГрузоотправителя, ДанныеШапки.Дата);
			
			ДанныеГрузоотправителя = ПолучитьДанныеУчастникаУПД(СведенияОГрузоотправителе, "Факт");
			СтрокаГрузоотправителя = ТаблицаГрузоотправителей.Добавить();
			СтрокаГрузоотправителя.Грузоотправитель = ДанныеГрузоотправителя;		
			СтрокаГрузоотправителя.СведенияОбУчастнике = СведенияОГрузоотправителе;
		КонецЕсли;
		ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаГрузоотправителей, "Грузоотправитель");
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузоотправителей, "СведенияОГрузоотправителе");
		
		// Выводим данные грузополучателя.
		ТаблицаГрузополучателей = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОГрузополучателе");
		ТаблицаГрузополучателей.Колонки.Добавить("СведенияОбУчастнике");
		
		Если Не ДанныеШапки.ТолькоУслуги Тогда
			СведенияОГрузополучателе = "";
			Если ЗначениеЗаполнено(ДанныеШапки.БанковскийСчетГрузополучателя) Тогда
				БанковскийСчетГрузополучателя = ДанныеШапки.БанковскийСчетГрузополучателя;
			Иначе
				БанковскийСчетГрузополучателя = Неопределено;
			КонецЕсли;
			
			Если НЕ ЕстьТаблицаРезультатПоКонтрагентам Тогда
				Если ДанныеШапки.Грузополучатель <> Неопределено Тогда
					СведенияОГрузополучателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузополучатель, БанковскийСчетГрузополучателя, ДанныеШапки.Дата);
				КонецЕсли;	
			ИначеЕсли ЗначениеЗаполнено(ДанныеКонтрагента.Грузополучатель) Тогда
				СведенияОГрузополучателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Грузополучатель, БанковскийСчетГрузополучателя, ДанныеШапки.Дата);
			КонецЕсли;
			Если ЗначениеЗаполнено(СведенияОГрузополучателе) Тогда
				#Вставка  
				//++РС Консалт Назаров М.Ю. 28 сентября 2022 г. 12:52:59  
				Если ДанныеШапки.Грузополучатель = ДанныеШапки.Контрагент Тогда 
					НаименованиеЗаказчика = СтруктураЭД.Договор.ГосударственныйКонтракт.ПолноеНаименованиеЗаказчика;
					ПереопределитьНаименованияВСведениях(СведенияОГрузополучателе, НаименованиеЗаказчика);
				КонецЕсли;
				//--РС Консалт Назаров М.Ю. 28 сентября 2022 г. 12:52:59 
				#КонецВставки
				ДанныеГрузополучателя = ПолучитьДанныеУчастникаУПД(СведенияОГрузополучателе, "Факт");
				СтрокаГрузополучателя = ТаблицаГрузополучателей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаГрузополучателя, ДанныеГрузополучателя);
			КонецЕсли; 
		
			ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаГрузополучателей);
			#Вставка  
			//++РС Консалт Назаров М.Ю. 14 ноября 2022 г. 15:12:22                  
			Если Не (ЭтоЭлектронноеАктированиеЕИС И МестаПоставкиНеЗаполнены) Тогда
				ИдентификаторУчастника = ЭлектронноеАктированиеЕИС.НачальныйИндексИнформацииУчастникаГрузополучателя();
				СтрокаГрузополучателя.ИнформацияДляУчастника = ИдентификаторУчастника;
			КонецЕсли;
			//--РС Консалт Назаров М.Ю. 14 ноября 2022 г. 15:12:22
			#КонецВставки
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузополучателей, "СведенияОГрузополучателе");
		КонецЕсли;
	КонецЕсли;
	
	// Выводим данные покупателя. 
	СведенияОПокупателе = "";
	Если ЗначениеЗаполнено(ДанныеШапки.БанковскийСчетКонтрагента) Тогда
		БанковскийСчетКонтрагента = ДанныеШапки.БанковскийСчетКонтрагента;
	Иначе
		БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;

	Если НЕ ЕстьТаблицаРезультатПоКонтрагентам Тогда 
		СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент, БанковскийСчетКонтрагента, ДанныеШапки.Дата);
		#Вставка  
		//++РС Консалт Назаров М.Ю. 27 сентября 2022 г. 15:40:48                  
		НаименованиеЗаказчика = СтруктураЭД.Договор.ГосударственныйКонтракт.ПолноеНаименованиеЗаказчика;
		ПереопределитьНаименованияВСведениях(СведенияОПокупателе, НаименованиеЗаказчика);
		//--РС Консалт Назаров М.Ю. 27 сентября 2022 г. 15:40:48
		#КонецВставки
		Если Не ПустаяСтрока(ДанныеШапки.КПППокупателя) Тогда
			СведенияОПокупателе.КПП = ДанныеШапки.КПППокупателя;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда		
			СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Контрагент, БанковскийСчетКонтрагента, ДанныеШапки.Дата);
			Если Не ПустаяСтрока(ДанныеКонтрагента.КПППокупателя) Тогда
				СведенияОПокупателе.КПП = ДанныеКонтрагента.КПППокупателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОПокупателе) Тогда
		ТаблицаПокупателей = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОПокупателе");
		ТаблицаПокупателей.Колонки.Добавить("СведенияОбУчастнике");
		ДанныеПокупателя = ПолучитьДанныеУчастникаУПД(СведенияОПокупателе, "Юр");
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, ДанныеПокупателя);
		ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаПокупателей);

		// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			Если МестаПоставкиНеЗаполнены Тогда
				СведенияОПокупателе.Вставить("ИдентификаторМестаПоставкиЕИС", ИдентификаторМестаПоставкиЕИС);
				ЭлектронноеАктированиеЕИСУТ.ЗаполнитьМестаПоставкиПриложенияЕИСПоДаннымУчастника(
					СведенияОПокупателе, СтрокаПокупателя, "СведенияОПокупателе", ДанныеПриложенияЕИС, ДанныеШапки.Дата);
			КонецЕсли;
		КонецЕсли;
		// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		#Вставка  
		//++РС Консалт Назаров М.Ю. 14 ноября 2022 г. 15:12:22                  
		Если Не (ЭтоЭлектронноеАктированиеЕИС И МестаПоставкиНеЗаполнены) Тогда
			ИдентификаторУчастника = ЭлектронноеАктированиеЕИС.НачальныйИндексИнформацииУчастникаПокупателя();
			СтрокаПокупателя.ИнформацияДляУчастника = ИдентификаторУчастника;
		КонецЕсли;
		//--РС Консалт Назаров М.Ю. 14 ноября 2022 г. 15:12:22
		#КонецВставки

		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПокупателей, "СведенияОПокупателе");
	КонецЕсли;	
		
	Если ЭтоКомиссия Тогда
		// Получателем данного счета-фактуры является комиссионер. Поместим данные о получателе в доп. данные.
		СведенияОКомиссионере = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Ссылка.Комиссионер, , ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере", "Юр", ДанныеШапки.Дата);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "ПредставлениеВыставленКомиссионеру")
															И ЗначениеЗаполнено(ДанныеШапки.ПредставлениеВыставленКомиссионеру) Тогда
			ПутьВДереве = "ДопДанныеСчетаФактуры.ТекстоваяИнформация";
			ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, "ДополнительныеСведенияОКомиссионере",
				ДанныеШапки.ПредставлениеВыставленКомиссионеру, ПутьВДереве);
		КонецЕсли;		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ОтчетКомитентуОЗакупках")
		И СтруктураДанных.Свойство("РезультатПоПоставщикам")
		И ЗначениеЗаполнено(СведенияОПокупателе) Тогда
		СоставительДокументаНаименование = СведенияОПокупателе.ПолноеНаименование
			+ ?(ЗначениеЗаполнено(СведенияОПокупателе.КПП),
				СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2';
								|en = ', TIN/CRTR %1/%2'"), СведенияОПокупателе.ИНН, СведенияОПокупателе.КПП),
				СтрШаблон(НСтр("ru = ', ИНН %1';
								|en = ', TIN %1'"), СведенияОПокупателе.ИНН));
	Иначе
		СоставительДокументаНаименование = СведенияОПоставщике.ПолноеНаименование
			+ ?(ЗначениеЗаполнено(СведенияОПоставщике.КПП),
				СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2';
								|en = ', TIN/CRTR %1/%2'"), СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП),
				СтрШаблон(НСтр("ru = ', ИНН %1';
								|en = ', TIN %1'"), СведенияОПоставщике.ИНН));
	КонецЕсли;

	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	Если ЭтоЭлектронноеАктированиеЕИС Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", НаименованиеПоставщикаДляЕИС);
	Иначе
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокументаНаименование);

	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6)));
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("СведенияОПрослеживаемости");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Признак");
	ТаблицаТоваров.Колонки.Добавить("ТоварКод");
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор");
	ТаблицаТоваров.Колонки.Добавить("КодВидаТовара");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("СведенияОДокументеОтгрузки");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировке");
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторМестаПоставкиЕИС");
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	#Вставка
	//+РС Консалт Назаров М.Ю. 07.02.2023 10:35:36 
	Если СтруктураДанных.Свойство("СверткаПоТабличнойЧасти") Тогда 
		//Используется свернутая таблица по Номенклатуре партнера, так как требуется в ЕИС, а детализацию отключили
		ВыборкаПоДокументам = СтруктураДанных.СверткаПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	//-РС Консалт Назаров М.Ю. 07.02.2023 10:35:36
	#КонецВставки
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "ПредставлениеСтроки5а")
			И ЗначениеЗаполнено(ДанныеШапки.ПредставлениеСтроки5а) Тогда
			
		ДокументыПодтвержденияОтгрузки = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ДокументыПодтвержденияОтгрузки");
		СтрокаДокументыПодтвержденияОтгрузки = ДокументыПодтвержденияОтгрузки.Добавить();
		СтрокаДокументыПодтвержденияОтгрузки.Наименование = НСтр("ru = 'Реализация (акт, накладная, УПД)';
																|en = 'Sales (certificate, invoice, UTD)'");
			
		КоличествоСтрок = СтрокаТовары.Количество();		

		Если СтруктураЭД.Функция = "СЧФ" Тогда
			ПредставлениеСтроки5а = ДанныеШапки.ПредставлениеСтроки5а;
			
			НомерДокументаОтгрузки = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОтгрузки.Номер);		
			СтрокаДокументыПодтвержденияОтгрузки.Номер = НомерДокументаОтгрузки;
			СтрокаДокументыПодтвержденияОтгрузки.Дата = ДокументОтгрузки.Дата;			
		Иначе			
			ПредставлениеСтроки5а = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ п/п %1 № %2 от %3';
							|en = 'Item No. %1 # %2 of %3'"),
						?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
						ДанныеШапки.Номер,
						Формат(ДанныеШапки.Дата, "ДЛФ=ДД"));
						
			СтрокаДокументыПодтвержденияОтгрузки.Номер = ДанныеШапки.Номер;
			СтрокаДокументыПодтвержденияОтгрузки.Дата = ДанныеШапки.Дата						
		КонецЕсли;				
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОбОтгрузке", ПредставлениеСтроки5а);		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыПодтвержденияОтгрузки, "ДокументыПодтвержденияОтгрузки");
		
	КонецЕсли; 
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	ЕстьРаботы = Ложь;
	
	ИспользоватьНаборы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;
	
	ЗаполнятьСопоставление = Истина;
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
			Или ВидСчетаФактуры = "Авансовый" Тогда
		ЗаполнятьСопоставление = Ложь;
	КонецЕсли;
	
	ТаблицаКодовМаркировки = Неопределено;
	СтруктураДанных.Свойство("Маркировка", ТаблицаКодовМаркировки);
	
	ЗаполнениеКодаТовара = СтруктураЭД.ВариантыЗаполненияПолей.ТоварКод;
	Если ЗначениеЗаполнено(СведенияОПокупателе) Тогда
		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(СведенияОПокупателе.СтранаРегистрации, ДанныеШапки.Дата);
	Иначе
		ВыводитьКодыТНВЭД = Ложь;
	КонецЕсли;

	НомерСтроки = 1;
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	Если ЗаполнятьСопоставление Тогда
		ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(ДокументОтгрузки);
		СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
		ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	КонецЕсли;
	
	// Получение данных по прослеживаемости
	ТаблицаДанныхПрослеживаемости = Неопределено;
	СтруктураДанных.Свойство("Прослеживаемость", ТаблицаДанныхПрослеживаемости);
	
	// Получение данных о прослеживаемых комплектующих
	ПрослеживаемыеКомплектующие = Неопределено;
	СтруктураДанных.Свойство("ПрослеживаемыеКомплектующие", ПрослеживаемыеКомплектующие);
	
	Пока СтрокаТовары.Следующий() Цикл
		
		Если ИспользоватьНаборы Тогда
			Если СтрокаТовары.ЭтоНабор и СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах <> Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(СтрокаТовары.Номенклатура) или ЗначениеЗаполнено(СтрокаТовары.НоменклатураНаименование))  Тогда
			Продолжить;
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			Если СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар 
				или СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
				ЕстьТовары = Истина;
			ИначеЕсли СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЕстьУслуги = Истина;
			ИначеЕсли СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				ЕстьРаботы = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СуммаСНДС   = Окр(СтрокаТовары.СуммаСНДС, 2);
		СуммаНДС    = Окр(СтрокаТовары.СуммаНДС, 2);
		СуммаБезНДС = Окр(СтрокаТовары.СуммаБезНДС, 2);
		
		НовСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовары);
		НовСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		НовСтрока.ТоварНаименование  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование
			) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru = ' (возвратная тара)';
														|en = ' (reusable package)'"), "");
			
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			НовСтрока.ТоварИдентификатор = Строка(СтрокаТовары.Номенклатура.УникальныйИдентификатор());
		КонецЕсли;
		НовСтрока.НалоговаяСтавка    = СтрокаТовары.СтавкаНДС;
			
		НовСтрока.ЦенаЗаЕдиницуИзмерения    = Окр(СтрокаТовары.Цена, 2);
		НовСтрока.СтоимостьТоваровБезНалога = СуммаБезНДС;
		НовСтрока.СуммаНалога               = СуммаНДС;
		НовСтрока.СтоимостьТоваровСНалогом  = СуммаСНДС;
		
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.НалоговаяСтавка          = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНалога              = 0;
			НовСтрока.СтоимостьТоваровСНалогом = 0;
		КонецЕсли;		
		
		УпаковкаИзДокумента = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "Упаковка") И ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
			УпаковкаИзДокумента = СтрокаТовары.Упаковка;
		ИначеЕсли ЗаполнятьСопоставление Тогда
			УпаковкаИзДокумента = ЭлектронноеВзаимодействиеУТВызовСервера.ЕдиницаХраненияНоменклатуры(СтрокаТовары.Номенклатура)
		Иначе
			УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()
		КонецЕсли;

		Если ЗаполнятьСопоставление Тогда
			// Сопоставление.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			Если СтрокаТовары.Характеристика <> Неопределено Тогда
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
			Иначе
				ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			КонецЕсли;
			ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
			СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
				НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
				НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
		    Иначе
				НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ВидСчетаФактуры = "Авансовый" Тогда
			НовСтрока.ЕдиницаИзмеренияКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
			НовСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияНаименование);
			//Анализ вариантов заполнения
			Если ЗаполнениеКодаТовара = "Штрихкод" И НовСтрока.Сопоставление.Свойство("ШтрихкодКомбинации") Тогда
				НовСтрока.ТоварКод = НовСтрока.Сопоставление.ШтрихкодКомбинации;
			ИначеЕсли ЗаполнениеКодаТовара = "Штрихкод" И (НовСтрока.Сопоставление.Свойство("ШтрихкодыНоменклатуры") И НовСтрока.Сопоставление.ШтрихкодыНоменклатуры.Количество()) Тогда
				НовСтрока.ТоварКод = НовСтрока.Сопоставление.ШтрихкодыНоменклатуры[0];				
			Иначе
				НовСтрока.ТоварКод = СтрокаТовары.НоменклатураКод;
			КонецЕсли;
			//Конец анализа вариантов заполнения
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхождения) Тогда
			НовСтрока.СтранаПроисхожденияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СтранаПроисхождения, "Наименование");
		КонецЕсли;
		
		НовСтрока.Признак = ОпределитьПризнакТовара(СтрокаТовары.Номенклатура, ДокументОтгрузки);
		
		Если Не ЭтоКомиссия 
			 И Не ВидСчетаФактуры = "Авансовый"   
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.АктВыполненныхРабот")
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВыкупТоваровХранителем")
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.КорректировкаРеализации") 
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") 
			 И ЗначениеЗаполнено(СтрокаТовары.КодТНВЭД) И ВыводитьКодыТНВЭД Тогда
			
			НовСтрока.КодВидаТовара = СтрокаТовары.КодТНВЭД.Код;
		ИначеЕсли ВидСчетаФактуры = "Авансовый" 
			И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.КодТНВЭД) И ВыводитьКодыТНВЭД Тогда
			
			НовСтрока.КодВидаТовара = СтрокаТовары.Номенклатура.КодТНВЭД.Код;
		КонецЕсли;
		
		//Заполнение Таможенной декларации
		ЗаполнитьСведенияОТаможеннойДекларации(НовСтрока, СтрокаТовары);
		//Конец заполнения Таможенной декларации
		
		// Заполнение прослеживаемости
		Если ЗначениеЗаполнено(СтрокаТовары.КоличествоПоРНПТ) Тогда
			ЗаполнитьСведенияОПрослеживаемостиУПД(НовСтрока, СтрокаТовары, ПрослеживаемыеКомплектующие)
		ИначеЕсли ЗначениеЗаполнено(ТаблицаДанныхПрослеживаемости) Тогда
			ЗаполнитьПрослеживаемостьДляРеализацииАктивов(НовСтрока,
															СтрокаТовары,
															ТаблицаДанныхПрослеживаемости,
															ВыводитьКодыТНВЭД);
		КонецЕсли;
		// Конец заполнения прослеживаемости
		
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке_2019(НовСтрока, СтрокаТовары, ТаблицаКодовМаркировки);
		

		// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			НовСтрока.ИдентификаторМестаПоставкиЕИС = ИдентификаторМестаПоставкиЕИС;
			ЭлектронноеАктированиеЕИСУТ.ЗаполнитьДанныеПоСтрокеТоваровУПД_2019(НовСтрока, СтрокаТовары, СтруктураДанных, ДанныеПриложенияЕИС);
		КонецЕсли;
		// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС

		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.ПроверитьСведенияОМаркировке_2019(ТаблицаКодовМаркировки, Отказ);
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество",,, НСтр("ru = 'Не указано количество товара в табличной части';
							|en = 'Goods amount is not specified in the tabular section'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияНаименование",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".';
												|en = 'Unit of measure name is not filled in the ""Packagings and units of measure"" catalog.'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".';
										|en = 'Unit of measure code is not populated in the ""Packagings and units of measure"" catalog.'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении страны происхождения в сведениях по ГТД. Возможные причины:
		|	- не заполнена колонка ""Страна происхождения""
		|	- указанной страны нет в классификаторе стран мира';
		|en = 'An error occurred while populating the country of origin in CCD information. Possible reasons:
		|	- The Country of origin column is not filled in
		|	- The specified country is missing in the classifier of countries of the world'");
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", ТекстОшибки);
	
	СоставСодержания = Новый Массив;
	Если Не ВидСчетаФактуры = "Авансовый" Тогда
		Если ЕстьТовары Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.';
											|en = 'Goods are transferred.'"));
		КонецЕсли;
		Если ЕстьУслуги Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.';
											|en = 'Services are provided in full.'"));
		КонецЕсли;
		Если ЕстьРаботы Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Работы выполнены в полном объеме.';
											|en = 'Works are performed in full.'"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СоставСодержания) Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.';
											|en = 'Goods are transferred.'"));
		КонецЕсли;
	Иначе
		СоставСодержания.Добавить(НСтр("ru = 'Регистрация счет-фактуры на аванс.';
										|en = 'Registration of tax invoices for advance.'"));
	КонецЕсли;
	СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	//Заполним документы основания.
	Если ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.КорректировкаРеализации")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ОтчетКомиссионера")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ОтчетКомитенту")
			//++ НЕ УТКА
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ОтчетДавальцу")
			//-- НЕ УТКА
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВыкупТоваровХранителем")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") 
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
			и Не ВидСчетаФактуры = "Авансовый" Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтгрузки, "ЗаказКлиента");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", МассивДокументовОснований);
	КонецЕсли;	
		
	Если ДанныеШапки.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеШапки.Дата);
	
	Если Не ВидСчетаФактуры = "Авансовый" Тогда
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
		
		Если ЗначениеЗаполнено(ДанныеШапки.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеШапки.ДоверенностьДата)
			И (ЗначениеЗаполнено(ДанныеШапки.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеШапки.ДоверенностьЛицо)) Тогда
			
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДокументНаименование = НСтр("ru = 'по доверенности';
													|en = 'by letter of authority'");
			НоваяСтрока.ДокументНомер = ДанныеШапки.ДоверенностьНомер;
			НоваяСтрока.ДокументДата = ДанныеШапки.ДоверенностьДата;
			НоваяСтрока.ДокументДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'выданной %1 %2';
																											|en = 'issued %1 %2'"),
					ДанныеШапки.ДоверенностьВыдана,
					ДанныеШапки.ДоверенностьЛицо);
					
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
				НСтр("ru = 'Необходимо указать дату доверенности.';
					|en = 'Specify the power of attorney date.'"));
					
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеШапки.Основание)
			И ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата) Тогда
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			Если СтрНайти(ДанныеШапки.Основание, "№") Тогда
				СтрокаНаименование = Лев(ДанныеШапки.Основание, СтрНайти(ДанныеШапки.Основание, "№") - 2);
				Если ПустаяСтрока(СтрокаНаименование) Тогда
					СтрокаНаименование = "Договор";
				КонецЕсли;
			Иначе
				СтрокаНаименование = ДанныеШапки.Основание;
			КонецЕсли;
			НоваяСтрока.ДокументНаименование = СтрокаНаименование;
			НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
			НоваяСтрока.ДокументДата = ДанныеШапки.ОснованиеДата;
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
				НСтр("ru = 'Необходимо указать дату договора.';
					|en = 'Enter contract date.'"));
			
		КонецЕсли;
		
		Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Если ЗначениеЗаполнено(ДокументОтгрузки.ДокументПоступления) Тогда
				ДокументПоступления = ДокументОтгрузки.ДокументПоступления;
				Если ЗначениеЗаполнено(ДокументПоступления.ДатаВходящегоДокумента) И ЗначениеЗаполнено(ДокументПоступления.НомерВходящегоДокумента) Тогда
					НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
					НоваяСтрока.ДокументНаименование = "Входящий электронный документ";					
					НоваяСтрока.ДокументНомер = ДокументПоступления.НомерВходящегоДокумента;
					НоваяСтрока.ДокументДата = ДокументПоступления.ДатаВходящегоДокумента;
					
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
						НСтр("ru = 'Необходимо указать дату документа поступления.';
							|en = 'Indicate inpayment document date.'"));
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			Если ЗначениеЗаполнено(ДокументОтгрузки.Договор) Тогда
				ДопДанныеДокументаОтгрузки = ДеревоДанных.Строки.Найти("ДопДанныеДокументаОтгрузки", "ПолныйПуть");
				Если Не ДопДанныеДокументаОтгрузки = Неопределено
					И ЗначениеЗаполнено(ДокументОтгрузки.Договор.Дата)
					И ЗначениеЗаполнено(ДокументОтгрузки.Договор.Номер) Тогда
					
					ДопДанныеДокументаОтгрузки.Значение = Истина;
					
					ТекстоваяИнформация = Новый ТаблицаЗначений;
					ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
					ТекстоваяИнформация.Колонки.Добавить("Значение");
					
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = "ДатаДоговора";
					НоваяСтрока.Значение = Формат(ДокументОтгрузки.Договор.Дата,"ДФ=dd.MM.yyyy");
					ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
						ДопДанныеДокументаОтгрузки, НоваяСтрока, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
					
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = "НомерДоговора";
					НоваяСтрока.Значение = ДокументОтгрузки.Договор.Номер;
					ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
						ДопДанныеДокументаОтгрузки, НоваяСтрока, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОснованиеОтгрузкиТоваров) Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
	    КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
			ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеШапки.Кладовщик);
			#Удаление
			Если ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика)
				И ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", ФИО.Отчество);
			ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик не работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
			КонецЕсли;
			#КонецУдаления
			#Вставка
			//+РС Консалт Назаров М.Ю. 07.02.2023 11:04:13 
			// Возникают ошибки если заполнять ДОЛЖНОСТЬ, поэтому перед отправкой считаем, что ДОЛЖНОСТЬ не заполнена
			Если ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик не работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
			КонецЕсли;
			//-РС Консалт Назаров М.Ю. 07.02.2023 11:04:13
			#КонецВставки
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("ПолучитьАдресСтруктурой")
Процедура РСК_ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки)

	//++ НЕ ГОСИС
	Адрес = ПолучитьАдресИзКонтактнойИнформации(СтруктураПараметров[ВидКонтрагента], ВидАдреса, СтруктураПараметров.ДатаКИ);
	#Вставка   
	//++РС Консалт Назаров М.Ю. 28 сентября 2022 г. 12:43:56                  
	ПереопределитьАдресИзДокументаДляКонтрагента(Адрес, ВидАдреса, ВидКонтрагента, СтруктураПараметров);
	//--РС Консалт Назаров М.Ю. 28 сентября 2022 г. 12:43:56
	#КонецВставки

	Параметр1 = СтруктураПараметров[ВидКонтрагента];
	Параметр2 = ?(ВидАдреса="Юр", НСтр("ru = 'юридический';
	|en = 'legal'"), НСтр("ru = 'фактический';
	|en = 'actual'"));

	Если НЕ ЗначениеЗаполнено(Адрес.Представление) Тогда

		Ошибка = НСтр("ru = 'Для %1 необходимо указать %2 адрес.';
		|en = 'Specify %2 address for %1.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2) + "'"); 
		Возврат

	ИначеЕсли НЕ ЗначениеЗаполнено(Адрес.ЗначенияПолей) Тогда
		Ошибка =  НСтр("ru = 'Для %1 необходимо заполнить %2 адрес по классификатору.';
		|en = 'Fill in %2 address for %1 according to the classifier.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2) + "'"); 
		Возврат

	КонецЕсли;

	СтруктураРезультата = Новый Структура("КодСтраны, Индекс, Регион, КодРегиона, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира");
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, РаботаСАдресами.СведенияОбАдресе(Адрес.ЗначенияПолей));

	АдресРФ = Ложь;

	Если ЗначениеЗаполнено(СтруктураРезультата.КодСтраны) Тогда
		СтруктураАдреса.Вставить("ПроизвольныйАдрес", Ложь);		
	Иначе
		СтруктураАдреса.Вставить("ПроизвольныйАдрес", Истина);		
	КонецЕсли;	
	СтруктураАдреса.Вставить("АдресРФ",     	АдресРФ);
	СтруктураАдреса.Вставить("Индекс",      	СтруктураРезультата.Индекс);
	СтруктураАдреса.Вставить("КодРегион",   	СтруктураРезультата.КодРегиона);
	СтруктураАдреса.Вставить("КодРегиона",  	СтруктураРезультата.КодРегиона);
	СтруктураАдреса.Вставить("Район",       	СтруктураРезультата.Район);
	СтруктураАдреса.Вставить("Город",       	СтруктураРезультата.Город);
	СтруктураАдреса.Вставить("НаселПункт",  	СтруктураРезультата.НаселенныйПункт);
	СтруктураАдреса.Вставить("НаселенныйПункт", СтруктураРезультата.НаселенныйПункт);
	СтруктураАдреса.Вставить("Улица",       	СтруктураРезультата.Улица);
	СтруктураАдреса.Вставить("Дом",         	СтруктураРезультата.Дом);
	СтруктураАдреса.Вставить("Корпус",      	СтруктураРезультата.Корпус);
	СтруктураАдреса.Вставить("Кварт",       	СтруктураРезультата.Квартира);
	СтруктураАдреса.Вставить("Квартира",    	СтруктураРезультата.Квартира);
	Если НЕ АдресРФ Тогда
		СтруктураАдреса.Вставить("КодСтр",   	СтруктураРезультата.КодСтраны);
		СтруктураАдреса.Вставить("КодСтраны",	СтруктураРезультата.КодСтраны);
		СтруктураАдреса.Вставить("АдрТекст", 	Адрес.Представление);
		СтруктураАдреса.Вставить("АдресТекст", 	Адрес.Представление);
	КонецЕсли;
	СтруктураАдреса.Вставить("КодГАР", 		"");
	//-- НЕ ГОСИС

КонецПроцедуры

// Получить адрес из документа "Реализация товаров и услуг", заместо Контрагента "фактический адрес"
Процедура ПереопределитьАдресИзДокументаДляКонтрагента(Адрес, Знач ВидАдреса, Знач ВидКонтрагента, Знач СтруктураПараметров)
	
	Если ВидКонтрагента <> "Ссылка" 
		Или ВидАдреса <> "Факт" Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураПараметров.Свойство("ДокументОснование")  Тогда 
		Возврат;
	КонецЕсли;                              
	
	ДокументОснование = СтруктураПараметров.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда  
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование.АдресДоставки) 
		И ЗначениеЗаполнено(ДокументОснование.АдресДоставкиЗначенияПолей) Тогда 
		
		Адрес = Новый Структура("Представление,ЗначенияПолей", ДокументОснование.АдресДоставки, ДокументОснование.АдресДоставкиЗначенияПолей);
		
	КонецЕсли;
	
КонецПроцедуры

//++РС Консалт Назаров М.Ю. 28 сентября 2022 г. 13:01:38                  
Процедура ПереопределитьНаименованияВСведениях(Сведения, Знач НаименованиеЗаказчика)
	
	Сведения.Наименование = НаименованиеЗаказчика;
	Сведения.НаименованиеДляПечатныхФорм = НаименованиеЗаказчика;
	Сведения.ПолноеНаименование = НаименованиеЗаказчика;
	Сведения.ОфициальноеНаименование = НаименованиеЗаказчика;
	Сведения.Представление = НаименованиеЗаказчика;
	Сведения.СокращенноеНаименование = НаименованиеЗаказчика;
	
КонецПроцедуры  
//--РС Консалт Назаров М.Ю. 28 сентября 2022 г. 13:01:38

&ИзменениеИКонтроль("ЗаполнитьДанныеПоОтветуНаЗаказ")
Процедура РСК_ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, ДеревоДокумента, Отказ)

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Валюта.Код КАК ВалютаКод,
	|	ЗаказКлиента.Валюта КАК Валюта,
	|	ЗаказКлиента.Дата,
	|	ЗаказКлиента.Номер,
	|	ЗаказКлиента.Организация,
	|	ЗаказКлиента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЗаказКлиента.Контрагент,
	|	ЗаказКлиента.Грузоотправитель,
	|	ЗаказКлиента.Грузополучатель,
	|	ЗаказКлиента.БанковскийСчетГрузоотправителя,
	|	ЗаказКлиента.БанковскийСчетГрузополучателя,
	|	ЗаказКлиента.СуммаДокумента,
	|	ЗаказКлиента.ЦенаВключаетНДС,
	|	ЗаказКлиента.НомерПоДаннымКлиента,
	|	ЗаказКлиента.ДатаПоДаннымКлиента,
	|	ЗаказКлиента.БанковскийСчет,	
	|	ЗаказКлиента.БанковскийСчетКонтрагента,	
	|	ЗаказКлиента.ДополнительнаяИнформация,		
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	#КонецВставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			ЗаказКлиента.АдресДоставкиПеревозчика
	|	КОНЕЦ	КАК АдресДоставки,
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента) ТОГДА
	|			ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ) ТОГДА
	|			ЗаказКлиента.АдресДоставкиЗначенияПолей
	#КонецВставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
	|			""Доставка""
	#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ) ТОГДА
	|			""Доставка""
	#КонецВставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки) ТОГДА
	|			""Доставка""
	|	КОНЕЦ	КАК СпособДоставки,
	|	ЗаказКлиента.ИдентификаторПлатежа,
	|	ЗаказКлиента.ДокументОснование,
	|	ЗаказКлиента.Договор.Номер КАК ДоговорНомер,
	|	ЗаказКлиента.Договор.Дата КАК ДоговорДата
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%1 КАК Артикул,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА Товары.Номенклатура.Наименование
	|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Упаковка КАК Упаковка,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ""НДС исчисляется налоговым агентом""
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	Товары.ПроцентРучнойСкидки + Товары.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Содержание КАК Описание,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
	"&ТекстЗапросаКодЕдиницыИзмерения",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
	"Код",
	"Товары.Упаковка",
	"Товары.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
	"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
	"Наименование",
	"Товары.Упаковка",
	"Товары.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
	"&ТекстЗапросаКоэффициентУпаковки",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
	"Товары.Упаковка",
	"Товары.Номенклатура"));

	ИмяДопКолонки = "";
	ИмяДополнительнойКолонки(ИмяДопКолонки);
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	ТекстЗапроса, 
	?(ЗначениеЗаполнено(ИмяДопКолонки), "Товары.Номенклатура." + ИмяДопКолонки, """"""));

	Запрос.Текст = ТекстЗапроса;

	ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();

	РеквизитыШапки = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();

	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.БанковскийСчет, РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр", РеквизитыШапки.Дата);
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, 
		"Продавец.БанковскийСчет.НомерСчета", 
		БанковскийСчет.НомерСчета);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, 
		"Продавец.БанковскийСчет.НаимБанк", 
		БанковскийСчет.Банк.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, 
		"Продавец.БанковскийСчет.БИК", 
		БанковскийСчет.Банк.Код);

		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;

	СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.БанковскийСчетКонтрагента, РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", РеквизитыШапки.Дата);

	Если ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель) Тогда
		СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.БанковскийСчетГрузополучателя, РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОГрузополучателе, "Получатель", "Юр", РеквизитыШапки.Дата);
	Иначе
		ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Получатель", "Юр", РеквизитыШапки.Дата);		
	КонецЕсли;

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
	ДеревоДокумента, 
	"Валюта", 
	РеквизитыШапки.ВалютаКод);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
	ДеревоДокумента, 
	"Курс", 
	РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата, РеквизитыШапки.ВалютаРегламентированногоУчета).КурсЧислитель);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
	ДеревоДокумента, 
	"Сумма", 
	РеквизитыШапки.СуммаДокумента);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
	ДеревоДокумента, 
	"Комментарий", 
	РеквизитыШапки.ДополнительнаяИнформация);

	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");

	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);			

	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);

		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		Если СтрокаТовары.Характеристика <> Неопределено Тогда
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		Иначе
			ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
		КонецЕсли;
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
		Иначе
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;		
	КонецЦикла;	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
	ДеревоДокумента, 
	"ИтогоПоДокументу.СуммаИтог", 
	ТаблицаТоваров.Итог("Сумма"));

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
	ДеревоДокумента, 
	"ИтогоПоДокументу.СуммаНалогаИтог", 
	ТаблицаТоваров.Итог("СуммаНДС"));

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
	ДеревоДокумента, 
	"ИтогоПоДокументу.ЦенаВключаетНДС", 
	РеквизитыШапки.ЦенаВключаетНДС);

	// заполнение полей дерева данных Доставка
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",	РеквизитыШапки.СпособДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
	РеквизитыШапки.АдресДоставкиЗначенияПолей);

	// Номер и дата договора.
	Если ЗначениеЗаполнено(РеквизитыШапки.ДоговорНомер) И ЗначениеЗаполнено(РеквизитыШапки.ДоговорДата) Тогда
		РеквизитыДоговора = Новый ТаблицаЗначений;
		РеквизитыДоговора.Колонки.Добавить("Идентификатор");
		РеквизитыДоговора.Колонки.Добавить("Наименование");
		РеквизитыДоговора.Колонки.Добавить("Номер");
		РеквизитыДоговора.Колонки.Добавить("Дата");

		СтрокаРеквизитыДоговора = РеквизитыДоговора.Добавить();
		СтрокаРеквизитыДоговора.Идентификатор = НСтр("ru = 'Договор';
		|en = 'Contract'");
		СтрокаРеквизитыДоговора.Наименование = НСтр("ru = 'Договор';
		|en = 'Contract'");
		СтрокаРеквизитыДоговора.Номер = РеквизитыШапки.ДоговорНомер;
		СтрокаРеквизитыДоговора.Дата = РеквизитыШапки.ДоговорДата;

		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, РеквизитыДоговора, "ДокументыСделки");
	КонецЕсли;

	// Документ основание.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);

	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");

	ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);

КонецПроцедуры


&ИзменениеИКонтроль("ЗаполнитьСведенияОТаможеннойДекларации")
Процедура РСК_ЗаполнитьСведенияОТаможеннойДекларации(ПриемникДанныхТовара, ИсточникДанныхТовара)

	Если Не ЗначениеЗаполнено(ИсточникДанныхТовара.НомерГТД) Тогда
		Возврат;
	КонецЕсли;

	СведенияОТаможеннойДекларации = ПустаяТаблицаСведенияОТаможеннойДекларации();

	СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
	СтрокаТД.ТаможеннаяДекларацияНомер = СокрЛП(Строка(ИсточникДанныхТовара.НомерГТД));
	#Вставка     
	//++ РС Консалт Петров А.В. 17.10.2022
	//Номер таможенной декларации должен быть в формате
	//(8 цифр)/(6 цифр)/(7 цифр)
	//Поэтому отсекаем все, что не попадает в длину 23 символов
	ТаможеннаяДекларацияНомер = СокрЛП(Строка(ИсточникДанныхТовара.НомерГТД));
	ТаможеннаяДекларацияНомер = Лев(ТаможеннаяДекларацияНомер, 23);
	СтрокаТД.ТаможеннаяДекларацияНомер = ТаможеннаяДекларацияНомер;
	//-- РС Консалт Петров А.В. 17.10.2022
	#КонецВставки

	Если ЗначениеЗаполнено(ИсточникДанныхТовара.СтранаПроисхожденияКод) Тогда
		СтрокаТД.СтранаПроисхожденияКод = ИсточникДанныхТовара.СтранаПроисхожденияКод;
	КонецЕсли;

	ПриемникДанныхТовара.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;

	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
	ПриемникДанныхТовара.СведенияОТаможеннойДекларации,
	"СтранаПроисхожденияКод",
	,
	,
	НСтр("ru = 'Не заполнен код страны происхождения';
	|en = 'Country of origin code is required'"));

КонецПроцедуры

