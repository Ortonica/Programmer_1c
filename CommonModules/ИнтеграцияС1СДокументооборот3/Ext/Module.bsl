
&ИзменениеИКонтроль("СоздатьОбъектыДОПоПравилам")
Функция РСК_СоздатьОбъектыДОПоПравилам(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции)

	Результат = Новый Соответствие;

	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCreateFromIncomingDataRequest");

	СоответствиеПравилЗагрузкиВДООбъектамИС = СоответствиеПравилЗагрузкиВДООбъектамИС(
	Прокси,
	СписокОбъектовИС,
	ПодходящиеПравилаИнтеграции);
	СоответствиеСпискаВыраженийОбъектамИС = СоответствиеСпискаВыраженийОбъектамИС(
	Прокси,
	СписокОбъектовИС,
	СоответствиеПравилЗагрузкиВДООбъектамИС);

	// Добавим в запрос те объекты, для которых есть единственное подходящее dataLoadingRule
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл

		РезультатПоОбъекту = Новый Структура("Успешно, ТекстОшибки, ОбъектXDTO", Истина, "", Неопределено);

		ПравилоЗагрузкиВДО = СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС];
		Если ПравилоЗагрузкиВДО = Неопределено Тогда
			РезультатПоОбъекту.Успешно = Ложь;
			РезультатПоОбъекту.ТекстОшибки = НСтр("ru = 'Не найдено подходящее правило загрузки данных в 1С:Документооборот';
			|en = 'Suitable 1C:Document Management data import rule is not found'");
			Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
			Продолжить;
		КонецЕсли;

		СтруктураСозданияОбъекта = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMIncomingDataRequestStructure");

		Попытка
			СтруктураСозданияОбъекта.incomingData = ВходящиеДанныеОбъектаИС(
			Прокси,
			ОбъектИС,
			СоответствиеСпискаВыраженийОбъектамИС[ОбъектИС]);
		Исключение
			РезультатПоОбъекту.Успешно = Ложь;
			РезультатПоОбъекту.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
			Продолжить;
		КонецПопытки;

		СтруктураСозданияОбъекта.externalObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"ExternalObjectID");
		СтруктураСозданияОбъекта.externalObject.ID = Строка(ОбъектИС.УникальныйИдентификатор());
		СтруктураСозданияОбъекта.externalObject.type = ОбъектИС.Метаданные().ПолноеИмя();

		СтруктураСозданияОбъекта.dataLoadingRule = ПравилоЗагрузкиВДО;

		Запрос.objects.Добавить(СтруктураСозданияОбъекта);

		Результат.Вставить(ОбъектИС, РезультатПоОбъекту);

	КонецЦикла;

	Если Запрос.objects.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Для Каждого СтруктураОтвета Из Ответ.objects Цикл
		ОбъектИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкаИзUUID(
		СтруктураОтвета.key.type,
		СтруктураОтвета.key.ID);
		Если СтруктураОтвета.success Тогда
			ОбъектXDTO = СтруктураОтвета.object;
			#Вставка
			//Отправим прикрепленные файлы созданных объектов
			Если Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
				//Получим все прикрепленные файлы
				МассивПрисоединенныхФайлов = Новый Массив; 
				РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОбъектИС,МассивПрисоединенныхФайлов);
				Для Каждого ФайлПрисоединенный Из МассивПрисоединенныхФайлов Цикл
					Если ФайлПрисоединенный.Размер > 0 Тогда
						Запрос 								  = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMAddFileRequest");	
						Запрос.owner 						  = ОбъектXDTO;
						Запрос.file 						  = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMFile");
						Запрос.file.objectID 				  = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, "", "DMFile");
						Запрос.file.name 					  = ФайлПрисоединенный.Наименование;
						Запрос.file.extension 				  = ФайлПрисоединенный.Расширение;
						Если РаботаСФайлами.ДвоичныеДанныеФайла(ФайлПрисоединенный, Ложь) <> Неопределено Тогда
							Запрос.file.binaryData 				  = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлПрисоединенный, Ложь);
						Иначе
							Продолжить;
						КонецЕсли;
						Запрос.file.modificationDate 		  = ФайлПрисоединенный.ДатаСоздания;
						Запрос.file.modificationDateUniversal = ФайлПрисоединенный.ДатаМодификацииУниверсальная;
						Запрос.file.size 					  = ФайлПрисоединенный.Размер;  
						
						ОтветФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
						Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОтветФайл, "DMError") Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			#КонецВставки

			Результат[ОбъектИС].ОбъектXDTO = ОбъектXDTO;

			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(
			ОбъектXDTO.objectId.ID,
			ОбъектXDTO.objectId.type,
			ОбъектИС);

			ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьШтрихкод(
			ОбъектИС,
			ОбъектXDTO.objectID.ID,
			ОбъектXDTO.objectID.type);

		Иначе
			Результат[ОбъектИС].Успешно = Ложь;
			Результат[ОбъектИС].ТекстОшибки = СтруктураОтвета.error.description;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

&ИзменениеИКонтроль("РезультатВыраженияНаВстроенномЯзыке")
Функция РСК_РезультатВыраженияНаВстроенномЯзыке(ВычисляемоеВыражение, Источник, Приемник, ТекущаяСтрока)

	// BSLLS:PairingBrokenTransaction-off
	// Проектное решение. Методы НачатьТранзакцию / ОтменитьТранзакцию используются для предотвращения
	// несанкционированных действий с БД из выражения на встроенном языке

	Параметры = Новый Структура;
	Параметры.Вставить("Источник", Источник);
	Параметры.Вставить("Приемник", Приемник);
	Параметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	Параметры.Вставить("Результат", Неопределено);

	Ошибки = "";
	НачатьТранзакцию();
	Попытка
		#Удаление
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(
		#КонецУдаления
		#Вставка
		ОбщегоНазначения.ВыполнитьАлгоритм(
		#КонецВставки
		ВычисляемоеВыражение,
		Параметры);
	Исключение
		Ошибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	Если Ошибки = "" Тогда
		Возврат Параметры.Результат;
	Иначе
		ВызватьИсключение Ошибки;
	КонецЕсли;

	// BSLLS:PairingBrokenTransaction-on

КонецФункции

Функция ЕстьСвязанныйОбъектДО(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО
	|ИЗ
	|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
	|ГДЕ
	|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект = &Объект";
	
	Результат = Запрос.Выполнить(); 
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&ИзменениеИКонтроль("ОбработатьУниверсальноеСообщение")
Функция РСК_ОбработатьУниверсальноеСообщение(Сообщение)

	Попытка

		НачалоЗамераВремени = ТекущаяДатаСеанса();

		Результат = Неопределено;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОбработкеУниверсальногоСообщения(
		Сообщение,
		Результат);
		Если Результат = Неопределено Тогда

			Если ПроверитьТипБИД(Сообщение, "DMILGetMetadataRequest") Тогда
				Результат = СтруктураМетаданныхИнтегрированнойСистемы(); 
			#Вставка
 			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILAddGetMetadataRequest") Тогда
             	Результат = СтруктураМетаданныхДополнительныхОбъектовИнтегрированнойСистемы();
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILExchangeRequest") Тогда
				Результат = ТаблицаОбъектовПоЗапросуОбмена(Сообщение);	
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILGetOptionalMetadataObjectsRequest") Тогда
				Результат = СтруктураДополнительныхРеквизитов();
				
			#КонецВставки

			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILCheckExpressionOnBuiltInLanguageRequest") Тогда
				Результат = ПроверитьВыражениеНаВстроенномЯзыке(Сообщение);

			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILRelatedIntegrationRulesExistenceRequest") Тогда
				Результат = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.СвязанныеПравилаИнтеграцииСуществуют(
				Сообщение);

			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILCreateRelatedIntegrationRuleExistenceRequest") Тогда
				Результат = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.СоздатьСвязанноеПравилоИнтеграции(
				Сообщение);

			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILGetExpressionListRequest") Тогда
				Результат = СписокВыраженийНаВстроенномЯзыкеДляВыполненияНаСторонеДО(Сообщение);

			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILPutChangesRequest") Тогда
				Возврат ИнтеграцияС1СДокументооборот3Обмен.ЗаписатьИзмененияОбъектов(Сообщение);

			КонецЕсли;

		КонецЕсли;

		Если Результат <> Неопределено Тогда
			ВремяВыполнения = ТекущаяДатаСеанса() - НачалоЗамераВремени;
			Если ВремяВыполнения > 15 Тогда
				ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;

		Ошибка = СоздатьОбъектБИД("DMILError");
		Ошибка.subject = НСтр("ru = 'Неизвестное сообщение';
		|en = 'Unknown message'");
		Ошибка.description = Строка(Сообщение.Тип());

		Возврат Ошибка;

	Исключение

		Ошибка = СоздатьОбъектБИД("DMILError");
		Ошибка.subject = НСтр("ru = 'Ошибка при обработке сообщения';
		|en = 'Message processing error'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);

		Возврат Ошибка;

	КонецПопытки;

КонецФункции

#Область СинхронизацияЧекЛистНоменклатуры_Конарев 

// Возвращает структуру метаданных ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILAddGetMetadataResponse или DMError.
//
Функция СтруктураМетаданныхДополнительныхОбъектовИнтегрированнойСистемы()
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILGetMetadataResponse");
		
		Описание = СтандартныеПодсистемыПовтИсп.НовоеОписаниеПодсистемы();
		ОбновлениеИнформационнойБазыБИД.ПриДобавленииПодсистемы(Описание);
		
		Ответ.dataBaseName = Метаданные.КраткаяИнформация;
		Ответ.dataBaseID = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ИдентификаторБазыДанных();
		Ответ.dmilVersionNumber = Описание.Версия;
		
		Синонимы = Новый Соответствие;
		
		Для Каждого ТипЗначения Из Метаданные.ОпределяемыеТипы.ДО3_ДополнительныеЗначенияИнтегрированнойСистемы.Тип.Типы() Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
			
			Если ОбъектМетаданных = Неопределено
				Или (Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
					И Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)) Тогда
				Продолжить;
			КонецЕсли;
			
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			
			ОбъектМетаданныхXDTO = СоздатьОбъектБИД("DMILMetadataObject");
			ОбъектМетаданныхXDTO.name = ПолноеИмя;
			
			ДобавитьСиноним(Синонимы, ПолноеИмя, ОбъектМетаданных.Синоним);
			
			РеквизитXDTO = СоздатьОбъектБИД("DMILMetadataAttribute");
			РеквизитXDTO.name = "Представление";
			РеквизитXDTO.synonym = НСтр("ru = 'Представление';
										|en = 'Presentation'");
			ДобавитьОписаниеТиповРеквизита(РеквизитXDTO.typesList, Новый ОписаниеТипов("Строка"), Синонимы);
			ОбъектМетаданныхXDTO.attributes.Добавить(РеквизитXDTO);
			
			ДобавитьОписаниеРеквизитов(
				ОбъектМетаданныхXDTO.attributes,
				ОбъектМетаданных.СтандартныеРеквизиты,
				Синонимы,
				Истина);
			ДобавитьОписаниеРеквизитов(
				ОбъектМетаданныхXDTO.attributes,
				ОбъектМетаданных.Реквизиты,
				Синонимы);
			
			ВладелецСвойств = Новый(ТипЗначения);
			Если УправлениеСвойствами.ИспользоватьДопРеквизиты(ВладелецСвойств) Тогда
				ДобавитьОписаниеДопРеквизитов(
					ОбъектМетаданныхXDTO.attributes,
					УправлениеСвойствами.СвойстваОбъекта(ВладелецСвойств, Истина, Ложь),
					Синонимы);
			КонецЕсли;
			
			Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
				
				Если ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты" Или Лев(ТабличнаяЧасть.Имя, 7) = "Удалить" Тогда
					Продолжить;
				КонецЕсли;
				
				ТабличнаяЧастьXDTO = СоздатьОбъектБИД("DMILMetadataTabularSection");
				ТабличнаяЧастьXDTO.name = ТабличнаяЧасть.Имя;
				ТабличнаяЧастьXDTO.synonym = ТабличнаяЧасть.Синоним;
				
				ДобавитьОписаниеРеквизитов(
					ТабличнаяЧастьXDTO.attributes,
					ТабличнаяЧасть.СтандартныеРеквизиты,
					Синонимы,
					Истина);
				ДобавитьОписаниеРеквизитов(
					ТабличнаяЧастьXDTO.attributes,
					ТабличнаяЧасть.Реквизиты,
					Синонимы);
				
				ОбъектМетаданныхXDTO.tabularSections.Добавить(ТабличнаяЧастьXDTO);
				
			КонецЦикла;
			
			Ответ.metadataObjects.Добавить(ОбъектМетаданныхXDTO);
		КонецЦикла;
		
		Для Каждого Синоним Из Синонимы Цикл
			ОбъектМетаданныхXDTO = СоздатьОбъектБИД("DMILMetadataSynonym");
			ОбъектМетаданныхXDTO.name = Синоним.Ключ;
			ОбъектМетаданныхXDTO.synonym = Синоним.Значение;
			Ответ.metadataSynonyms.Добавить(ОбъектМетаданныхXDTO);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъектБИД("DMILError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении данных хронометража';
								|en = 'An error occurred when receiving the timing data'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает список дополнительных реквизитов системы.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetOptionalMetadataObjectsResponse или DMError.
//
Функция СтруктураДополнительныхРеквизитов()
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILGetOptionalMetadataObjectsResponse");
		
		ДополнительныеРеквизиты = ВыборкаДополнительныхРеквизитовСистемы();
		
		Пока ДополнительныеРеквизиты.Следующий() Цикл 
			
			ДополнительныйРеквизитXDTO = СоздатьОбъектБИД("DMILOptionalMetadataObject");		
			ЗаполнитьЗначенияСвойств(ДополнительныйРеквизитXDTO, ДополнительныеРеквизиты);

			Ответ.optionalMetadataObjects.Добавить(ДополнительныйРеквизитXDTO);

		КонецЦикла;			
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъектБИД("DMILError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении данных'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Возвращает выборку дополнительных реквизитов
//
Функция ВыборкаДополнительныхРеквизитовСистемы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизитыИСведения.Наименование КАК synonym,
	|	ДополнительныеРеквизитыИСведения.Имя КАК name,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДополнительныеРеквизитыИСведения.НаборСвойств) КАК setName
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств <> ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|	И ДополнительныеРеквизитыИСведения.Имя <> """""; 
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат;
		
КонецФункции

// Возвращает таблицу объектов по запросу
//
Функция ТаблицаОбъектовПоЗапросуОбмена(Сообщение) 
	
	Если НЕ ЗначениеЗаполнено(Сообщение.exchangeSettings) Тогда 
		
		Ошибка = СоздатьОбъектБИД("DMILError");
		Ошибка.subject = НСтр("ru = 'Ошибка при обработке сообщения';
		|en = 'Message processing error'");
        Ошибка.description = "Не заполнены настройки обмена";
		
		Возврат Ошибка;
		
	КонецЕсли;
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILExchangeResponse");
	
		ПолнаяСинхронизация = Сообщение.fullExchange;
		НастройкиОбмена     = ВосстановитьЗначениеНастроек(Сообщение.exchangeSettings); 
		
		ТаблицаОбмена = Новый ТаблицаЗначений;
		ТаблицаОбмена.Колонки.Добавить("AttributeID",      Новый ОписаниеТипов("Строка"));
		ТаблицаОбмена.Колонки.Добавить("AddAttribute",     Новый ОписаниеТипов("Булево"));
		ТаблицаОбмена.Колонки.Добавить("ObjectID",         Новый ОписаниеТипов("Строка"));
		ТаблицаОбмена.Колонки.Добавить("MetadataSynonym",  Новый ОписаниеТипов("Строка"));
		ТаблицаОбмена.Колонки.Добавить("Attributes",       Новый ОписаниеТипов("Строка"));
		ТаблицаОбмена.Колонки.Добавить("SystemObjectName", Новый ОписаниеТипов("Строка"));
		ТаблицаОбмена.Колонки.Добавить("SystemObjectID",   Новый ОписаниеТипов("Строка"));
		
		Для Каждого Настройка Из НастройкиОбмена Цикл 
			
			Если ПолнаяСинхронизация Тогда
				СинхронизируемыеРеквизиты = Неопределено; 
				Если Настройка.Attributes <> Неопределено Тогда
					СинхронизируемыеРеквизиты = РСК_Сервер.ПроизвестиЧтениеТаблицыИзXMLСервер(Настройка.Attributes);
				КонецЕсли; 
				
				Если Настройка.AddAttribute Тогда
					ДанныеСинхронизации = ДополнительныйРеквизитКЗагрузке(Настройка.AddAttributeName);
					ДополнитьТаблицуОбмена(ТаблицаОбмена, ДанныеСинхронизации.ВыборкаРеквизитов, 
															Настройка, СинхронизируемыеРеквизиты, 
															ДанныеСинхронизации.ЗначенияРеквизитов);
				Иначе
					ОбъектыСинхронизации = ВыбратьОбъектыИБПоНастройке(Настройка.MetadataSynonym, СинхронизируемыеРеквизиты); 
					ДополнитьТаблицуОбмена(ТаблицаОбмена, ОбъектыСинхронизации, Настройка, СинхронизируемыеРеквизиты);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла; 
		
		ResponseData       = РСК_Сервер.ПроизвестиЗаписьТаблицыВXMLСервер(ТаблицаОбмена); 
		Ответ.ResponseData = ResponseData;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъектБИД("DMILError");
		Ошибка.subject = НСтр("ru = 'Ошибка при обработке сообщения';
		|en = 'Message processing error'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);

		Возврат Ошибка;
	
		
	КонецПопытки;
		
КонецФункции  

// Восстанавливает значение настроек их xml строки.
//
// Возвращаемое значение:
//   МассивНастроек - массив, содержащий настройки обмена.
//
Функция ВосстановитьЗначениеНастроек(exchangeSettings)
	
	ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(exchangeSettings);
    ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core","Array");
    ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъектаXDTO); 
    ОбъектXDTO.Проверить();
    
    ЧтениеXML.Закрыть();
    МассивНастроек = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
    Возврат МассивНастроек;

Конецфункции

// Выбирает объекты базы данных для обмена 
//
// Возвращаемое значение:
//   ВыборкаОбъектов - выборка объектов для обмена.
//
Функция ВыбратьОбъектыИБПоНастройке(ПолноеИмяОбъектаМетаданных, СинхронизируемыеРеквизиты)
	
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектМД.Ссылка КАК Ссылка,
	|	ОбъектМД.Наименование КАК Наименование
	|	//ДополнительноСинхронизируются
	|ИЗ
	|	ОбъектМетаданных КАК ОбъектМД"; 
	
	Если СинхронизируемыеРеквизиты <> Неопределено И СинхронизируемыеРеквизиты.Количество() > 0 Тогда 
		Шаблон = ",ОбъектМД.%1 КАК %1";
		СтрокаДополнительныехРеквизитов = "";
		Для Каждого Стр из СинхронизируемыеРеквизиты Цикл
			СтрокаДополнительныехРеквизитов = СтрокаДополнительныехРеквизитов + СтрШаблон(Шаблон,Стр.Реквизит) + Символы.ПС;			
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДополнительноСинхронизируются", СтрокаДополнительныехРеквизитов); 	
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМД) И ОбъектМД.Иерархический Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "ГДЕ ОбъектМД.ЭтоГруппа = Ложь"; 
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеИерархии","ГДЕ ОбъектМД.ЭтоГруппа = Ложь");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОбъектМетаданных", ПолноеИмяОбъектаМетаданных); 
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаОбъектов; 

КонецФункции

// Выбирает дополнительные реквизиты для обмена
//
Функция ДополнительныйРеквизитКЗагрузке(Имя)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Имя",Имя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|	ДополнительныеРеквизитыИСведения.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Имя = &Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|  ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗначенияСвойствОбъектов.Ссылка) КАК Значение
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец.Имя = &Имя";
	
	Результат = Запрос.ВыполнитьПакет();  
	
	Возврат Новый Структура("ВыборкаРеквизитов,ЗначенияРеквизитов",Результат[0].Выбрать(),Результат[1].Выгрузить().ВыгрузитьКолонку("Значение"));
	
КонецФункции

// Дополняет таблицу обмена объектами 
//
Процедура ДополнитьТаблицуОбмена(ТаблицаОбмена, ОбъектыСинхронизации, Настройка, СинхронизируемыеРеквизиты, ДополнительныеЗначения = Неопределено)
	
	НеобходимаЗаписьДополнительныхРеквизитов = СинхронизируемыеРеквизиты <> Неопределено И СинхронизируемыеРеквизиты.Количество() > 0;
	Если НеобходимаЗаписьДополнительныхРеквизитов Тогда
		Реквизиты = СинхронизируемыеРеквизиты.ВыгрузитьКолонку("Реквизит");
		СтруктураДополнительныхРеквизитов = Новый Структура(СтрСоединить(Реквизиты,","));
	КонецЕсли;
	Пока ОбъектыСинхронизации.Следующий() Цикл
		НоваяСтрока = ТаблицаОбмена.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Настройка);
		НоваяСтрока.SystemObjectName = ОбъектыСинхронизации.Наименование; 
		НоваяСтрока.SystemObjectID   = Строка(ОбъектыСинхронизации.Ссылка.УникальныйИдентификатор());
		Если НеобходимаЗаписьДополнительныхРеквизитов Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДополнительныхРеквизитов, ОбъектыСинхронизации); 
			Для Каждого Значение Из СтруктураДополнительныхРеквизитов Цикл
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение.Значение)) Тогда
					СтруктураДополнительныхРеквизитов.Вставить(Значение.Ключ, 
												Новый Структура("Наименование,Ссылка",Строка(Значение.Значение),Строка(Значение.Значение.УникальныйИдентификатор())));		
				КонецЕсли;
			КонецЦикла;
			НоваяСтрока.Attributes = РСК_Сервер.ПроизвестиЗаписьТаблицыВXMLСервер(СтруктураДополнительныхРеквизитов);
		ИначеЕсли ДополнительныеЗначения <> Неопределено Тогда
			НоваяСтрока.Attributes = РСК_Сервер.ПроизвестиЗаписьТаблицыВXMLСервер(ДополнительныеЗначения);			
		Иначе
			НоваяСтрока.Attributes = Неопределено;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры 

#КонецОбласти
 

