
&ИзменениеИКонтроль("СоздатьОбъектыДОПоПравилам")
Функция РСК_СоздатьОбъектыДОПоПравилам(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции)

	Результат = Новый Соответствие;

	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCreateFromIncomingDataRequest");

	СоответствиеПравилЗагрузкиВДООбъектамИС = СоответствиеПравилЗагрузкиВДООбъектамИС(
	Прокси,
	СписокОбъектовИС,
	ПодходящиеПравилаИнтеграции);
	СоответствиеСпискаВыраженийОбъектамИС = СоответствиеСпискаВыраженийОбъектамИС(
	Прокси,
	СписокОбъектовИС,
	СоответствиеПравилЗагрузкиВДООбъектамИС);

	// Добавим в запрос те объекты, для которых есть единственное подходящее dataLoadingRule
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл

		РезультатПоОбъекту = Новый Структура("Успешно, ТекстОшибки, ОбъектXDTO", Истина, "", Неопределено);

		ПравилоЗагрузкиВДО = СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС];
		Если ПравилоЗагрузкиВДО = Неопределено Тогда
			РезультатПоОбъекту.Успешно = Ложь;
			РезультатПоОбъекту.ТекстОшибки = НСтр("ru = 'Не найдено подходящее правило загрузки данных в 1С:Документооборот';
			|en = 'Suitable 1C:Document Management data import rule is not found'");
			Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
			Продолжить;
		КонецЕсли;

		СтруктураСозданияОбъекта = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMIncomingDataRequestStructure");

		Попытка
			СтруктураСозданияОбъекта.incomingData = ВходящиеДанныеОбъектаИС(
			Прокси,
			ОбъектИС,
			СоответствиеСпискаВыраженийОбъектамИС[ОбъектИС]);
		Исключение
			РезультатПоОбъекту.Успешно = Ложь;
			РезультатПоОбъекту.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
			Продолжить;
		КонецПопытки;

		СтруктураСозданияОбъекта.externalObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"ExternalObjectID");
		СтруктураСозданияОбъекта.externalObject.ID = Строка(ОбъектИС.УникальныйИдентификатор());
		СтруктураСозданияОбъекта.externalObject.type = ОбъектИС.Метаданные().ПолноеИмя();

		СтруктураСозданияОбъекта.dataLoadingRule = ПравилоЗагрузкиВДО;

		Запрос.objects.Добавить(СтруктураСозданияОбъекта);

		Результат.Вставить(ОбъектИС, РезультатПоОбъекту);

	КонецЦикла;

	Если Запрос.objects.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Для Каждого СтруктураОтвета Из Ответ.objects Цикл
		ОбъектИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкаИзUUID(
		СтруктураОтвета.key.type,
		СтруктураОтвета.key.ID);
		Если СтруктураОтвета.success Тогда
			ОбъектXDTO = СтруктураОтвета.object;
			#Вставка
			//Отправим прикрепленные файлы созданных объектов
			Если Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
				//Получим все прикрепленные файлы
				МассивПрисоединенныхФайлов = Новый Массив; 
				РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОбъектИС,МассивПрисоединенныхФайлов);
				Для Каждого ФайлПрисоединенный Из МассивПрисоединенныхФайлов Цикл
					Если ФайлПрисоединенный.Размер > 0 Тогда
						Запрос 								  = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMAddFileRequest");	
						Запрос.owner 						  = ОбъектXDTO;
						Запрос.file 						  = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMFile");
						Запрос.file.objectID 				  = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, "", "DMFile");
						Запрос.file.name 					  = ФайлПрисоединенный.Наименование;
						Запрос.file.extension 				  = ФайлПрисоединенный.Расширение;
						Если РаботаСФайлами.ДвоичныеДанныеФайла(ФайлПрисоединенный, Ложь) <> Неопределено Тогда
							Запрос.file.binaryData 				  = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлПрисоединенный, Ложь);
						Иначе
							Продолжить;
						КонецЕсли;
						Запрос.file.modificationDate 		  = ФайлПрисоединенный.ДатаСоздания;
						Запрос.file.modificationDateUniversal = ФайлПрисоединенный.ДатаМодификацииУниверсальная;
						Запрос.file.size 					  = ФайлПрисоединенный.Размер;  
						
						ОтветФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
						Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОтветФайл, "DMError") Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			#КонецВставки

			Результат[ОбъектИС].ОбъектXDTO = ОбъектXDTO;

			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(
			ОбъектXDTO.objectId.ID,
			ОбъектXDTO.objectId.type,
			ОбъектИС);

			ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьШтрихкод(
			ОбъектИС,
			ОбъектXDTO.objectID.ID,
			ОбъектXDTO.objectID.type);

		Иначе
			Результат[ОбъектИС].Успешно = Ложь;
			Результат[ОбъектИС].ТекстОшибки = СтруктураОтвета.error.description;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

&ИзменениеИКонтроль("РезультатВыраженияНаВстроенномЯзыке")
Функция РСК_РезультатВыраженияНаВстроенномЯзыке(ВычисляемоеВыражение, Источник, Приемник, ТекущаяСтрока)

	// BSLLS:PairingBrokenTransaction-off
	// Проектное решение. Методы НачатьТранзакцию / ОтменитьТранзакцию используются для предотвращения
	// несанкционированных действий с БД из выражения на встроенном языке

	Параметры = Новый Структура;
	Параметры.Вставить("Источник", Источник);
	Параметры.Вставить("Приемник", Приемник);
	Параметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	Параметры.Вставить("Результат", Неопределено);

	Ошибки = "";
	НачатьТранзакцию();
	Попытка
		#Удаление
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(
		#КонецУдаления
		#Вставка
		ОбщегоНазначения.ВыполнитьАлгоритм(
		#КонецВставки
		ВычисляемоеВыражение,
		Параметры);
	Исключение
		Ошибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	Если Ошибки = "" Тогда
		Возврат Параметры.Результат;
	Иначе
		ВызватьИсключение Ошибки;
	КонецЕсли;

	// BSLLS:PairingBrokenTransaction-on

КонецФункции

Функция ЕстьСвязанныйОбъектДО(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО КАК ИдентификаторОбъектаДО
	|ИЗ
	|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
	|ГДЕ
	|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект = &Объект";
	
	Результат = Запрос.Выполнить(); 
	Возврат НЕ Результат.Пустой();
	
КонецФункции
