// Возвращает значения реквизита, прочитанного из информационной базы по ссылке на объект.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// РС Консалт: Трофимов Евгений 05.07.2022
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  ИмяРеквизита       - Строка - имя получаемого реквизита.
//                                Допускается указание имени реквизита через точку, но при этом параметр КодЯзыка для
//                                такого реквизита учитываться не будет.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя;
//                                если есть ограничение на уровне записей, то возвращается Неопределено;
//                                если нет прав для работы с таблицей, то возникнет исключение;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//  КодЯзыка - Строка - код языка для мультиязычного реквизита. Значение по умолчанию - основной язык конфигурации.
//
// Возвращаемое значение:
//  Произвольный - если в параметр Ссылка передана пустая ссылка, то возвращается Неопределено.
//                 Если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//                 то возвращается Неопределено.
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено) Экспорт

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные, КодЯзыка);

КонецФункции // ЗначениеРеквизитаОбъекта()

//Для подписки РСК_ЗаписатьВерсиюДокумента
//РС Консалт: Трофимов Евгений 05.07.2022
Процедура РСК_ЗаписатьВерсиюДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(Источник, РежимЗаписи);
КонецПроцедуры

// Выполняет запрос и возвращает структуру первой строки результата запроса
// РС Консалт: Трофимов Евгений 05.07.2022
//
// Параметры:
//  Запрос									 - Запрос - Объект запрос, созданный конструктором Новый Запрос;
//  НеопределённостьПриОтсутствииРезультата	 - Булево - Если True то вернёт Неопределено при пустом результате запроса. 
//														Если False то вернёт структуру полей запроса со значениями Неопределено
//														при пустом результате запроса.
// 
Функция ЗапросВСтруктуру(Запрос, НеопределённостьПриОтсутствииРезультата = Ложь) Экспорт

	Результат = Запрос.Выполнить().Выгрузить();
	 
	СтруктураРезультат = Новый Структура();
	Если Результат.Количество() = 0 Тогда
		Если НеопределённостьПриОтсутствииРезультата Тогда
			Возврат Неопределено;
		КонецЕсли;
	    Для Каждого КолонкаРезультата Из Результат.Колонки Цикл
	        СтруктураРезультат.Вставить(КолонкаРезультата.Имя);
	    КонецЦикла;
	Иначе
	    Для Каждого КолонкаРезультата Из Результат.Колонки Цикл
	        СтруктураРезультат.Вставить(КолонкаРезультата.Имя, Результат[0][КолонкаРезультата.Имя]);
	    КонецЦикла;
	КонецЕсли;
	Возврат СтруктураРезультат;

КонецФункции // ЗапросВСтруктуру()

// Возвращает список значений заказов клиента
// РС Консалт: Трофимов Евгений 05.07.2022 Выдача ТСР
//
// Параметры:
//  ЗаданиеНаПеревозку	 - ДокументСсыока.ЗаданиеНаПеревозку - Загрузочная ведомость 
//  НезаполненныеАкты	 - Массив - Массив, который заполнится актами с незаполненной номенклатурой
// 
Функция ПолучитьСписокЗаказов(ЗаданиеНаПеревозку, НезаполненныеАкты = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоручениеЭкспедиторуОснования.Основание КАК Заказ
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоручениеЭкспедитору.Основания КАК ПоручениеЭкспедиторуОснования
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Распоряжение = ПоручениеЭкспедиторуОснования.Ссылка
		|ГДЕ
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &ЗаданиеНаПеревозку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоручениеЭкспедитору.Ссылка КАК НезаполненныйАкт
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоручениеЭкспедитору КАК ПоручениеЭкспедитору
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Распоряжение = ПоручениеЭкспедитору.Ссылка
		|ГДЕ
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &ЗаданиеНаПеревозку
		|	И ПоручениеЭкспедитору.РСК_Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	СписокЗаказов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокЗаказов.Добавить(Выборка.Заказ);
	КонецЦикла;
	
	НезаполненныеАкты = Результаты[1].Выгрузить().ВыгрузитьКолонку("НезаполненныйАкт");
	
	Возврат СписокЗаказов;

КонецФункции // ПолучитьСписокЗаказов()

// Вносит зименение в реквизит справочника или документа и записывает его.
// РС Консалт: Трофимов Евгений 05.07.2022
//
// Параметры:
//  Ссылка			 - ЛюбаяСсылка - Ссылка на документ или справочник
//  ИмяРеквизита	 - Строка - Имя реквизита
//  НовоеЗначение	 - Неопределено - Новое значение реквизита
//  Привилегированный- Булево - Привилегированный режим
//
Процедура ИзменитьЗначениеРеквизита(Ссылка, ИмяРеквизита, НовоеЗначение, Привилегированный = Ложь) Экспорт
	
	Если Привилегированный Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	о = Ссылка.ПолучитьОбъект();
	МетаданныеОбъекта = о.Метаданные();
	о[ИмяРеквизита] = НовоеЗначение;
	
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		Если о.Проведен Тогда
			о.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			о.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Иначе
		о.Записать();
	КонецЕсли;
КонецПроцедуры

//Возвращает внешнюю обработку печатной формы
// РС Консалт: Трофимов Евгений 05.07.2022
//
// Параметры:
//  Акт	 - ДокументСсылка.ПоручениеЭкспедитору - Ссылка на документ Акт Выдачи ТСР
// 
Функция НайтиВПФ(Акт) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказКлиента.РСК_ПечатнаяФормаАкта КАК ПечатнаяФормаАкта
		|ИЗ
		|	Документ.ПоручениеЭкспедитору.Основания КАК ПоручениеЭкспедиторуОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО ПоручениеЭкспедиторуОснования.Основание = ЗаказКлиента.Ссылка
		|ГДЕ
		|	ПоручениеЭкспедиторуОснования.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Акт);
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		ОбщегоНазначения.СообщитьПользователю("Не прикреплён заказ к акту!",Акт);
		Возврат Неопределено;
	КонецЕсли;
	
	ВПФ = Выборка.ПечатнаяФормаАкта;
	Если НЕ ЗначениеЗаполнено(ВПФ) Тогда
		ОбщегоНазначения.СообщитьПользователю("Печатная форма акта не указана!",Акт);
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанные = ВПФ.ХранилищеОбработки.Получить();
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,, Ложь);
	Возврат ВПФ;
	
КонецФункции

// Возвращает числовой уникальный код строки табличной части
// РС Консалт: Трофимов Евгений 05.07.2022
//
// Параметры:
//  тз				 - ТаблицаЗначений - Людая таблица значений
//  ИмяКолонкиКлючей - Строка - Имя колонки для которой нужно сгенерировать уникальное число
// 
Функция ПолучитьНовыйКлючСтрокиТЗ2(тз, ИмяКолонкиКлючей = "КлючСтроки") Экспорт

	Если тз.Количество() = 0 Тогда
		МаксКлюч = 1;
	Иначе
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.ЗагрузитьЗначения(тз.ВыгрузитьКолонку(ИмяКолонкиКлючей));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЕсли;

	Возврат МаксКлюч;

КонецФункции // ПолучитьНовыйКлючСвязи()

// Возвращает структуру ПараметрыОткрытия для открытия печатной формы
// Использовать на клиенте так:
//
// ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия);
// РС Консалт: Трофимов Евгений 05.07.2022
//
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка - ссылка на печатуемый документ
//  ИмяПФ			 - Строка - Наименование внешней печатной формы
// 
Функция ПолучитьПараметрыОткрытияПечатнойФормы(СсылкаНаОбъект, ИмяПФ) Экспорт

	Если ТипЗнч(ИмяПФ) = Тип("Строка") Тогда
	    СсылкаНаВПФ = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяПФ,Истина);
	ИначеЕсли ТипЗнч(ИмяПФ) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		СсылкаНаВПФ = ИмяПФ;
	Иначе
		ВызватьИсключение "Указан неправильный тип переменной «ИмяПФ»";
	КонецЕсли;
	ДвоичныеДанные = СсылкаНаВПФ.ХранилищеОбработки.Получить();
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,, Ложь);
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("Массив") Тогда
		ОбъектыНазначения = СсылкаНаОбъект;
	Иначе
		ОбъектыНазначения = Новый Массив;
		ОбъектыНазначения.Добавить(СсылкаНаОбъект);
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура("ИсточникДанных, ПараметрыИсточника");
	ПараметрыОткрытия.ИсточникДанных = СсылкаНаВПФ;
	ПараметрыОткрытия.ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, ОбъектыНазначения");
	ИдентификаторКомандыПечати1 = СсылкаНаВПФ.Команды[0].Идентификатор;
	ПараметрыОткрытия.ПараметрыИсточника.ИдентификаторКоманды = ИдентификаторКомандыПечати1;
	ПараметрыОткрытия.ПараметрыИсточника.ОбъектыНазначения = ОбъектыНазначения;
	
	Возврат ПараметрыОткрытия;

КонецФункции // ПолучитьПараметрыОткрытияПечатнойФормы()

// Возвращает массив печатных форм
// РС Консалт: Трофимов Евгений 05.07.2022 Выдача ТСР
//
// Параметры:
//  ОбъектыНазначения	 - Массив - Массив ссылок на печатаемые объекты
//  ВнешняяПечатнаяФорма - ВнешняяОбработка - Внешняя печатная форма, подключенная функцией НайтиВПФ()
//  ПараметрыВывода		 - Структура - Можно предварительно заполнить используя РСК_ВызовСервера.ПодготовитьСтруктуруПараметровВывода()
//						   			   и добавить свои ключи 
// 
Функция ПечатьЧужойФормыНаСервере(ОбъектыНазначения, ВнешняяПечатнаяФорма, ПараметрыВывода = Неопределено) Экспорт
	
	Если ТипЗнч(ВнешняяПечатнаяФорма) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		ВПФ = ВнешняяПечатнаяФорма;
	ИначеЕсли ТипЗнч(ВнешняяПечатнаяФорма) = Тип("СправочникСсылка.РСК_ВариантыМакетовПечатныхФорм") Тогда
		СтруктураВПФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВнешняяПечатнаяФорма, "ВнешняяПечатнаяФорма,Макет");
		ВПФ = СтруктураВПФ.ВнешняяПечатнаяФорма;
	КонецЕсли;
	
    КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ВПФ.Команды[0].Идентификатор);  
	
	Если ПараметрыВывода = Неопределено Тогда
    	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	КонецЕсли;
	
	Если ТипЗнч(ВнешняяПечатнаяФорма) = Тип("СправочникСсылка.РСК_ВариантыМакетовПечатныхФорм") Тогда
		ПараметрыВывода.Вставить("Макет", СтруктураВПФ.Макет.Получить());
	КонецЕсли;

	ДвоичныеДанные = ВПФ.ХранилищеОбработки.Получить();
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяОбр = ВнешниеОбработки.Подключить(АдресВоВременномХранилище,, Ложь);
	ОбъектыПечати = Новый СписокЗначений;	
	Об	= ВнешниеОбработки.Создать(ИмяОбр);
	Об.Печать(ОбъектыНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
    МассивПечатныхФорм = ОбщегоНазначения.ТаблицаЗначенийВМассив(КоллекцияПечатныхФорм);
    Возврат МассивПечатныхФорм;
КонецФункции

// Подготовить структуру параметров вывода для менеджера объекта формирующего печатные формы.
// Используется в функции ПечатьЧужойФормыНаСервере()
//
// Возвращаемое значение:
//  Структура:
//   * ПараметрыОтправки - Структура:
//     ** Получатель - Неопределено, Произвольный
//     ** Тема - Строка
//     ** Текст - Строка
//   * КодЯзыка - Строка
//   * ДоступнаПечатьПоКомплектно - Булево
//   * ЗаголовокФормы - Строка
//
Функция ПодготовитьСтруктуруПараметровВывода() Экспорт

	Возврат УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();

КонецФункции // ПодготовитьСтруктуруПараметровВывода()

// Возвращает ТабличныйДокумент слепленных нескольких табличных документов. 
// РС Консалт: Трофимов Евгений 05.07.2022 Выдача ТСР
//
// Параметры:
//  МассивДокументов - Массив - Массив табличных документов
// 
Функция СлепитьАкты(МассивДокументов) Экспорт
	ТДПечать = Новый ТабличныйДокумент;
	Для каждого док из МассивДокументов Цикл
		ТДПечать.Вывести(док);
		ТДПечать.ВывестиГоризонтальныйРазделительСтраниц(); 
	КонецЦикла;
	ТДПечать.АвтоМасштаб = Истина;
	Возврат ТДПечать;
КонецФункции

// Возвращает ТабличныйДокумент Акта выдачи ТСР
// РС Консалт: Трофимов Евгений 05.07.2022 Выдача ТСР
//
// Параметры:
//  МассивАктов	 - Массив - Массив ссылок на документ ПоручениеЭкспедитору
// 
Функция ПечатьАктов(МассивАктов) Экспорт
	МассивДокументов = Новый Массив;
	МассивКонтрактовБезПечатнойФормы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоручениеЭкспедитору.Ссылка КАК Акт,
		|	ЗаказКлиента.РСК_ПечатнаяФормаАкта КАК ПечатнаяФормаАкта,
		|	ЗаказКлиента.Ссылка КАК Контракт
		|ИЗ
		|	Документ.ПоручениеЭкспедитору КАК ПоручениеЭкспедитору
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоручениеЭкспедитору.Основания КАК ПоручениеЭкспедиторуОснования
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|			ПО ПоручениеЭкспедиторуОснования.Основание = ЗаказКлиента.Ссылка
		|		ПО ПоручениеЭкспедитору.Ссылка = ПоручениеЭкспедиторуОснования.Ссылка
		|			И (ПоручениеЭкспедиторуОснования.НомерСтроки = 1)
		|ГДЕ
		|	ПоручениеЭкспедитору.Ссылка В(&МассивАктов)";
	
	Запрос.УстановитьПараметр("МассивАктов", МассивАктов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ПечатнаяФормаАкта) Тогда 
			Если МассивКонтрактовБезПечатнойФормы.Найти(Выборка.Контракт) = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(
					"Печатная форма акта в заказе не указана!",
					Выборка.Контракт,
					"РСК_ПечатнаяФормаАкта"
				);
				МассивКонтрактовБезПечатнойФормы.Добавить(Выборка.Контракт);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		
		ОбъектыНазначения = Новый Массив;
		ОбъектыНазначения.Добавить(Выборка.Акт);
		
		МассивПечатныхФорм = РСК_ВызовСервера.ПечатьЧужойФормыНаСервере(
			ОбъектыНазначения, 
			Выборка.ПечатнаяФормаАкта 
		);

		МассивДокументов.Добавить(МассивПечатныхФорм[0].ТабличныйДокумент);
	КонецЦикла;
	
	Возврат СлепитьАкты(МассивДокументов);

КонецФункции // ПечатьАктов()

// Возвращает ВозвращаемоеЗначение, если ПроверяемоеЗначение = NULL
// РС Консалт: Трофимов Евгений 05.07.2022
//
// Параметры:
//  ПроверяемоеЗначение	 - Любое - 
//  ВозвращаемоеЗначение - Любое - 
// 
Функция ЕстьNULL(ПроверяемоеЗначение, ВозвращаемоеЗначение) Экспорт
 
    Если ПроверяемоеЗначение = NULL Тогда
        Возврат ВозвращаемоеЗначение;
    Иначе
        Возврат ПроверяемоеЗначение;
    КонецЕсли;
 
КонецФункции // ЕстьNULL()

// Возвращает соответствие ставок классификатора ТНВЭД
// РС Консалт: Трофимов Евгений 12.07.2022
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Можно указывать массив или таблицу значений с колонкой "Номенклатура"
// 
Функция ПолучитьСтавкиТНВЭД(Номенклатура) Экспорт

	Ном = Номенклатура;
	Если ТипЗнч(Номенклатура) = Тип("ТаблицаЗначений") Тогда
		Ном = Номенклатура.ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(КлассификаторТНВЭД.РСК_СтавкаТаможеннойНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК СтавкаТаможеннойНДС,
		|	ЕСТЬNULL(КлассификаторТНВЭД.РСК_СтавкаТаможеннойПошлины, 0) КАК СтавкаТаможеннойПошлины,
		|	ЕСТЬNULL(КлассификаторТНВЭД.РСК_СтавкаВесовойПошлины, 0) КАК СтавкаВесовойПошлиныКГ,
		|	ЕСТЬNULL(КлассификаторТНВЭД.РСК_ВалютаВесовойПошлины, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаВесовойПошлины
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
		|		ПО Номенклатура.КодТНВЭД = КлассификаторТНВЭД.Ссылка
		|ГДЕ
		|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Ном);
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Новый Структура(
			"СтавкаТаможеннойНДС,СтавкаТаможеннойПошлины,СтавкаВесовойПошлиныКГ,ВалютаВесовойПошлины",
			Выборка.СтавкаТаможеннойНДС,
			Выборка.СтавкаТаможеннойПошлины,
			Выборка.СтавкаВесовойПошлиныКГ,
			Выборка.ВалютаВесовойПошлины			
		));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтавкиТНВЭД()

// Проверка наличия роли у пользователя
//https://infostart.ru/1c/articles/1085518/
//Если в программном коде необходимо проверить установлена ли какая-либо роль у текущего пользователя, 
//то можно воспользоваться функцией глобального контекста РольДоступна(<Роль>), 
//которая возвращает значение Истина, если указанная в скобках роль доступна и Ложь, если не доступна. 
//
//Однако, в конфигурациях на основе БСП при включении пользователя в предопределенную группу доступа Администраторы, 
//пользователю назначаются только две роли: Полные права и Администрирование 
//(в этом можно убедиться с помощью Конфигуратора: Администрирование - Пользователи - Пользователь - Прочие). 
//Все остальные роли отключаются вне зависимости от того, включен ли пользователь в какие-либо еще группы доступа. 
//Система считает, что другие роли этому пользователю не нужны.
//Поэтому функция РольДоступна() возвращает в этом случае Ложь, что не подходит для решения нашей задачи.
//
// Параметры:
//  ИмяРоли		 - Строка - Имя роли, как оно задано в конфигураторе
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого нужно проверить наличие роли. По умолчанию текущий пользователь.
// 
Функция ЕстьРоль(ИмяРоли, Пользователь = Неопределено) Экспорт

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|ГДЕ
		|	ПрофилиГруппДоступаРоли.Роль.Имя = &Роль
		|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Роль", ИмяРоли);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;		
	Иначе	
		Возврат Истина;		
	КонецЕсли;
	
КонецФункции

// Получить структуру параметров табличного документа
// РС Консалт: Трофимов Евгений 27.07.2022
//
// Параметры:
//  ТабДок	 - ТабличныйДокумент - Табличный документ
// 
Функция ПолучитьСтруктуруПараметровТабличногоДокумента(ТабДок) Экспорт

	Если Ложь Тогда ТабДок = Новый ТабличныйДокумент; КонецЕсли;
	СтруктМакета = Новый Структура;
	
	Для Каждого ОбластьЯчеек Из ТабДок.Области Цикл
		ОбластьМакета = ТабДок.ПолучитьОбласть(ОбластьЯчеек.Имя);
	    Для НомерСтроки = 1 По ОбластьМакета.ВысотаТаблицы Цикл
	        Для НомерКолонки = 1 По ОбластьМакета.ШиринаТаблицы Цикл
	            Ячейка = ОбластьМакета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
					Если НЕ ПустаяСтрока(Ячейка.Параметр) Тогда
						Попытка
							СтруктМакета.Вставить(Ячейка.Параметр,"");
						Исключение
							ТекстОшибки = СтрШаблон(
								"Имя области: %5
								|Строка: %1
								|Столбец: %2
								|Параметр: %3
								|%4",
								НомерСтроки, НомерКолонки, Ячейка.Параметр, ОписаниеОшибки(), ОбластьЯчеек.Имя
							);
							ВызватьИсключение ТекстОшибки;
						КонецПопытки;
					КонецЕсли;
	            ИначеЕсли Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
	               //выделим все параметры в шаблоне в отдельные строки
	 
	                ТекстШаблона = Ячейка.Текст;
	                ТекстШаблона = СтрЗаменить(ТекстШаблона, "[", Символы.ПС + "[");
	                ТекстШаблона = СтрЗаменить(ТекстШаблона, "]", Символы.ПС);
	                Для Счетчик = 1 По СтрЧислоСтрок(ТекстШаблона) Цикл
	                    ТекСтрока = СтрПолучитьСтроку(ТекстШаблона, Счетчик);
	                    Если Лев(ТекСтрока, 1) = "[" тогда
	                        ИмяПараметра = Сред(ТекСтрока, 2);
							Попытка
								СтруктМакета.Вставить(ИмяПараметра,"");
							Исключение
								ТекстОшибки = СтрШаблон(
									"Имя области: %5
									|Строка: %1
									|Столбец: %2
									|Параметр: %3
									|%4",
									НомерСтроки, НомерКолонки, ИмяПараметра, ОписаниеОшибки(), ОбластьЯчеек.Имя
								);
								ВызватьИсключение ТекстОшибки;
							КонецПопытки;
								
	                    КонецЕсли;
	                КонецЦикла; 
	            КонецЕсли//конец проверки, что в ячейке - текст, параметр или шаблон
	 
	        КонецЦикла//конец обхода по колонкам
	 
	    КонецЦикла//конец обхода по строкам		
	КонецЦикла;
	
	Возврат СтруктМакета;

КонецФункции // ПолучитьСтруктуруПараметровТабличногоДокумента()

// Заполняет структуру макета, созданную функцией ПолучитьСтруктуруПараметровТабличногоДокумента()
// значениями наименоаний основного макета на различных языках.
// См.пример во внешних ПФ «Упаковочный лист», «Проформа инвойс», «Коммерческий инвойс»
//++ РС Консалт: Трофимов Евгений 24.08.2022 Задача 19406
//e1cib/data/Документ.Задание?ref=8801aed8a4c061714c61a3f05ae02271
//
// Параметры:
//  СтруктМакета	 - Структура - 
//						* Ключ - Параметр макета печатной формы
//						* Значение - Заполняемое значение
//  ЯзыкЛокализации	 - Строка - Принимает значение сокращённого наименования языка: "RUS", "ENG" и т.д...
//  МакетЛокализации - ТабличныйДокумент - Макет, где в первом столбце перечислены параметры заголовкоа печатной формы,
//										   а во всех последующих: переводы заголовков на различные языки.
//
Процедура ЗаполнитьПараметрыЛокализации(СтруктМакета, ЯзыкЛокализации, МакетЛокализации) Экспорт

	//Определяем столбец языка
	СтолбецЯзыка = 0;
	Для Столбец = 2 По МакетЛокализации.ШиринаТаблицы Цикл
		Область = МакетЛокализации.Область("R1C" + XMLСтрока(Столбец));
		Если Область.Текст = ЯзыкЛокализации Тогда
			СтолбецЯзыка = Столбец;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтолбецЯзыка = 0 Тогда
		ВызватьИсключение "Не удалось определить язык локализации печатной формы";
	КонецЕсли;
	
	Для Стр = 2 По МакетЛокализации.ВысотаТаблицы Цикл
		ОбластьКлюч = МакетЛокализации.Область("R" + XMLСтрока(Стр) + "C1");
		ОбластьЗначение = МакетЛокализации.Область("R" + XMLСтрока(Стр) + "C" + XMLСтрока(СтолбецЯзыка));
		Если НЕ ПустаяСтрока(ОбластьКлюч.Текст) И СтруктМакета.Свойство(ОбластьКлюч.Текст) Тогда
			СтруктМакета[ОбластьКлюч.Текст] = ОбластьЗначение.Текст;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Возвращает таблицу весо-габаритных характеристик
// из регистра сведений «Технические характеристики номенклатуры» (см. расширение конфигурации «САВ»)
//++ РС Консалт: Трофимов Евгений 18.08.2022 Задача 19406
//e1cib/data/Документ.Задание?ref=8801aed8a4c061714c61a3f05ae02271
//
// Параметры:
//  ТаблицаХарактеристикИСерий	 - ТаблицаЗначений:
//    * Номенклатура 	- СправочникСсылка.Номенклатура - Номенклатура.
//    * Характеристика 	- СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//    * Серия - СправочникСсылка.СерииНоменклатуры - Серия номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * Номенклатура 	- СправочникСсылка.Номенклатура - Номенклатура.
//    * Характеристика	- СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//    * Серия			- СправочникСсылка.СерииНоменклатуры - Серия номенклатуры.
//    * ВесНетто		- Число - Вес нетто, кг
//    * ВесБрутто		- Число - Вес брутто, кг
//    * ДлинаУпаковки	- Число - Длина упаковки, мм
//    * ВысотаУпаковки	- Число - Высота упаковки, мм
//    * ШиринаУпаковки	- Число - Ширина упаковки, мм
//
Функция ПолучитьВГХТаблицу(ТаблицаХарактеристикИСерий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить("ВесНетто");
	МассивСвойств.Добавить("ВесБрутто");
	МассивСвойств.Добавить("ДлинаУпаковки");
	МассивСвойств.Добавить("ВысотаУпаковки");
	МассивСвойств.Добавить("ШиринаУпаковки");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВесНетто_ВСН.Ссылка КАК ПараметрВесНетто,
		|	ВесБрутто_ВСН.Ссылка КАК ПараметрВесБрутто,
		|	ВысотаУпаковки_ВСН.Ссылка КАК ПараметрВысотаУпаковки,
		|	ШиринаУпаковки_ВСН.Ссылка КАК ПараметрШиринаУпаковки,
		|	ДлинаУпаковки_ВСН.Ссылка КАК ПараметрДлинаУпаковки
		|ПОМЕСТИТЬ ПараметрыТехническихСвойств
		|ИЗ
		|	Справочник.САВ_ВидыСвойствНоменклатуры КАК ВесНетто_ВСН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ВесНетто_ДопРекв
		|		ПО ВесНетто_ВСН.Характеристика = ВесНетто_ДопРекв.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.САВ_ВидыСвойствНоменклатуры КАК ВесБрутто_ВСН
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ВесБрутто_ДопРекв
		|			ПО ВесБрутто_ВСН.Характеристика = ВесБрутто_ДопРекв.Ссылка
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.САВ_ВидыСвойствНоменклатуры КАК ВысотаУпаковки_ВСН
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ВысотаУпаковки_ДопРекв
		|			ПО ВысотаУпаковки_ВСН.Характеристика = ВысотаУпаковки_ДопРекв.Ссылка
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.САВ_ВидыСвойствНоменклатуры КАК ШиринаУпаковки_ВСН
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ШиринаУпаковки_ДопРекв
		|			ПО ШиринаУпаковки_ВСН.Характеристика = ШиринаУпаковки_ДопРекв.Ссылка
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.САВ_ВидыСвойствНоменклатуры КАК ДлинаУпаковки_ВСН
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДлинаУпаковки_ДопРекв
		|			ПО ДлинаУпаковки_ВСН.Характеристика = ДлинаУпаковки_ДопРекв.Ссылка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВесНетто_ДопРекв.ИдентификаторДляФормул = ""ВесНетто""
		|	И ВесБрутто_ДопРекв.ИдентификаторДляФормул = ""ВесБрутто""
		|	И НЕ ВесБрутто_ВСН.ПометкаУдаления
		|	И НЕ ВесНетто_ВСН.ПометкаУдаления
		|	И ВысотаУпаковки_ДопРекв.ИдентификаторДляФормул = ""ВысотаУпаковки""
		|	И НЕ ВысотаУпаковки_ВСН.ПометкаУдаления
		|	И ШиринаУпаковки_ДопРекв.ИдентификаторДляФормул = ""ШиринаУпаковки""
		|	И НЕ ШиринаУпаковки_ВСН.ПометкаУдаления
		|	И ДлинаУпаковки_ДопРекв.ИдентификаторДляФормул = ""ДлинаУпаковки""
		|	И НЕ ДлинаУпаковки_ВСН.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК Приоритет,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияВесНетто.ЗначениеПоУмолчанию), """") КАК ВесНетто,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияВесБрутто.ЗначениеПоУмолчанию), """") КАК ВесБрутто,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияДлинаУпаковки.ЗначениеПоУмолчанию), """") КАК ДлинаУпаковки,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначеннияВысотаУпаковки.ЗначениеПоУмолчанию), """") КАК ВысотаУпаковки,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияШиринаУпаковки.ЗначениеПоУмолчанию), """") КАК ШиринаУпаковки
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияВесНетто
		|		ПО Товары.Серия = ЗначенияВесНетто.ВладелецПараметра
		|			И (ЗначенияВесНетто.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрВесНетто КАК ПараметрВесНетто
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияВесБрутто
		|		ПО Товары.Серия = ЗначенияВесБрутто.ВладелецПараметра
		|			И (ЗначенияВесБрутто.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрВесБрутто КАК ПараметрВесБрутто
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначеннияВысотаУпаковки
		|		ПО Товары.Серия = ЗначеннияВысотаУпаковки.ВладелецПараметра
		|			И (ЗначеннияВысотаУпаковки.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрВысотаУпаковки КАК ПараметрВысотаУпаковки
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияШиринаУпаковки
		|		ПО Товары.Серия = ЗначенияШиринаУпаковки.ВладелецПараметра
		|			И (ЗначенияШиринаУпаковки.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрШиринаУпаковки КАК ПараметрШиринаУпаковки
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияДлинаУпаковки
		|		ПО Товары.Серия = ЗначенияДлинаУпаковки.ВладелецПараметра
		|			И (ЗначенияДлинаУпаковки.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрДлинаУпаковки КАК ПараметрДлинаУпаковки
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Серия,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияВесНетто.ЗначениеПоУмолчанию), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияВесБрутто.ЗначениеПоУмолчанию), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияДлинаУпаковки.ЗначениеПоУмолчанию), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначеннияВысотаУпаковки.ЗначениеПоУмолчанию), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияШиринаУпаковки.ЗначениеПоУмолчанию), """")
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияВесНетто
		|		ПО Товары.Характеристика = ЗначенияВесНетто.ВладелецПараметра
		|			И (ЗначенияВесНетто.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрВесНетто КАК ПараметрВесНетто
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияВесБрутто
		|		ПО Товары.Характеристика = ЗначенияВесБрутто.ВладелецПараметра
		|			И (ЗначенияВесБрутто.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрВесБрутто КАК ПараметрВесБрутто
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначеннияВысотаУпаковки
		|		ПО Товары.Характеристика = ЗначеннияВысотаУпаковки.ВладелецПараметра
		|			И (ЗначеннияВысотаУпаковки.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрВысотаУпаковки КАК ПараметрВысотаУпаковки
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияШиринаУпаковки
		|		ПО Товары.Характеристика = ЗначенияШиринаУпаковки.ВладелецПараметра
		|			И (ЗначенияШиринаУпаковки.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрШиринаУпаковки КАК ПараметрШиринаУпаковки
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияДлинаУпаковки
		|		ПО Товары.Характеристика = ЗначенияДлинаУпаковки.ВладелецПараметра
		|			И (ЗначенияДлинаУпаковки.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрДлинаУпаковки КАК ПараметрДлинаУпаковки
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	3,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Серия,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияВесНетто.ЗначениеПоУмолчанию), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияВесБрутто.ЗначениеПоУмолчанию), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияДлинаУпаковки.ЗначениеПоУмолчанию), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначеннияВысотаУпаковки.ЗначениеПоУмолчанию), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЗначенияШиринаУпаковки.ЗначениеПоУмолчанию), """")
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияВесНетто
		|		ПО Товары.Номенклатура = ЗначенияВесНетто.ВладелецПараметра
		|			И (ЗначенияВесНетто.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрВесНетто КАК ПараметрВесНетто
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияВесБрутто
		|		ПО Товары.Номенклатура = ЗначенияВесБрутто.ВладелецПараметра
		|			И (ЗначенияВесБрутто.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрВесБрутто КАК ПараметрВесБрутто
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначеннияВысотаУпаковки
		|		ПО Товары.Номенклатура = ЗначеннияВысотаУпаковки.ВладелецПараметра
		|			И (ЗначеннияВысотаУпаковки.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрВысотаУпаковки КАК ПараметрВысотаУпаковки
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияШиринаУпаковки
		|		ПО Товары.Номенклатура = ЗначенияШиринаУпаковки.ВладелецПараметра
		|			И (ЗначенияШиринаУпаковки.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрШиринаУпаковки КАК ПараметрШиринаУпаковки
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.САВ_ХарактеристикиНоменклатуры КАК ЗначенияДлинаУпаковки
		|		ПО Товары.Номенклатура = ЗначенияДлинаУпаковки.ВладелецПараметра
		|			И (ЗначенияДлинаУпаковки.СвойствоПараметра В
		|				(ВЫБРАТЬ
		|					ПараметрыТехническихСвойств.ПараметрДлинаУпаковки КАК ПараметрДлинаУпаковки
		|				ИЗ
		|					ПараметрыТехническихСвойств КАК ПараметрыТехническихСвойств))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3))
		|";
	
	Запрос.УстановитьПараметр("Товары", ТаблицаХарактеристикИСерий);	
	тзВГХ = Запрос.Выполнить().Выгрузить();
	//В таблице получили 3 варианта ВГХ. Вариант с приоритетом 1 точнее, 
	//но если в вариаанте 1 значения нет - то берём его из приоритета 2 и т.д...
	
	ПараметрыПоиска = Новый Структура("Приоритет,Номенклатура,Характеристика,Серия");
	СтрокиПриоритета1 = тзВГХ.НайтиСтроки(Новый Структура("Приоритет", 1));
	Для Каждого Стр1 Из СтрокиПриоритета1 Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Стр1);
		ПараметрыПоиска.Приоритет = 2;
		СтрокиПриоритета2 = тзВГХ.НайтиСтроки(ПараметрыПоиска);
		ПараметрыПоиска.Приоритет = 3;
		СтрокиПриоритета3 = тзВГХ.НайтиСтроки(ПараметрыПоиска);
		Для Каждого ИмяСвойства Из МассивСвойств Цикл
			Если ПустаяСтрока(Стр1[ИмяСвойства]) Тогда
				Стр1[ИмяСвойства] = СтрокиПриоритета2[0][ИмяСвойства];
			КонецЕсли;
			Если ПустаяСтрока(Стр1[ИмяСвойства]) Тогда
				Стр1[ИмяСвойства] = СтрокиПриоритета3[0][ИмяСвойства];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
	//Преобразуем все строковые значения в числовые
	Для Каждого Стр1 Из СтрокиПриоритета1 Цикл
		Для Каждого ИмяСвойства Из МассивСвойств Цикл
			Стр1[ИмяСвойства] = РСК_РаботаСоСтроками.ПолучитьЧислоИзСтрокиХарактеристики(Стр1[ИмяСвойства]);
		КонецЦикла;
	КонецЦикла; 
	
	//Приоритет 2 больше не нужен
	тзВГХ = тзВГХ.Скопировать(Новый Структура("Приоритет", 1));
	
	//Убиваем лишние колонки
	тзВГХ.Колонки.Удалить(тзВГХ.Колонки.Найти("Приоритет"));
	
	Возврат тзВГХ;	
	
КонецФункции // ПолучитьВГХТаблицу()

// Возвращает структуру, заполненную весо-габаритными характеристиками
// из регистра сведений «Технические характеристики номенклатуры» (см. расширение конфигурации «САВ»)
//++ РС Консалт: Трофимов Евгений 18.08.2022 Задача 19406
//e1cib/data/Документ.Задание?ref=8801aed8a4c061714c61a3f05ae02271
//
// Параметры:
//  Номенклатура	 - СправочникСсылка.Номенклатура - Номенклатура 
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры 
//  Серия			 - СправочникСсылка.СерииНоменклатуры - Серия номенклатуры. 
// 
// Возвращаемое значение:
//  Структура:
//    * Номенклатура 	- СправочникСсылка.Номенклатура - Номенклатура.
//    * Характеристика	- СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//    * Серия			- СправочникСсылка.СерииНоменклатуры - Серия номенклатуры.
//    * ВесНетто		- Число - Вес нетто, кг
//    * ВесБрутто		- Число - Вес брутто, кг
//    * ДлинаУпаковки	- Число - Длина упаковки, мм
//    * ВысотаУпаковки	- Число - Высота упаковки, мм
//    * ШиринаУпаковки	- Число - Ширина упаковки, мм
//
Функция ПолучитьВГХСтруктуру(Номенклатура = Неопределено, Характеристика = Неопределено, Серия = Неопределено) Экспорт

	тзВГХ = Новый ТаблицаЗначений;
	тзВГХ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзВГХ.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	тзВГХ.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	НС = тзВГХ.Добавить();
	НС.Номенклатура = Номенклатура;
	НС.Характеристика = Характеристика;
	НС.Серия = Серия;
	
	тзВГХ = ПолучитьВГХТаблицу(тзВГХ);
	Для Каждого Стр Из тзВГХ Цикл
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Стр);
	КонецЦикла;                                                       
	Возврат Неопределено;

КонецФункции // ПолучитьВГХСтруктуру()

// Возвращает количество единиц товара в коробке
//++ РС Консалт: Трофимов Евгений 18.08.2022 Задача 19406
//e1cib/data/Документ.Задание?ref=8801aed8a4c061714c61a3f05ae02271
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура
//				 - Массив - Массив элементов СправочникСсылка.Номенклатура
// 
// Возвращаемое значение:
//   Число - При указании элемента справочника Номенклатуры
//	 Соответствие - при указании массива элементов номенклатуры:
//	  * Ключ - СправочникСсылка.Номенклатура - Номенклатура
//	  * Значение - Число - Количество штук в коробке (коэффициент упаковки коробки)
//
Функция ПолучитьКоличествоВКоробке(Номенклатура) Экспорт

	Запрос = Новый Запрос;
	Запрос.текст =
		"ВЫБРАТЬ
		|	спрНоменклатура.Ссылка КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА спрНоменклатура.ИспользоватьУпаковки
		|			ТОГДА ВЫБОР
		|					КОГДА спрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|						ТОГДА спрНоменклатура.Ссылка
		|					ИНАЧЕ спрНоменклатура.НаборУпаковок
		|				КОНЕЦ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВладелецУпаковки
		|ПОМЕСТИТЬ ВладельцыУпаковок
		|ИЗ
		|	Справочник.Номенклатура КАК спрНоменклатура
		|ГДЕ
		|	спрНоменклатура.Ссылка В(&МассивНоменклатуры)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВладельцыУпаковок.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Числитель / ВЫБОР
		|				КОГДА УпаковкиЕдиницыИзмерения.Знаменатель = 0
		|					ТОГДА 1
		|				ИНАЧЕ УпаковкиЕдиницыИзмерения.Знаменатель
		|			КОНЕЦ, 1)) КАК КоличествоВКоробке
		|ИЗ
		|	ВладельцыУпаковок КАК ВладельцыУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО ВладельцыУпаковок.ВладелецУпаковки = УпаковкиЕдиницыИзмерения.Владелец
		|			И (УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.Код = ""8751"")
		|			И (НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления)
		|			И (ВладельцыУпаковок.ВладелецУпаковки <> НЕОПРЕДЕЛЕНО)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВладельцыУпаковок.Номенклатура
		|";
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если Выборка.Следующий() Тогда
			Возврат Выборка.КоличествоВКоробке;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("Массив") Тогда
		Результат = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Номенклатура, Выборка.КоличествоВКоробке);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	Возврат 0;
	
КонецФункции // ПолучитьКоличествоВКоробке()

// Возвращает строку шифра характеристики (фрагмент артикула)
//++ РС Консалт: Трофимов Евгений 24.08.2022 Задача 19406
//e1cib/data/Документ.Задание?ref=8801aed8a4c061714c61a3f05ae02271
//
// Параметры:
//  ВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры - Вид номенклатуры
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьАртикулХарактеристики(ВидНоменклатуры, Характеристика) Экспорт

	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		Возврат "";
	КонецЕсли;
	
	//ДополнительныеРеквизитыОбъекта = УправлениеСвойствами.СвойстваОбъекта(Характеристика, Истина, Ложь);
	Свойства = УправлениеСвойствами.ПолучитьСоответствиеСвойств(Характеристика, Истина, Истина, Ложь);
	
	Если ВидНоменклатуры.ПринадлежитЭлементу(РСК_ПовтИсп.ГруппаВидовНоменклатуры_Коляски()) Тогда
		Возврат "."+Свойства["ТипКолёс"]+"."+Свойства["ШиринаСиденья"];
	КонецЕсли;
	
	Возврат "";

КонецФункции

// Получить вес брутто и объём по данным упаковки
//
// Параметры:
//  СсылкаНаДокумент - Массив - Ссылки на документы 
//					 - ДокументСсылка.ЗаказКлиента - Заказ клиента
// 
// Возвращаемое значение:
//	 - ТаблицаЗначений - Если в качестве параметра СсылкаНаДокумент указан массив
//		* Распоряжение - ДокументСсылка - Ссылка на распоряжение
//		* Вес - Число - Вес брутто документа
//		* Объем - Число - Объём, м3
//   - Структура - при указании в качестве параметра СсылкаНаДокумент конкретного документа.
//      Ключи аналогичниые колонка таблицы
//
Функция ПолучитьВГХпоДаннымУпаковки(СсылкаНаДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Ссылка КАК Распоряжение,
		|	ЗаказКлиентаТовары.Упаковка КАК Упаковка,
		|	ЗаказКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковок
		|ПОМЕСТИТЬ тзТовары
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка В(&МассивСсылок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка,
		|	РеализацияТоваровУслугТовары.Упаковка,
		|	РеализацияТоваровУслугТовары.КоличествоУпаковок
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка В(&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тзТовары.Распоряжение КАК Распоряжение,
		|	СУММА(УпаковкиЕдиницыИзмерения.Вес * тзТовары.КоличествоУпаковок) КАК Вес,
		|	СУММА(УпаковкиЕдиницыИзмерения.Объем * тзТовары.КоличествоУпаковок) КАК Объем
		|ИЗ
		|	тзТовары КАК тзТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО тзТовары.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	тзТовары.Распоряжение
		|";

	Запрос.УстановитьПараметр("МассивСсылок", СсылкаНаДокумент);
	Если ТипЗнч(СсылкаНаДокумент) = Тип("Массив") Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат ЗапросВСтруктуру(Запрос);
	КонецЕсли;
	
КонецФункции // ПолучитьВГХпоДаннымУпаковки()

// Получить ВГХ по данным упаковки из таблицы
//++ РС Консалт: Трофимов Евгений 18.11.2022 Задача 21979
//e1cib/data/Документ.Задание?ref=960157bd91fdb1dd40c034a9ff351dad
//
// Параметры:
//  ТаблицаУпаковок	 - ТаблицаЗначений - 
//		* Номенклатура 			- СправочникСсылка.Номенклатура - номенклатура
//		* КоличествоУпаковок 	- Число - количество упаковок
//		* Упаковка 				- СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - 
//		* Номенклатура 			- СправочникСсылка.Номенклатура - номенклатура
//		* КоличествоУпаковок 	- Число - количество упаковок
//		* Упаковка 				- СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка 
//		* Вес 					- Число - вес брутто, кг 
//		* Объем 				- Число - объём, м.куб 
//
Функция ПолучитьВГХпоДаннымУпаковкиИзТаблицы(ТаблицаУпаковок) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаУпаковок.Номенклатура КАК Номенклатура,
		|	ТаблицаУпаковок.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаУпаковок.Упаковка КАК Упаковка,
		|	ТаблицаУпаковок.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК ПустаяУпаковка
		|ПОМЕСТИТЬ ТаблицаУпаковок
		|ИЗ
		|	&ТаблицаУпаковок КАК ТаблицаУпаковок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУпаковок.Номенклатура КАК Номенклатура,
		|	МИНИМУМ(УпаковкиЕдиницыИзмерения.Вес) КАК Вес,
		|	МИНИМУМ(УпаковкиЕдиницыИзмерения.Объем) КАК Объем
		|ПОМЕСТИТЬ ШтучныйВесОбъем
		|ИЗ
		|	ТаблицаУпаковок КАК ТаблицаУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО ТаблицаУпаковок.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Числитель = 1
		|	И УпаковкиЕдиницыИзмерения.Знаменатель = 1
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУпаковок.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУпаковок.Номенклатура КАК Номенклатура,
		|	ТаблицаУпаковок.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаУпаковок.Упаковка КАК Упаковка,
		|	ТаблицаУпаковок.КоличествоУпаковок * ЕСТЬNULL(ВЫБОР
		|			КОГДА ТаблицаУпаковок.ПустаяУпаковка
		|				ТОГДА ШтучныйВесОбъем.Вес
		|			ИНАЧЕ УпаковкиЕдиницыИзмерения.Вес
		|		КОНЕЦ, 0) КАК Вес,
		|	ТаблицаУпаковок.КоличествоУпаковок * ЕСТЬNULL(ВЫБОР
		|			КОГДА ТаблицаУпаковок.ПустаяУпаковка
		|				ТОГДА ШтучныйВесОбъем.Объем
		|			ИНАЧЕ УпаковкиЕдиницыИзмерения.Объем
		|		КОНЕЦ, 0) КАК Объем
		|ИЗ
		|	ТаблицаУпаковок КАК ТаблицаУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО ТаблицаУпаковок.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ШтучныйВесОбъем КАК ШтучныйВесОбъем
		|		ПО ТаблицаУпаковок.Номенклатура = ШтучныйВесОбъем.Номенклатура
		|";
	
	Запрос.УстановитьПараметр("ТаблицаУпаковок", ТаблицаУпаковок);
	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции // ПолучитьВГХпоДаннымУпаковкиИзТаблицы()

// Установить значение доп реквизита
// РС Консалт: Трофимов Евгений 10.11.2022
//
// Параметры:
//  Объект	 - Объект - Любой ДокументОбъект, СправочникОбъект с табличной частью «Дополнительные реквизиты»
//  Имя		 - Строка - Значение реквизита «Имя» плана вида характеристик ДополнительныеРеквизитыИСведения 
//  Значение - Любое - Значение, кторое нужно установить в доп.реквизит
//
Процедура ДопРеквизит_УстановитьЗначение(Объект, Имя, Значение) Экспорт

	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", Имя);
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		ВызватьИсключение "Доп.реквизит с именем «"+Имя+"» не найден";
	КонецЕсли;
	
	НайденнаяСтрока = Объект.ДополнительныеРеквизиты.Найти(Свойство, "Свойство");
	Если НайденнаяСтрока = Неопределено Тогда
		НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство = Свойство;
		НоваяСтрока.Значение = Значение;
	Иначе
		НайденнаяСтрока.Значение = Значение;
	КонецЕсли;

КонецПроцедуры

// Получает значение перечисления
//
// Параметры:
//  ИмяПеречисления  - Строка - Имя перечисления, как оно задано в конфигураторе
//  ИмяЗначения 	 - Строка - Имя значения перечисления, как оно задано в конфигураторе
//
// Возвращаемое значение:
//   ПеречислениеСсылка   - Ссылка на элемент перечисления, если он существует, или Неопределено - в противном случае
//
Функция ПолучитьЗначениеПеречисления(ИмяПеречисления, ИмяЗначения) Экспорт

	МетаИскомоеПеречисление = Метаданные.Перечисления.Найти(ИмяПеречисления);
	Если МетаИскомоеПеречисление = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	МетаЗначение = МетаИскомоеПеречисление.ЗначенияПеречисления.Найти(ИмяЗначения);
	Если МетаЗначение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Перечисления[ИмяПеречисления][ИмяЗначения];

КонецФункции // ПолучитьЗначениеПеречисления()

// Возвращает пустое значение из любого значения
//Например, получить значние из Тип("СправочникСсылка.Номенклатура") равное Справочник.Номенклатура.ПолучитьСсылку()
//или 0 из Тип("Число")
//
// Параметры:
//  ЛюбоеЗначение    - Произвольный - 
// 
// Возвращаемое значение:
//   - Произвольный
//
Функция ПустоеЗначение(ЛюбоеЗначение) Экспорт
 
    ТипЗначения = ТипЗнч(ЛюбоеЗначение);
    масТипов = Новый Массив;
    масТипов.Добавить(ТипЗначения);
    ОписаниеТипов = Новый ОписаниеТипов(масТипов);
    Возврат ОписаниеТипов.ПривестиЗначение();   
 
КонецФункции // ПустоеЗначение()

//В документах «Приемка товаров на хранение» и «Отгрузка товаров с хранения» 
//перед записью документа заполнять назначение в табличной части «Товары» 
//значением реквизита «Направление деятельности» договора контрагента.
//++ РС Консалт: Трофимов Евгений 26.01.2023 Тикет 23317
//e1cib/data/Документ.Задание?ref=872e9746cc06e1be4335ac8ea77aff66
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект - Документ объект
//
Процедура ЗаполнениеНазначенияПоДоговору(ДокументОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, "НаправлениеДеятельности");
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.НаправлениеДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	Назначение = Справочники.Назначения.НайтиПоРеквизиту("НаправлениеДеятельности", ДокументОбъект.НаправлениеДеятельности);
	Если НЕ ЗначениеЗаполнено(Назначение) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ДокументОбъект.Товары Цикл
		Стр.Назначение = Назначение;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПараметрыОтправкиЭлектронногоЧекаПоКонтрагенту(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Форма.Контрагент) Тогда
		
		ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
		
	Иначе
		
		ВариантОтправкиЭлектронногоЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Партнер, "ВариантОтправкиЭлектронногоЧека");
		
		Форма.ВариантОтправкиЭлектронногоЧекаПартнера = ВариантОтправкиЭлектронногоЧека;
		Если Не ЗначениеЗаполнено(ВариантОтправкиЭлектронногоЧека) Тогда
			ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
		КонецЕсли;
		
		ИсточникиКонтактнойИнформации = Новый Массив;
		ИсточникиКонтактнойИнформации.Добавить(Форма.Контрагент);
		
		ВидыКонтактнойИнформации = Новый Массив;
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
		
		КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ИсточникиКонтактнойИнформации,, ВидыКонтактнойИнформации, ТекущаяДатаСеанса());
		
		Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформацияОбъекта Цикл
			
			Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
				Форма.Телефон10Знаков = РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ЭлементКонтактнойИнформации.Представление);
				Форма.Телефон = РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(Форма.Телефон10Знаков);
				Форма.Элементы.Телефон.СписокВыбора.Добавить(Форма.Телефон);
			КонецЕсли;
			
			Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
				Форма.Email = ЭлементКонтактнойИнформации.Представление;
				Форма.Элементы.Email.СписокВыбора.Добавить(Форма.Email);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Форма.Элементы.Телефон.СписокВыбора.Количество() > 0 Тогда
			Форма.Элементы.Телефон.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
		Если Форма.Элементы.Email.СписокВыбора.Количество() > 0 Тогда
			Форма.Элементы.Email.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	РозничныеПродажиКлиентСервер.УстановитьВариантОтправкиЭлектронногоЧека(Форма, ВариантОтправкиЭлектронногоЧека);
	
КонецПроцедуры

Функция ПолучитьУчетнуюЗапись(Предмет) экспорт 
	
	
	Запрос = Новый Запрос(   "ВЫБРАТЬ
    |	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
    |ИЗ
    |	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
    |		ПО (ПОДСТРОКА(УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты, 1, 100) = ПОДСТРОКА(ПользователиКонтактнаяИнформация.Представление, 1, 100))
    |			И (ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
    |ГДЕ
    |	НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
    |	И ПользователиКонтактнаяИнформация.Ссылка = &Менеджер");   
	Запрос.УстановитьПараметр("Менеджер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет,"Менеджер")); 
	Выборка = Запрос.Выполнить().Выбрать();  
	Отправитель = Неопределено;
	Если Выборка.Следующий() тогда    
		Отправитель  = Выборка.Ссылка;
	КонецЕсли;   
	Возврат Отправитель;
КонецФункции

Функция НайтиШтрихкоды(Номенклатура, Характеристика = Неопределено, Серия = Неопределено, Упаковка = Неопределено) Экспорт 
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	Штрихкод = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	
	УсловиеХарактеристики = ?(ЗначениеЗаполнено(Характеристика), 
	"ШтрихкодыНоменклатуры.Характеристика = &Характеристика", 
	"ШтрихкодыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
	
	УсловиеУпаковки = ?(ЗначениеЗаполнено(Упаковка),
	"ШтрихкодыНоменклатуры.Упаковка = &Упаковка", 
	"ИСТИНА");
	
	Запрос.Текст = СтрШаблон( 
	"ВЫБРАТЬ
	|		ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|		ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО ""46%3"" КАК ШК46
	|	ИЗ
	|		РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|	ГДЕ
	|		ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура 
	|		И %1
	|		И %2", УсловиеХарактеристики, УсловиеУпаковки, "%");
	
	ТаблицаШКБезСерий = Запрос.Выполнить().Выгрузить();
	ЕстьШКБезСерий = ТаблицаШКБезСерий.Количество();
	
	Если ЗначениеЗаполнено(Серия) Тогда
		Запрос.Текст = СтрШаблон( 
		"ВЫБРАТЬ
		|		ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|		ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО ""46%3"" КАК ШК46
		|	ИЗ
		|		РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
		|	ГДЕ
		|		ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		|		И ШтрихкодыНоменклатуры.Серия = &Серия
		|		И %1
		|		И %2", УсловиеХарактеристики, УсловиеУпаковки, "%"); 
		
		ТаблицаШКСерий = Запрос.Выполнить().Выгрузить()
	Иначе
		ТаблицаШКСерий = ТаблицаШКБезСерий.СкопироватьКолонки()
	КонецЕсли;
	
	ЕстьШКСерий = ТаблицаШКСерий.Количество();
	
	СтруктураПоиска = Новый Структура("ШК46", Истина);
	
	Если ЕстьШКСерий Тогда
		
		СтрокиШК46 = ТаблицаШКСерий.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаШК46 Из СтрокиШК46 Цикл
			Штрихкод = Штрихкод + ?(Штрихкод = "", "", "," + Символы.ПС) + СтрокаШК46.Штрихкод 	
		КонецЦикла
		
	КонецЕсли;
	
	Если ЕстьШКБезСерий Тогда
		
		СтрокиШК46 = ТаблицаШКБезСерий.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаШК46 Из СтрокиШК46 Цикл
			Штрихкод = Штрихкод + ?(Штрихкод = "", "", "," + Символы.ПС) + СтрокаШК46.Штрихкод 	
		КонецЦикла
		
	КонецЕсли;
	
	Если Штрихкод = "" Тогда		
		Если ЕстьШКСерий Тогда
			
			Штрихкод = ТаблицаШКСерий[0].Штрихкод
			
		ИначеЕсли ЕстьШКБезСерий Тогда
			
			Штрихкод = ТаблицаШКБезСерий[0].Штрихкод
			
		КонецЕсли
	КонецЕсли;
	
	Возврат Штрихкод
	//++ РС Консалт: Минаков А.С. Задача 20226
		
КонецФункции

Функция ПолучитьТаблицуКОформлению(МассивРаспоряжений) Экспорт
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыКПоступлениюОстатки.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлениюОстатки.Склад КАК Склад,
	|	ТоварыКПоступлениюОстатки.Отправитель КАК Отправитель,
	|	ТоварыКПоступлениюОстатки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(РеестрДокументов.НомерПервичногоДокумента, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(РеестрДокументов.ДатаПервичногоДокумента, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления В (&МассивРаспоряжений)) КАК ТоварыКПоступлениюОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ТоварыКПоступлениюОстатки.ДокументПоступления = РеестрДокументов.Ссылка
	|			И (НЕ РеестрДокументов.ДополнительнаяЗапись)
	|ГДЕ
	|	ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток > 0");
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	
	ТаблицаРаспоряжений = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРаспоряжений)
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецФункции

Функция ТекстЗапросаВесОбъем() Экспорт
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	Возврат 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	тзТовары.Распоряжение КАК Распоряжение,
	|	тзТовары.Склад КАК Склад,
	|	тзТовары.Номенклатура КАК Номенклатура,
	|	тзТовары.Характеристика КАК Характеристика,
	|	тзТовары.Серия КАК Серия,
	|	тзТовары.Назначение КАК Назначение,
	|	тзТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК ПустаяУпаковка,
	|	СУММА(тзТовары.Количество) КАК Количество,
	|	СУММА(тзТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Вес, 0) * тзТовары.КоличествоУпаковок) КАК Вес,
	|	СУММА(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Объем, 0) * тзТовары.КоличествоУпаковок) КАК Объем,
	|	СРЕДНЕЕ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Объем, 0)) КАК ОбъемЕдиницы,
	|	СРЕДНЕЕ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Вес, 0)) КАК ВесЕдиницы
	|ПОМЕСТИТЬ ВтВесОбъем2
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Распоряжение,
	|		ТаблицаТовары.Склад КАК Склад,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Серия КАК Серия,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|		ТаблицаТовары.Количество КАК Количество,
	|		ТаблицаТовары.Упаковка КАК Упаковка,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|	ИЗ
	|		Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		&ОтборПоРаспоряжениям
	|       И НЕ ТаблицаТовары.Отменено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка,
	|		ТаблицаТовары.Склад,
	|		ТаблицаТовары.Номенклатура,
	|		ТаблицаТовары.Характеристика,
	|		ТаблицаТовары.Серия,
	|		ТаблицаТовары.Назначение,
	|		ТаблицаТовары.Количество,
	|		ТаблицаТовары.Упаковка,
	|		ТаблицаТовары.КоличествоУпаковок
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		&ОтборПоРаспоряжениям
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка,
	|		ТаблицаТовары.Ссылка.СкладОтправитель,
	|		ТаблицаТовары.Номенклатура,
	|		ТаблицаТовары.Характеристика,
	|		ТаблицаТовары.Серия,
	|		ЕСТЬNULL(Назначения.Ссылка, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)),
	|		ТаблицаТовары.Количество,
	|		ТаблицаТовары.Упаковка,
	|		ТаблицаТовары.КоличествоУпаковок
	|	ИЗ
	|		Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО ТаблицаТовары.Ссылка.НаправлениеДеятельности = Назначения.НаправлениеДеятельности
	|			И ТаблицаТовары.Обособленно
	|			И Назначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное)
	|			И Назначения.ТипОбъектаНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовНазначений.НаправлениеДеятельности)
	|	ГДЕ
	|		&ОтборПоРаспоряжениям 
	|       И НЕ ТаблицаТовары.Отменено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка,
	|		ТаблицаТовары.Ссылка.СкладОтправитель,
	|		ТаблицаТовары.Номенклатура,
	|		ТаблицаТовары.Характеристика,
	|		ТаблицаТовары.Серия,
	|		ТаблицаТовары.НазначениеОтправителя,
	|		ТаблицаТовары.Количество,
	|		ТаблицаТовары.Упаковка,
	|		ТаблицаТовары.КоличествоУпаковок
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		&ОтборПоРаспоряжениям) КАК тзТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО тзТовары.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	тзТовары.Распоряжение,
	|	тзТовары.Склад,
	|	тзТовары.Номенклатура,
	|	тзТовары.Характеристика,
	|	тзТовары.Серия,
	|	тзТовары.Назначение,
	|	тзТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтВесОбъем.Распоряжение КАК Распоряжение,
	|	ВтВесОбъем.Склад КАК Склад,
	|	ВтВесОбъем.Номенклатура КАК Номенклатура,
	|	ВтВесОбъем.Характеристика КАК Характеристика,
	|	ВтВесОбъем.Серия КАК Серия,
	|	ВтВесОбъем.Назначение КАК Назначение,
	|	СУММА(ВтВесОбъем.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ВтВесОбъем.ПустаяУпаковка
	|				ТОГДА ЕСТЬNULL(ШтучныйВесОбъем.Вес, 0) * ВтВесОбъем.КоличествоУпаковок
	|			ИНАЧЕ ВтВесОбъем.Вес
	|		КОНЕЦ) КАК Вес,
	|	СУММА(ВЫБОР
	|			КОГДА ВтВесОбъем.ПустаяУпаковка
	|				ТОГДА ЕСТЬNULL(ШтучныйВесОбъем.Объем, 0) * ВтВесОбъем.КоличествоУпаковок
	|			ИНАЧЕ ВтВесОбъем.Объем
	|		КОНЕЦ) КАК Объем,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА ВтВесОбъем.ПустаяУпаковка
	|				ТОГДА ЕСТЬNULL(ШтучныйВесОбъем.Объем, 0)
	|			ИНАЧЕ ВтВесОбъем.ОбъемЕдиницы
	|		КОНЕЦ) КАК ОбъемЕдиницы,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА ВтВесОбъем.ПустаяУпаковка
	|				ТОГДА ЕСТЬNULL(ШтучныйВесОбъем.Вес, 0)
	|			ИНАЧЕ ВтВесОбъем.ВесЕдиницы
	|		КОНЕЦ) КАК ВесЕдиницы
	|ПОМЕСТИТЬ ВтВесОбъем
	|ИЗ
	|	ВтВесОбъем2 КАК ВтВесОбъем
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Упаковки.Владелец КАК Номенклатура,
	|			МИНИМУМ(Упаковки.Вес) КАК Вес,
	|			МИНИМУМ(Упаковки.Объем) КАК Объем
	|		ИЗ
	|			Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ГДЕ
	|			Упаковки.Владелец В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВтВесОбъем.Номенклатура
	|					ИЗ
	|						ВтВесОбъем2 КАК ВтВесОбъем
	|					ГДЕ
	|						ВтВесОбъем.ПустаяУпаковка)
	|			И НЕ Упаковки.ПометкаУдаления
	|			И Упаковки.Числитель = 1
	|			И Упаковки.Знаменатель = 1
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Упаковки.Владелец) КАК ШтучныйВесОбъем
	|		ПО ВтВесОбъем.Номенклатура = ШтучныйВесОбъем.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтВесОбъем.Распоряжение,
	|	ВтВесОбъем.Склад,
	|	ВтВесОбъем.Номенклатура,
	|	ВтВесОбъем.Характеристика,
	|	ВтВесОбъем.Серия,
	|	ВтВесОбъем.Назначение	
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////"
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецФункции	

Процедура ЗапускВыполненияФоновогоИсключенияРасходногоОрдера(ЗаданиеНаПеревозку) Экспорт

	//++ РС Консалт: Минаков А.С. Задача 20226
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВыполнитьИсключениеРасходногоОрдера(ЗаданиеНаПеревозку)		
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Исключение расходных ордеров из доставки - %ЗаданиеНаПеревозку% по исключенным распоряжениям'");
		НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, "%ЗаданиеНаПеревозку%", ЗаданиеНаПеревозку);
		
		ИмяЭкспортнойПроцедуры = "РСК_ВызовСервера.ВыполнитьИсключениеРасходногоОрдера";
		
		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
		ПараметрыЭкспортнойПроцедуры = Новый Массив();
		ПараметрыЭкспортнойПроцедуры.Добавить(ЗаданиеНаПеревозку);
		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);

		//++ РС Консалт: Трофимов Е.В. 16.12.2022
		//Добавил проверку на ранее запущенное задание так как у пользователей возникает исключение, 
		//если работают быстро. Предыдущее задание не успевает завершиться.
		Ключ = "РС_ИсключениеОрдеровИзДоставки"	+ Строка(ЗаданиеНаПеревозку.УникальныйИдентификатор());
		УстановитьПривилегированныйРежим(Истина);
		МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(
			Новый Структура("Ключ,Состояние,ИмяМетода", Ключ, СостояниеФоновогоЗадания.Активно,"ОбщегоНазначения.ВыполнитьМетодКонфигурации")
		);
		Если МассивФоновыхЗаданий.Количество() = 0 Тогда
			ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания)
		КонецЕсли;
		//ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, , НаименованиеЗадания)
		//-- РС Консалт: Трофимов Е.В. 16.12.2022
	КонецЕсли
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

Процедура ВыполнитьИсключениеРасходногоОрдера(ЗаданиеНаПеревозку) Экспорт
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|			ПО РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
		|				И (ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &ЗаданиеНаПеревозку)
		|		ПО РасходныйОрдерНаТовары.Ссылка = РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка
		|ГДЕ
		|	РасходныйОрдерНаТовары.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
		|	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка ЕСТЬ NULL
		|	И РасходныйОрдерНаТовары.Статус В(ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Подготовлено))
		|";
	
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.РасходныйОрдерНаТовары");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			РасходныйОрдерОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.РасходныйОрдерНаТовары 
			РасходныйОрдерОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
			РасходныйОрдерОбъект.ЗаданиеНаПеревозку = Неопределено;
			Для Каждого СтрокаТч Из РасходныйОрдерОбъект.ОтгружаемыеТовары Цикл
				СтрокаТч.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать 
			КонецЦикла;	
			РасходныйОрдерОбъект.Записать(РежимЗаписиДокумента[?(РасходныйОрдерОбъект.Проведен, "Проведение", "Запись")]);
			
			ЗафиксироватьТранзакцию()
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось исключить %Документ% из доставки %ЗаданиеНаПеревозку% фоновым заданием по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.Ссылка); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаданиеНаПеревозку%", ЗаданиеНаПеревозку);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.РасходныйОрдерНаТовары,
			Выборка.Ссылка,
			ТекстСообщения);
			ВызватьИсключение
		КонецПопытки
	КонецЦикла;
	
	ДатаОтгрузки = ?(ЗначениеЗаполнено(ЗаданиеНаПеревозку.ДатаВремяРейсаПланС), ЗаданиеНаПеревозку.ДатаВремяРейсаПланС, ТекущаяДата());
	
	ПараметрыОбновленияОрдера = РСК_ВызовСервера.ПараметрыОбновленияОрдера();
	
	Для Каждого ДанныеСтроки Из ЗаданиеНаПеревозку.Распоряжения Цикл
		
		Если ДанныеСтроки.РСК_Транзитная Тогда
			Продолжить
		КонецЕсли;	
		
		ПараметрыОбновленияОрдера.ЗаданиеНаПеревозку = ЗаданиеНаПеревозку;
		ПараметрыОбновленияОрдера.Распоряжение = ДанныеСтроки.Распоряжение;
		ПараметрыОбновленияОрдера.Склад = ДанныеСтроки.Склад;
		ПараметрыОбновленияОрдера.ДатаОтгрузки = ДатаОтгрузки;
		ПараметрыОбновленияОрдера.ЗаполнитьЗадание = Истина;
		ПараметрыОбновленияОрдера.НовыйСтатус = "КОтгрузке";
		ПараметрыОбновленияОрдера.ИсключаемыеСтатусы = "КОтгрузке,Отгружен";
		ПараметрыОбновленияОрдера.ЗаполнитьПоОтбору = Истина;
		
		РСК_ВызовСервера.ВыполнитьПроверкуИзменениеОрдера(ПараметрыОбновленияОрдера, Ложь)
	КонецЦикла
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры	

#Область Логистика

Функция ПараметрыОбновленияОрдера() Экспорт
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	ПараметрыОбновленияОрдера = Новый Структура();
	ПараметрыОбновленияОрдера.Вставить("Распоряжение");
	ПараметрыОбновленияОрдера.Вставить("Накладная");
	ПараметрыОбновленияОрдера.Вставить("Ордер");
	ПараметрыОбновленияОрдера.Вставить("ДатаОтгрузки");
	ПараметрыОбновленияОрдера.Вставить("Склад");
	ПараметрыОбновленияОрдера.Вставить("ЗаданиеНаПеревозку");
	ПараметрыОбновленияОрдера.Вставить("ЗаполнитьЗадание", Ложь);
	ПараметрыОбновленияОрдера.Вставить("НовыйСтатус", "");
	ПараметрыОбновленияОрдера.Вставить("ИсключаемыеСтатусы", "");
	ПараметрыОбновленияОрдера.Вставить("ЗаполнитьПоОтбору", Ложь);
	ПараметрыОбновленияОрдера.Вставить("Ошибки", Новый Массив);
	ПараметрыОбновленияОрдера.Вставить("ВыполнениеВФоне", Ложь);
	
	Возврат ПараметрыОбновленияОрдера
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецФункции

Функция ПараметрыОбновленияНакладной() Экспорт
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	ПараметрыОбновленияНакладной = Новый Структура();
	ПараметрыОбновленияНакладной.Вставить("Накладная");
	ПараметрыОбновленияНакладной.Вставить("ЗаданиеНаПеревозку");
	ПараметрыОбновленияНакладной.Вставить("ЗаполнитьЗадание", Ложь);
	
	Возврат ПараметрыОбновленияНакладной
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецФункции

Процедура ВыполнитьПроверкуИзменениеОрдера(ПараметрыОбновленияОрдера, Отказ) Экспорт
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	Перем Распоряжение;
	Перем Накладная;
	Перем Ордер;
	Перем ЗаданиеНаПеревозку;
	Перем Склад;
	Перем ДатаОтгрузки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОбновленияОрдера.Свойство("Распоряжение", Распоряжение);
	ПараметрыОбновленияОрдера.Свойство("Накладная", Накладная);
	ПараметрыОбновленияОрдера.Свойство("Ордер", Ордер);
	ПараметрыОбновленияОрдера.Свойство("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	ПараметрыОбновленияОрдера.Свойство("Склад", Склад);
	ПараметрыОбновленияОрдера.Свойство("ДатаОтгрузки", ДатаОтгрузки);
	
	Если Не ЗначениеЗаполнено(Склад)
		Или (Не ЗначениеЗаполнено(Ордер) И Не ЗначениеЗаполнено(Распоряжение)) Тогда
		
		ТекстСообщения = "Не корректный вызов процедуры ""ВыполнитьПроверкуИзменениеОрдера"" общего модуля ""РСК_ВызовСервера""";
		ЗафиксироватьОшибку(ТекстСообщения,, ПараметрыОбновленияОрдера, Отказ)
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Распоряжение) Тогда
		Для Каждого СтрокаТч Из Ордер.ТоварыПоРаспоряжениям Цикл
			Если ЗначениеЗаполнено(СтрокаТч.Распоряжение) Тогда
				Распоряжение = СтрокаТч.Распоряжение;
				Прервать
			КонецЕсли
		КонецЦикла	
	КонецЕсли;	
			
	Если Отказ Тогда
		Возврат
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		Если ЗначениеЗаполнено(Ордер) Тогда
			ДатаОтгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ордер, "ДатаОтгрузки")
		Иначе
			ДатаОтгрузки = ТекущаяДатаСеанса()
		КонецЕсли
	КонецЕсли;
	
	Если Не СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Склад, ДатаОтгрузки) Тогда
		Возврат	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ордер) Тогда
		Ордер = ПодобратьОрдер(Распоряжение, Склад, ДатаОтгрузки)	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ордер) Тогда
		ТекстСообщения = "" + Распоряжение + ": Не найден ордер по складу " + Склад + " на дату отгрузки " + Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy");
		ЗафиксироватьОшибку(ТекстСообщения, Распоряжение, ПараметрыОбновленияОрдера, Отказ)
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Ордер) Тогда
		Возврат
	КонецЕсли;
	
	РеквизитыОрдера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ордер, "Склад, ДатаОтгрузки");
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(РеквизитыОрдера.Склад,, РеквизитыОрдера.ДатаОтгрузки);
	Если ИспользоватьАдресноеХранение Тогда	
		ПроверитьСборку(Ордер, ПараметрыОбновленияОрдера, Отказ)
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если Не ПараметрыОбновленияОрдера.ЗаполнитьЗадание
		И Не ПараметрыОбновленияОрдера.ЗаполнитьПоОтбору
		И Не ЗначениеЗаполнено(ПараметрыОбновленияОрдера.НовыйСтатус) Тогда
		
		Возврат
	КонецЕсли;	
	
	ОрдерОбъект = Ордер.ПолучитьОбъект();
	
	БылоИзменениеЗадание = Ложь;
	БылоИзменениеСтатуса = Ложь;
	БылоЗаполнение = Ложь;
	
	Если ИспользоватьАдресноеХранение 
		И ПараметрыОбновленияОрдера.ЗаполнитьПоОтбору 
		И Не(ОрдерОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке 
			Или ОрдерОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен) Тогда		
		БылоЗаполнение = Истина;
		
		ПараметрыЗаполнения = СкладыСервер.ПараметрыЗаполненияОрдеровОтобраннымиТоварами();
		ПараметрыЗаполнения.РежимЗаполнения   = "Единичное";	
		ПараметрыЗаполнения.ИзменениеСтатуса  = Ложь;	
		ПараметрыЗаполнения.ДокументОбъект    = ОрдерОбъект;	
		
		СкладыСервер.ЗаполнитьОрдераОтобраннымиТоварами(ПараметрыЗаполнения, Ложь);
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ОрдерОбъект, Документы.РасходныйОрдерНаТовары));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОрдерОбъект, ПараметрыУказанияСерий.ОтгружаемыеТовары)		
	КонецЕсли;
	
	Если ПараметрыОбновленияОрдера.ЗаполнитьЗадание Тогда
		
		Если Не ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда
			ЗаданиеНаПеревозку = ПодобратьЗадание(Распоряжение, Склад)
		КонецЕсли;	
				
		Если ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда
			Если ЗначениеЗаполнено(ОрдерОбъект.ЗаданиеНаПеревозку)
				И Не ОрдерОбъект.ЗаданиеНаПеревозку = ЗаданиеНаПеревозку Тогда
				
				ТекстСообщения = "" + Ордер + ": Уже включен в другое задание на перевозку!";
				ЗафиксироватьОшибку(ТекстСообщения, Ордер, ПараметрыОбновленияОрдера)
			Иначе	
				ПорядокДоставки = ДоставкаТоваров.ПорядокДоставкиВЗаданииНаПеревозку(ЗаданиеНаПеревозку, ОрдерОбъект.Получатель);
				Если Не ОрдерОбъект.ОтгрузкаПоЗаданиюНаПеревозку 
					Или Не ОрдерОбъект.ПорядокДоставки = ПорядокДоставки
					Или Не ОрдерОбъект.ЗаданиеНаПеревозку = ЗаданиеНаПеревозку Тогда
					
					БылоИзменениеЗадание = Истина;
					ОрдерОбъект.ЗаданиеНаПеревозку = ЗаданиеНаПеревозку;
					ОрдерОбъект.ОтгрузкаПоЗаданиюНаПеревозку = Истина;
					ОрдерОбъект.ПорядокДоставки = ПорядокДоставки
				КонецЕсли	
			КонецЕсли
		Иначе
			СпособДоставки = Неопределено;
			Если ЗначениеЗаполнено(Распоряжение) 
				И Не Распоряжение.Метаданные().Реквизиты.Найти("СпособДоставки") = Неопределено Тогда
				СпособДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "СпособДоставки")
			КонецЕсли;
			Если Не СпособДоставки = Перечисления.СпособыДоставки.Самовывоз Тогда
				ТекстСообщения = "" + Ордер + ": Не найдено подходящее задание на перевозку!";
				ЗафиксироватьОшибку(ТекстСообщения, Ордер, ПараметрыОбновленияОрдера)
			КонецЕсли
		КонецЕсли
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОбновленияОрдера.НовыйСтатус) Тогда
		НовыйСтатус = ПараметрыОбновленияОрдера.НовыйСтатус;
		ИсключаемыеСтатусы = ПараметрыОбновленияОрдера.ИсключаемыеСтатусы;
		Если ТипЗнч(ИсключаемыеСтатусы) = Тип("Строка") Тогда
			ИсключаемыеСтатусы = СтрРазделить(ИсключаемыеСтатусы, ",", Ложь);
			Для Сч = 0 По ИсключаемыеСтатусы.ВГраница() Цикл
				ИсключаемыеСтатусы[Сч] = Перечисления.СтатусыРасходныхОрдеров[ИсключаемыеСтатусы[Сч]]	
			КонецЦикла	
		КонецЕсли;	
		
		Если ИсключаемыеСтатусы.Найти(ОрдерОбъект.Статус) = Неопределено Тогда
			БылоИзменениеСтатуса = Истина;
			ОрдерОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров[НовыйСтатус];
			Документы.РасходныйОрдерНаТовары.ЗаполнитьДействиеВСтроках(ОрдерОбъект);
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ОрдерОбъект, Документы.РасходныйОрдерНаТовары));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОрдерОбъект, ПараметрыУказанияСерий.ОтгружаемыеТовары)
		КонецЕсли
	КонецЕсли;
	
	Если БылоИзменениеЗадание Или БылоИзменениеСтатуса Или БылоЗаполнение Тогда
		Попытка
			Если ОрдерОбъект.ПроверитьЗаполнение() Тогда
				ОрдерОбъект.Записать(РежимЗаписиДокумента[?(ОрдерОбъект.Проведен, "Проведение", "Запись")]);
				
				Если БылоИзменениеЗадание И БылоИзменениеСтатуса Тогда
					ТекстСообщения = "" + Ордер + ": Включен в " + ЗаданиеНаПеревозку + " и переведен в статус ""К отгрузке"""
				ИначеЕсли БылоИзменениеЗадание Тогда
					ТекстСообщения = "" + Ордер + ": Включен в " + ЗаданиеНаПеревозку
				Иначе 
					ТекстСообщения = "" + Ордер + ": Переведен в статус ""К отгрузке"""
				КонецЕсли;
				Если Не ПараметрыОбновленияОрдера.ВыполнениеВФоне Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ордер)
				КонецЕсли
			Иначе
				Если БылоИзменениеЗадание И БылоИзменениеСтатуса Тогда
					ТекстСообщения = "" + Ордер + ": Заполнен некорректно и не будет включен в " + ЗаданиеНаПеревозку + " и не переведен в статус ""К отгрузке"""
				ИначеЕсли БылоИзменениеЗадание Тогда
					ТекстСообщения = "" + Ордер + ": Заполнен некорректно и не будет включен в " + ЗаданиеНаПеревозку
				Иначе 
					ТекстСообщения = "" + Ордер + ": Заполнен некорректно и не будет переведен в статус ""К отгрузке"""
				КонецЕсли; 
				ЗафиксироватьОшибку(ТекстСообщения, Ордер, ПараметрыОбновленияОрдера, Отказ)
			КонецЕсли			
		Исключение
			ШаблонСообщения = "" + Ордер + ": Ошибка при %1 по причине:" + Символы.ПС + "%2";
			Если БылоИзменениеЗадание И БылоИзменениеСтатуса Тогда
				ПараметрСообщения = "включении в " + ЗаданиеНаПеревозку + " и переводе в статус ""К отгрузке"""
			ИначеЕсли БылоИзменениеЗадание Тогда
				ПараметрСообщения = "включении в " + ЗаданиеНаПеревозку
			Иначе 
				ПараметрСообщения = "переводе в статус ""К отгрузке"""
			КонецЕсли;
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПараметрСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗафиксироватьОшибку(ТекстСообщения, Ордер, ПараметрыОбновленияОрдера, Отказ)
		КонецПопытки
	КонецЕсли
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

Процедура ИзменитьНакладную(ПараметрыОбновленияНакладной, Отказ) Экспорт
		
	//++ РС Консалт: Минаков А.С. Задача 20226
	Перем Накладная;
	Перем ЗаданиеНаПеревозку;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	МодульОбщегоНазначения = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
	
	ПараметрыОбновленияНакладной.Свойство("Накладная", Накладная);
	ПараметрыОбновленияНакладной.Свойство("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	
	Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		РеквизитРаспоряжение = "ЗаказКлиента";
		РеквизитСклад = "Склад";
		РеквизитПоРаспоряжению = "РеализацияПоЗаказам"
		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		РеквизитРаспоряжение = "ЗаказНаПеремещение";
		РеквизитСклад = "СкладОтправитель";
		РеквизитПоРаспоряжению = "ПеремещениеПоЗаказам"
		
	КонецЕсли;
	
	РеквизитыНакладной = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Накладная, РеквизитРаспоряжение + ", " + РеквизитСклад + ", " + РеквизитПоРаспоряжению);
	
	Если РеквизитыНакладной[РеквизитПоРаспоряжению] Тогда
		Распоряжение = РеквизитыНакладной[РеквизитРаспоряжение]
	Иначе
		Распоряжение = Накладная
	КонецЕсли;
	
	Склад = РеквизитыНакладной[РеквизитСклад];
	
	Если ПараметрыОбновленияНакладной.ЗаполнитьЗадание И Не ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда
		
		Запрос = Новый Запрос(	
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК ЗаданиеНаПеревозку
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|ГДЕ
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
		|	И ЗаданиеНаПеревозкуРаспоряжения.РСК_Накладная = &Накладная
		|	И ЗаданиеНаПеревозкуРаспоряжения.Доставлено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗаданиеНаПеревозку.Ссылка) КАК Ссылка
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозку
		|ГДЕ
		|	ЗаданиеНаПеревозку.Ссылка.Проведен
		|	И ЗаданиеНаПеревозку.Распоряжение = &Распоряжение
		|	И ЗаданиеНаПеревозку.Склад = &Склад
		|	И ЗаданиеНаПеревозку.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке))
		|	И ЗаданиеНаПеревозку.РСК_Накладная В(&МассивПустыхНакладных)
		|	И ЗаданиеНаПеревозку.Ссылка.Дата В
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ЗаданиеНаПеревозку.Ссылка.Дата) КАК Дата
		|			ИЗ
		|				Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозку
		|			ГДЕ
		|				ЗаданиеНаПеревозку.Ссылка.Проведен
		|				И ЗаданиеНаПеревозку.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке))
		|				И ЗаданиеНаПеревозку.Распоряжение = &Распоряжение
		|				И ЗаданиеНаПеревозку.Склад = &Склад)
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(ЗаданиеНаПеревозку.Ссылка) ЕСТЬ NULL");
		
		МассивПустыхНакладных = Новый Массив;
		МассивПустыхНакладных.Добавить(Неопределено);
		МассивПустыхНакладных.Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
		МассивПустыхНакладных.Добавить(Документы.ПеремещениеТоваров.ПустаяСсылка());
		МассивПустыхНакладных.Добавить(Накладная);
		
		Запрос.УстановитьПараметр("МассивПустыхНакладных", МассивПустыхНакладных);
		Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Накладная", Накладная); 
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[1].Пустой() Тогда
			ТекстСообщения = "" + Накладная + ": Не найдено задание на перевозку по складу " + Склад;
			МодульОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Накладная,,, Отказ)	
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат
		КонецЕсли; 
		
		Выборка = РезультатыЗапроса[1].Выбрать();
		Выборка.Следующий();
		
		ЗаданиеНаПеревозку = Выборка.Ссылка;
		
		Если Не РезультатыЗапроса[0].Пустой() Тогда
			Выборка = РезультатыЗапроса[0].Выбрать();
			ТекстСообщения = "" + Накладная + ": Входит в несколько заданий на перевозку! Список заданий:";
			Сч = 0;
			Пока Выборка.Следующий() Цикл
				Сч = Сч + 1;
				ТекстСообщения = ТекстСообщения + Символы.ПС + Выборка.ЗаданиеНаПеревозку
			КонецЦикла;
			Если Сч > 1 Тогда
				МодульОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Накладная,,, Отказ)	
			КонецЕсли	
		КонецЕсли	
				
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ЗаданиеОбъект = ЗаданиеНаПеревозку.ПолучитьОбъект();
	
	Если ПараметрыОбновленияНакладной.ЗаполнитьЗадание Тогда
		
		СтруктураПоиска = Новый Структура("Распоряжение, Склад", Распоряжение, Склад);
		
		НайденныеСтроки = ЗаданиеОбъект.Распоряжения.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() Тогда
			СтрокаРаспоряжения = НайденныеСтроки[0];
			
			СтрокаРаспоряжения.РСК_Накладная = Накладная;
			Попытка
				ЗаданиеОбъект.Записать();
				ТекстСообщения = "" + Накладная + ": Включена в " + ЗаданиеНаПеревозку;
			Исключение
				ТекстСообщения = "Ошибка при включении накладной " + Накладная + " в " + ЗаданиеНаПеревозку + "!"
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			КонецПопытки;
			МодульОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Накладная,,, Отказ)
		Иначе
			ТекстСообщения = "Ошибка при добавлении накладной " + Накладная + " в " + ЗаданиеНаПеревозку + "!"
			+ Символы.ПС + "Из задания удалено распоряжение";
			МодульОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЗаданиеНаПеревозку,,, Отказ)
		КонецЕсли
	КонецЕсли
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры	

Функция ПодобратьОрдер(Распоряжение, Склад, ДатаОтгрузки = Неопределено)
	
	//++ РС Консалт: Минаков А.С. Задача 20226	
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		ДатаПроверки = ДатаОтгрузки
	Иначе
		ДатаПроверки = ТекущаяДатаСеанса()
	КонецЕсли;
				
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|		ПО РасходныйОрдерНаТовары.Ссылка = РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка
	|			И (РасходныйОрдерНаТовары.Проведен)
	|			И (РасходныйОрдерНаТовары.Склад = &Склад)
	|			И (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение)
	|			И (НАЧАЛОПЕРИОДА(РасходныйОрдерНаТовары.ДатаОтгрузки, ДЕНЬ) >= &ДатаОтгрузки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйОрдерНаТовары.ДатаОтгрузки");
	
	Запрос.УстановитьПараметр("ДатаОтгрузки", НачалоДня(ДатаПроверки));
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение); 
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Документы.РасходныйОрдерНаТовары.ПустаяСсылка()
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка	
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецФункции

Функция ПодобратьЗадание(Распоряжение, Склад)
	
	Запрос = Новый Запрос(	
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗаданиеНаПеревозку.Ссылка) КАК Ссылка
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозку
	|ГДЕ
	|	ЗаданиеНаПеревозку.Ссылка.Проведен
	|	И ЗаданиеНаПеревозку.Распоряжение = &Распоряжение
	|	И ЗаданиеНаПеревозку.Склад = &Склад
	|	И ЗаданиеНаПеревозку.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке))
	|	И ЗаданиеНаПеревозку.Ссылка.Дата В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ЗаданиеНаПеревозку.Ссылка.Дата) КАК Дата
	|			ИЗ
	|				Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозку
	|			ГДЕ
	|				ЗаданиеНаПеревозку.Ссылка.Проведен
	|				И ЗаданиеНаПеревозку.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке))
	|				И ЗаданиеНаПеревозку.Распоряжение = &Распоряжение
	|				И ЗаданиеНаПеревозку.Склад = &Склад)
	|
	|ИМЕЮЩИЕ
	|	НЕ МАКСИМУМ(ЗаданиеНаПеревозку.Ссылка) ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.ЗаданиеНаПеревозку.ПустаяСсылка()
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка
	
КонецФункции	

Процедура ПроверитьСборку(Ордер, ПараметрыОбновленияОрдера, Отказ)
	
	РеквизитыОрдера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ордер, "Статус, Проведен");
	Если РеквизитыОрдера.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено Или Не РеквизитыОрдера.Проведен Тогда		
		ТекстСообщения = "" + Ордер + ": Не завершена сборка!";
		ЗафиксироватьОшибку(ТекстСообщения, Ордер, ПараметрыОбновленияОрдера, Отказ)
	Иначе	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТоварыКОтбору.Распоряжение КАК Распоряжение,
		|	ТоварыКОтбору.Номенклатура КАК Номенклатура,
		|	ТоварыКОтбору.Характеристика КАК Характеристика,
		|	ТоварыКОтбору.Назначение КАК Назначение,
		|	ТоварыКОтбору.Серия КАК Серия,
		|	ТоварыКОтбору.ТоварноеМесто КАК ТоварноеМесто,
		|	СУММА(ТоварыКОтбору.КОтбору + ТоварыКОтбору.Отобрано) КАК ОтобраноОрдер
		|ПОМЕСТИТЬ ВтОтборыОрдера
		|ИЗ
		|	РегистрНакопления.ТоварыКОтбору КАК ТоварыКОтбору
		|ГДЕ
		|	ТоварыКОтбору.Регистратор = &Ордер
		|	И ТоварыКОтбору.Распоряжение = &Ордер
		|	И ТоварыКОтбору.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтбору.Распоряжение,
		|	ТоварыКОтбору.Номенклатура,
		|	ТоварыКОтбору.Характеристика,
		|	ТоварыКОтбору.Назначение,
		|	ТоварыКОтбору.Серия,
		|	ТоварыКОтбору.ТоварноеМесто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтОтборыОрдера.Распоряжение КАК Распоряжение
		|ИЗ
		|	ВтОтборыОрдера КАК ВтОтборыОрдера
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТоварыКОтбору.Распоряжение КАК Распоряжение,
		|			ТоварыКОтбору.Номенклатура КАК Номенклатура,
		|			ТоварыКОтбору.Характеристика КАК Характеристика,
		|			ТоварыКОтбору.Назначение КАК Назначение,
		|			ТоварыКОтбору.Серия КАК Серия,
		|			ТоварыКОтбору.ТоварноеМесто КАК ТоварноеМесто,
		|			СУММА(ТоварыКОтбору.Отобрано) КАК Отобрано
		|		ИЗ
		|			РегистрНакопления.ТоварыКОтбору КАК ТоварыКОтбору
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|				ПО ТоварыКОтбору.Регистратор = ОтборРазмещениеТоваров.Ссылка
		|					И (ТоварыКОтбору.Распоряжение = &Ордер) 
		|					И (ТоварыКОтбору.Активность)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТоварыКОтбору.Распоряжение,
		|			ТоварыКОтбору.Номенклатура,
		|			ТоварыКОтбору.Характеристика,
		|			ТоварыКОтбору.Назначение,
		|			ТоварыКОтбору.Серия,
		|			ТоварыКОтбору.ТоварноеМесто) КАК ВложенныйЗапрос
		|		ПО ВтОтборыОрдера.Распоряжение = ВложенныйЗапрос.Распоряжение
		|			И ВтОтборыОрдера.Номенклатура = ВложенныйЗапрос.Номенклатура
		|			И ВтОтборыОрдера.Характеристика = ВложенныйЗапрос.Характеристика
		|			И ВтОтборыОрдера.Назначение = ВложенныйЗапрос.Назначение
		|			И ВтОтборыОрдера.Серия = ВложенныйЗапрос.Серия
		|			И ВтОтборыОрдера.ТоварноеМесто = ВложенныйЗапрос.ТоварноеМесто
		|ГДЕ
		|	НЕ ВтОтборыОрдера.ОтобраноОрдер = ЕСТЬNULL(ВложенныйЗапрос.Отобрано, 0)");
		
		Запрос.УстановитьПараметр("Ордер", Ордер);
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			ТекстСообщения = "" + Ордер + ": Не завершена сборка!";
			ЗафиксироватьОшибку(ТекстСообщения, Ордер, ПараметрыОбновленияОрдера, Отказ)		
		КонецЕсли
	КонецЕсли
	
КонецПроцедуры	

Процедура ЗафиксироватьОшибку(ТекстОшибки, СсылкаНаОбъект = Неопределено, ПараметрыОбновленияОрдера, Отказ = Ложь)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	Если ПараметрыОбновленияОрдера.ВыполнениеВФоне Тогда
		Отказ = Истина;
		ПараметрыОбновленияОрдера.Ошибки.Добавить(Новый Структура("ТекстОшибки, СсылкаНаОбъект", ТекстОшибки, СсылкаНаОбъект))	
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, СсылкаНаОбъект,,, Отказ)	
	КонецЕсли	
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

#КонецОбласти


Функция ДатаНачалоОтсчетаПоискаЗаказовКлиентаЭДО() Экспорт 
	
	Возврат "ДатаВремя(2022,01,01,23,59,59)";

КонецФункции

//++РС Коналт Петрова Мария 30.11.2022
Процедура РСК_ЗаменаСтатьиДДСОРПОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	ДвиженияИсточник = Источник.Движения.ДвиженияДенежныеСредстваКонтрагент; 
	ДвиженияИсточник.Прочитать();
	Для каждого запись из ДвиженияИсточник цикл  
		Если запись.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента тогда           
			запись.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Поступления от покупателей");
		КонецЕсли;		
	КонецЦикла;
	ДвиженияИсточник.Записать();
КонецПроцедуры 
//--РС Коналт Петрова Мария 30.11.202
