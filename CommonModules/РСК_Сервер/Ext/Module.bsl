//++Конарев Ввод на основании
Функция ДобавитьКомандуСоздатьНаОснованииПриобретениеУслугПрочихАктивов(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПриобретениеУслугПрочихАктивов) Тогда
          КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
          КомандаСоздатьНаОсновании.Обработчик = "РСК_Клиент.СозданиеПриобретениеУслугПрочихАктивов";
          КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
          КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
     
          Возврат КомандаСоздатьНаОсновании;

     КонецЕсли;

     Возврат Неопределено;	
	
 КонецФункции

//++ Конарев Добавление возможности печати сертификатов формата pdf
Процедура ПрисоединитьPDFКТабличномуДокументу(ТабличныйДокумент, Макет, ПрисоединенныйФайл, ТипСертификата) Экспорт
	
	ВременнаяПапкаДляРазархивирования = КаталогВременныхФайлов() + Новый УникальныйИдентификатор;
	УстановитьПривилегированныйРежим(Истина);
	СоздатьКаталог(ВременнаяПапкаДляРазархивирования); 
	УстановитьПривилегированныйРежим(Ложь);
	ВременныйФайл  = ПолучитьИмяВременногоФайла("pdf");
	ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
	ДвоичныеДанные.Записать(ВременныйФайл);  
	
	МассивПутейPNG = ПреобразоватьPdfВPng(ВременныйФайл, ВременнаяПапкаДляРазархивирования, 150, ТипСертификата); 
	Для Каждого Путь из МассивПутейPNG Цикл 
		
		Область = Макет.ПолучитьОбласть("Изображение");		 
		Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
		Рисунок.Высота = 297;
		Рисунок.Ширина = 210;
		
		Рисунок.ГраницаСверху = Ложь;
		Рисунок.ГраницаСнизу = Ложь;
		Рисунок.ГраницаСлева = Ложь;
		Рисунок.ГраницаСправа = Ложь;
		
		Рисунок.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		Рисунок.Картинка = Новый Картинка(Новый ДвоичныеДанные(Путь));
		Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		ТабличныйДокумент.Вывести(Область);	  
		Если Путь <> МассивПутейPNG[МассивПутейPNG.Количество()-1] Тогда 
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
	КонецЦикла;  
	
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);
	
КонецПроцедуры   

// Запускает ImageMagick с указанными параметрами. В случае ошибки вызывается исключение,
// в остальных случаях возвращается код возврата ImageMagick.
//
// Параметры:
//   Параметры - Строка - параметры запуска ImageMagick.
//   ФайлыКУдалению - Массив - необязательный параметр, временные файлы, требующие удаления.
//   ИмяBatФайла - строка, полный путь + имя  bat файла. Может быть пуст.
//
// Возвращаемое значение:
//   Число - 0 в случае успешного выполнения, 300+ - при завершении с предупреждением.
//     Полный список предупреждений см. в документации к ImageMagick.
//
Функция ЗапуститьImageMagick(Параметры, ФайлыКУдалению, ИмяBatФайла = "") Экспорт
	
	ТипПлатформыСервера = Новый СистемнаяИнформация();
	
	Если (ТипПлатформыСервера = ТипПлатформы.Linux_x86 
		Или ТипПлатформыСервера = ТипПлатформы.Linux_x86_64) Тогда
	
		ИмяBatФайла = "";
		
	КонецЕсли;	
	
	ПолныйПуть = "C:\Program Files\ImageMagick-7.1.0-Q16\magick.exe";
	Если (ТипПлатформыСервера <> ТипПлатформы.Linux_x86 
		И ТипПлатформыСервера <> ТипПлатформы.Linux_x86_64) // в Линукс можно пустой путь
		И Не ЗначениеЗаполнено(ПолныйПуть) Тогда
			
		УдалитьВременныеФайлы(ФайлыКУдалению);
		ВызватьИсключение НСтр("ru = 'В настройках программы не указан полный путь к программе ImageMagick.'");
	КонецЕсли;
	
	Если ПолныйПуть = "convert.exe" Тогда
		УдалитьВременныеФайлы(ФайлыКУдалению);
		ВызватьИсключение НСтр("ru = 'В настройках программы указан полный путь к устаревшей версии ImageMagick (convert.exe).'");
	КонецЕсли;
		
	Если (ТипПлатформыСервера = ТипПлатформы.Linux_x86 
		Или ТипПлатформыСервера = ТипПлатформы.Linux_x86_64) Тогда
		
		Если ПолныйПуть <> "" Тогда
			СтрокаКоманды = СокрЛП(ПолныйПуть) + " " + Параметры;
		Иначе	
			СтрокаКоманды = Параметры;
		КонецЕсли;

	Иначе	
		СтрокаКоманды = """" + СокрЛП(ПолныйПуть) + """ " + Параметры;
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаКоманды;
	Если ИмяBatФайла <> "" Тогда
		ЗаписьТекста = Новый ЗаписьТекста(ИмяBatФайла, "cp866");
		ЗаписьТекста.Записать(СтрокаКоманды);
		ЗаписьТекста.Закрыть();
		ФайлыКУдалению.Добавить(ИмяBatФайла);
		СтрокаЗапуска = ИмяBatФайла;
	КонецЕсли;	
	
	КодВозврата = Неопределено;
	Попытка
		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
	Исключение
		УдалитьВременныеФайлы(ФайлыКУдалению);
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка при вызове ImageMagick с командной строкой:
			|%1
			|(%2)'"),
			СтрокаКоманды,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	УдалитьВременныеФайлы(ФайлыКУдалению);
	
	// Успех.
	Если КодВозврата = 0 Тогда
		Возврат КодВозврата;
	КонецЕсли;
	
	// Не ImageMagick.
	Если КодВозврата = Неопределено Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Нет кода возврата при вызове ImageMagick с командной строкой:
			|%1
			|Возможно, указанный путь не является путем к ImageMagick.'"),
			СтрокаКоманды);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Предупреждение.
	Если КодВозврата >= 300 
		И КодВозврата < 400 Тогда
		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Предупреждение %1 при вызове ImageMagick с командной строкой:
			|%2
			|Подробности см. в документации к ImageMagick.'"),
			КодВозврата,
			СтрокаКоманды);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с картинками'"),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстПредупреждения);
		Возврат КодВозврата;
	КонецЕсли;
	
	// Ошибка ОС или иного приложения.
	Если КодВозврата < 300 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка %1 при вызове ImageMagick с командной строкой:
			|%2
			|Возможно, нарушена структура командной строки.'"),
			КодВозврата,
			СтрокаКоманды);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Ошибка ImageMagick.
	ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка %1 при вызове ImageMagick с командной строкой:
		|%2
		|Подробности см. в документации к ImageMagick.'"),
		КодВозврата,
		СтрокаКоманды);
	ВызватьИсключение ТекстИсключения;
	
КонецФункции  

// Преобразует pdf в массив png
// 
// Параметры:
//  ИмяФайлаPdf  - Строка
//  ВременнаяПапкаДляРазархивирования  -Строка
//  DPI - число
// 
// Возвращаемое значение:
//  Массив - Преобразовать pdf в png
Функция ПреобразоватьPdfВPng(ИмяФайлаPdf, ВременнаяПапкаДляРазархивирования, DPI = 0, ТипСертификата) Экспорт
	
	Если DPI = 0 Тогда
		DPI = 150;
	КонецЕсли;	
	
	МассивПутейPng = Новый Массив;
	ПутьНовогоФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "res.png";
	ФайлыКУдалению = Новый Массив;
	
	Если ТипСертификата = "Технический паспорт" Тогда
		Параметры = СтрШаблон("convert -rotate 90 -strip -density DPI -quality 0 %1 %2",
			ИмяФайлаPdf,
			ПутьНовогоФайла); 
	Иначе
		
		Параметры = СтрШаблон("convert -strip -density DPI -quality 0 %1 %2",
			ИмяФайлаPdf,
			ПутьНовогоФайла);
	КонецЕсли;

	Параметры = СтрЗаменить(Параметры, "DPI", Строка(DPI));	
	
	ЗапуститьImageMagick(Параметры, ФайлыКУдалению);
	
	МассивФайлов = НайтиФайлы(ВременнаяПапкаДляРазархивирования, "res*.png");
	
	МассивПутей = Новый Массив;
	МассивСтруктур = Новый Массив;
	
	// отсортируем по дате
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПутьФайла = Файл.ПолноеИмя;
		
		СтруктураФайла = Новый Структура("ПутьФайла, ИмяБезРасширения");
		СтруктураФайла.ПутьФайла = ПутьФайла;
		СтруктураФайла.ИмяБезРасширения = Файл.ИмяБезРасширения;
		
		МассивСтруктур.Добавить(СтруктураФайла);
		
	КонецЦикла;	
	
	СортироватьМассивПоЧислам(МассивСтруктур, МассивПутей);
	
	Для Каждого ПутьФайла Из МассивПутей Цикл
		МассивПутейPng.Добавить(ПутьФайла);
	КонецЦикла;	
	
	Возврат МассивПутейPng;

КонецФункции 

// Определяет, является ли переданная строка числом
//
// Параметры:
//   СтрокаСимволов - Строка - строка символов
//
// Возвращаемое значение:
//   Булево - возвращает Истина, если строка является числом
//
Функция ЭтоЧисло(СтрокаСимволов)
	
	СтрокаСимволов = СокрЛП(СтрокаСимволов);
	
	Если Не ЗначениеЗаполнено(СтрокаСимволов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(СтрокаСимволов);
	
	Для ТекущийСимвол = 1 По ДлинаСтроки Цикл
		
		КодСимвола = КодСимвола(СтрокаСимволов, ТекущийСимвол);
		
		Если КодСимвола < 48 Или КодСимвола > 57 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура УдалитьВременныеФайлы(ФайлыКУдалению)
	
	Если ФайлыКУдалению = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ФайлКУдалению Из ФайлыКУдалению Цикл
		УдалитьФайлы(ФайлКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура СортироватьМассивПоЧислам(МассивСтруктур, МассивПутей)
	
	ПараметрыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("ПутьФайла");
	ТаблицаФайлов.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтруктураФайла Из МассивСтруктур Цикл
		
		НоваяСтрока = ТаблицаФайлов.Добавить();
		НоваяСтрока.ПутьФайла = СтруктураФайла.ПутьФайла;
		
		ИмяБезРасширения = СтруктураФайла.ИмяБезРасширения;
		
		Номер = 0;
		СтрокаНомера = "";
		
		ТекПоз = СтрДлина(ИмяБезРасширения);
		Пока ТекПоз > 1 Цикл
			Символ = Сред(ИмяБезРасширения, ТекПоз, 1);
			Если Не ЭтоЧисло(Символ) Тогда
				Прервать;
			КонецЕсли;	
			СтрокаНомера = Символ + СтрокаНомера;
			ТекПоз = ТекПоз - 1;
		КонецЦикла;	
		
		Попытка
			Номер = Число(СтрокаНомера);
		Исключение
		КонецПопытки;	
		
		НоваяСтрока.Номер = Номер;
		
	КонецЦикла;		
	
	ТаблицаФайлов.Сортировать("Номер Возр");  
	
	МассивПутей.Очистить();
	
	Для Каждого Стр Из ТаблицаФайлов Цикл
		МассивПутей.Добавить(Стр.ПутьФайла);
	КонецЦикла;	
	
КонецПроцедуры	

Функция ПроизвестиЗаписьТаблицыВXMLСервер(ТаблицаЗначений) Экспорт
    
    ЗаписьXML = Новый ЗаписьXML;
    ЗаписьXML.УстановитьСтроку();
    ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ТаблицаЗначений);
    ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
    Возврат ЗаписьXML.Закрыть();
    
КонецФункции     

Функция ПроизвестиЧтениеТаблицыИзXMLСервер(СтрокаXML) Экспорт
    
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(СтрокаXML);
    ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core","ValueTable");
    ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъектаXDTO); 
    ОбъектXDTO.Проверить();
    
    ЧтениеXML.Закрыть();
    ТаблицаЗначений = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
    Возврат ТаблицаЗначений;
    
КонецФункции

Процедура СоздатьЗадачиИсполнителямНаДобавлениеСертификатов(Предмет, ОписаниеЗадач) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Если ОтсутствуютАктивныеЗадачиПоПредмету(Предмет) Тогда
		
		Для Каждого Описание Из ОписаниеЗадач Цикл 
			
			ШаблонРолиИсполнителя  = "Ответственные за сертификаты номенклатуры %1";

			ИсполнителиРоли   = БизнесПроцессыИЗадачиСервер.ИсполнителиПоРоли(Справочники.РолиИсполнителей.НайтиПоНаименованию(
																						СтрШаблон(ШаблонРолиИсполнителя,Описание.Ключ)));
			ИсполнителиЗадачи = ИсполнителиРоли.Выбрать();
			Пока ИсполнителиЗадачи.Следующий() Цикл
				
				Задача 				  = Задачи.ЗадачаИсполнителя.СоздатьЗадачу(); 
				Задача.Автор 		  = Пользователи.ТекущийПользователь();
				Задача.СрокИсполнения = ТекущаяДата() + 7200;
				Задача.Дата 		  = ТекущаяДата(); 
				Задача.ДатаИсполнения = ТекущаяДата(); 
				Задача.Предмет 		  = Предмет;
				Задача.ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Предмет);
				
				Задача.Наименование  = "Добавить сертификаты к номенклатуре заказа";
				Задача.Описание 	 = Описание.Значение;
				Задача.ТочкаМаршрута = Бизнеспроцессы.Задание.ТочкиМаршрута.Выполнить;
				Задача.Исполнитель   = ИсполнителиЗадачи.Исполнитель; 
				
				Попытка
					Задача.Записать();
				Исключение
					ЗаписьЖурналаРегистрации("Создание задачи на добавление сертификата номенклатуры", УровеньЖурналаРегистрации.Ошибка,,,
	   							 "Ошибка при записи новой задачи", РежимТранзакцииЗаписиЖурналаРегистрации.Независимая); 
				КонецПопытки;
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры  

Процедура СоздатьЗадачуИнформированиеОПДЗ(Предмет, ОписаниеЗадачи, Подразделение) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Если ОтсутствуютАктивныеЗадачиПоПредмету(Предмет) Тогда
		
		ИсполнительФизЛицо       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение,"ТекущийРуководитель"); 
		Если ЗначениеЗаполнено(ИсполнительФизЛицо) Тогда
			
			ИсполнительЗадачи = ПользовательПоФизЛицу(ИсполнительФизЛицо);
			Если ЗначениеЗаполнено(ИсполнительЗадачи) Тогда
				Задача 				  = Задачи.ЗадачаИсполнителя.СоздатьЗадачу(); 
				Задача.Автор 		  = Пользователи.ТекущийПользователь();
				Задача.СрокИсполнения = ТекущаяДата() + 7200;
				Задача.Дата 		  = ТекущаяДата(); 
				Задача.ДатаИсполнения = ТекущаяДата(); 
				Задача.Предмет 		  = Предмет;
				Задача.ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Предмет);
				
				Задача.Наименование  = "Обнаружена просроченная дебиторская задолженность по документу";
				Задача.Описание 	 = ОписаниеЗадачи;
				Задача.ТочкаМаршрута = Бизнеспроцессы.Задание.ТочкиМаршрута.Выполнить;
				Задача.Исполнитель   = ИсполнительЗадачи; 
				
				Попытка
					Задача.Записать();
				Исключение
					ЗаписьЖурналаРегистрации("Создание задачи уведомления о ПДЗ", УровеньЖурналаРегистрации.Ошибка,,,
					"Ошибка при записи новой задачи", РежимТранзакцииЗаписиЖурналаРегистрации.Независимая); 
				КонецПопытки;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры  

Функция ПользовательПоФизЛицу(ФизическоеЛицо) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",ФизическоеЛицо);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда Возврат Неопределено; КонецЕсли;
	
	ПользователиФизЛица = Результат.Выбрать();
	ПользователиФизЛица.Следующий();
	
	Возврат ПользователиФизЛица.Ссылка;
	
КонецФункции

Функция ОтсутствуютАктивныеЗадачиПоПредмету(Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
	Запрос.УстановитьПараметр("Предмет", Предмет); 
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

//+РС Консалт Назаров М.Ю. 28.03.2023 10:19:58
Функция ПолучитьДолжностиФизЛицаПоОрганизацииЕИС(ФизЛицо, Организация) Экспорт 
	
	Должности = Новый Массив;
	
	Попытка
		
		ПодписантыОрганизации = ЭлектронноеАктированиеЕИС.ПодписантыОрганизации(Организация);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Фамилия", 	ФизЛицо.Фамилия);
		Отбор.Вставить("Имя", 		ФизЛицо.Имя);
		Отбор.Вставить("Отчество", 	ФизЛицо.Отчество);
		
		НайденныеСтроки = ПодписантыОрганизации.НайтиСтроки(Отбор);
		Для Каждого Строка Из НайденныеСтроки Цикл 
			Должности.Добавить(Строка.Должность);
		КонецЦикла;    
		
	Исключение
		ЗаписьЖурналаРегистрации("ПолучениеДолжностейФизЛица", УровеньЖурналаРегистрации.Ошибка, ,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Возврат Должности;

КонецФункции
//-РС Консалт Назаров М.Ю. 28.03.2023 10:19:58