
&ИзменениеИКонтроль("УстановитьСвойстваПолейДляНастройкиПравила")
Процедура РСК_УстановитьСвойстваПолейДляНастройкиПравила(СхемаКомпоновкиДанных, Правило)

	Если СхемаКомпоновкиДанных = Неопределено
		ИЛИ СхемаКомпоновкиДанных.НаборыДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
		Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда

		ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;

		Счет = Правило.ИсточникДанных;
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных);
		ПолеГруппаСчет = ПоляНабораДанных.Найти("ГруппаСчет");
		Если ПолеГруппаСчет <> Неопределено Тогда
			РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Код, Наименование");
			ПолеГруппаСчет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", РеквизитыСчета.Код, РеквизитыСчета.Наименование); 
		КонецЕсли;

		ВидыКорСубконто = Неопределено;
		Если ТипЗнч(Правило.Ссылка) = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов")
			И ЗначениеЗаполнено(Правило.КорСчет) Тогда

			ВидыКорСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.КорСчет);
			ПолеГруппаКорСчет = ПоляНабораДанных.Найти("ГруппаКорСчет");
			Если ПолеГруппаКорСчет <> Неопределено Тогда
				РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Правило.КорСчет, "Код, Наименование");
				ПолеГруппаКорСчет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", РеквизитыСчета.Код, РеквизитыСчета.Наименование); 
			КонецЕсли;

			ПолеКорСчет = ПоляНабораДанных.Найти("ГруппаКорСчет.КорСчет");
			Если ПолеКорСчет <> Неопределено Тогда
				ПолеКорСчет.ОграничениеИспользования.Условие = Истина;
				ПолеКорСчет.ОграничениеИспользованияРеквизитов.Условие = Истина;
			КонецЕсли;

		КонецЕсли;

		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто);

	КонецЕсли;

	// Скроем служебные из списка полей, доступных для отбора
	СлужебныеПоля = ИсточникиДанныхПовтИсп.СлужебныеПоляМакетовРасчета();

	Для каждого ПолеНабора Из СхемаКомпоновкиДанных.НаборыДанных[0].Поля Цикл

		Если ТипЗнч(ПолеНабора) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;

		ЭтоПолеНедоступноеДляЗаполненияАналитики = Не ЗначениеЗаполнено(ПолеНабора.ТипЗначения);

		ПолеНабора.ОграничениеИспользования.Поле = ЭтоПолеНедоступноеДляЗаполненияАналитики;
		ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = ЭтоПолеНедоступноеДляЗаполненияАналитики;

		Если ПолеНабора.Поле = "Регистратор" Тогда
			
			#Вставка
			Если ТипЗнч(Правило) = Тип("ДанныеФормыСтруктура") И НЕ Правило.Свойство("ПромежуточноеКэшированиеРезультатовРаботыПравил") Тогда
				ПромежуточноеКэширование = Ложь;
			Иначе
			#КонецВставки
			ПромежуточноеКэширование = Правило.ПромежуточноеКэшированиеРезультатовРаботыПравил;
			#Вставка 
			КонецЕсли;
            #КонецВставки

			ПолеНабора.ОграничениеИспользования.Поле = Ложь;
			ПолеНабора.ОграничениеИспользования.Условие = Не ПромежуточноеКэширование;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = Не ПромежуточноеКэширование;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Условие = Не ПромежуточноеКэширование;

		ИначеЕсли Не СлужебныеПоля.Найти(ПолеНабора.Поле) = Неопределено Тогда

			ПолеНабора.ОграничениеИспользования.Условие = Истина;

		КонецЕсли;

	КонецЦикла;

	ИменаЗарезервированныхПараметров = ИменаОбщихПараметровПравилПолученияФакта();
	Для каждого ПараметрКомпоновки Из СхемаКомпоновкиДанных.Параметры Цикл
		Если Не ИменаЗарезервированныхПараметров.Найти(ПараметрКомпоновки.Имя) = Неопределено Тогда
			ПараметрКомпоновки.ОграничениеИспользования = Истина;
			ПараметрКомпоновки.ВключатьВДоступныеПоля = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&ИзменениеИКонтроль("ПересчитатьТаблицуДанныхВВалюту")
Процедура РСК_ПересчитатьТаблицуДанныхВВалюту(ТаблицаДанных, ВалютаОтчета, ФункциональнаяВалюта, ПоляПересчета)

	Если ПоляПересчета = Неопределено Тогда
		ПолеПересчета = Новый Структура;
		ПолеПересчета.Вставить("ПолеПересчета", "СуммаВВалютеХранения");
		ПолеПересчета.Вставить("ПолеФункциональнойВалюты", "СуммаВФункциональнойВалюте");
		ПолеПересчета.Вставить("ПолеВыходныхДанных", "Сумма");
		ПолеПересчета.Вставить("ПолеВыходныхДанныхВВалюте", "СуммаВВалюте");
		ПоляПересчета = Новый Массив;
		ПоляПересчета.Добавить(ПолеПересчета);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&ПоляТаблицы
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ФункциональнаяВалюта = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр) ТОГДА
	|			ВалютаУпр.Значение
	|		КОГДА &ФункциональнаяВалюта = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл) ТОГДА
	|			&ВалютаРегл
	|	КОНЕЦ КАК ФункциональнаяВалюта,
	|	&ПоляТаблицы
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаДанных
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУпр
	|	ПО ИСТИНА
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВалют.ВалютаСуммы КАК ВалютаСуммы,
	|	ТаблицаВалют.ПериодКурсаПересчет КАК ПериодКурсаПересчет
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.ФункциональнаяВалюта КАК ВалютаСуммы,
	|		Таблица.ПериодКурса КАК ПериодКурсаПересчет
	|	ИЗ
	|		Таблица
	|	ГДЕ
	|		Таблица.ВалютаХранения <> &ВалютаОтчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.ВалютаХранения КАК ВалютаСуммы,
	|		Таблица.ПериодКурса КАК ПериодКурсаПересчет
	|	ИЗ
	|		Таблица
	|	ГДЕ
	|		Таблица.ВалютаХранения <> &ВалютаОтчета
	|		И Таблица.ВалютаХранения <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|) КАК ТаблицаВалют
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ВалютаСуммы,
	|	ТаблицаПериодов.ПериодКурсаПересчет,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ТаблицаПериодовВалютаСуммы
	|ИЗ
	|	ТаблицаПериодов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|	ПО
	|		КурсыВалют.Период <= ТаблицаПериодов.ПериодКурсаПересчет
	|		И КурсыВалют.Валюта = ТаблицаПериодов.ВалютаСуммы
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ВалютаСуммы,
	|	ТаблицаПериодов.ПериодКурсаПересчет
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ПериодКурсаПересчет,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ТаблицаПериодовВалютаОтчета
	|ИЗ
	|	ТаблицаПериодов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|	ПО
	|		КурсыВалют.Период <= ТаблицаПериодов.ПериодКурсаПересчет
	|		И КурсыВалют.Валюта = &ВалютаОтчета
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ПериодКурсаПересчет
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПериодов.ВалютаСуммы,
	|	ТаблицаПериодов.ПериодКурсаПересчет,
	|	ВЫБОР
	|		КОГДА КурсыВалютХранения.КурсЗнаменатель <> 0 И КурсыВалютОтчета.КурсЧислитель <> 0 ТОГДА
	|			КурсыВалютХранения.КурсЧислитель * КурсыВалютОтчета.КурсЗнаменатель / (КурсыВалютХранения.КурсЗнаменатель * КурсыВалютОтчета.КурсЧислитель)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаВВалютуОтчета
	|ИЗ
	|	ТаблицаПериодов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПериодовВалютаСуммы
	|	ПО
	|		ТаблицаПериодовВалютаСуммы.ПериодКурсаПересчет = ТаблицаПериодов.ПериодКурсаПересчет
	|		И ТаблицаПериодовВалютаСуммы.ВалютаСуммы = ТаблицаПериодов.ВалютаСуммы
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютХранения
	|		ПО
	|			КурсыВалютХранения.Период = ТаблицаПериодовВалютаСуммы.ДатаКурса
	|			И КурсыВалютХранения.Валюта = ТаблицаПериодовВалютаСуммы.ВалютаСуммы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПериодовВалютаОтчета
	|	ПО
	|		ТаблицаПериодовВалютаОтчета.ПериодКурсаПересчет = ТаблицаПериодов.ПериодКурсаПересчет
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютОтчета
	|		ПО
	|			КурсыВалютОтчета.Период = ТаблицаПериодовВалютаОтчета.ДатаКурса
	|			И КурсыВалютОтчета.Валюта = &ВалютаОтчета
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВалют.ВалютаСтроки КАК ВалютаСтроки,
	|	ТаблицаВалют.ВалютаСуммы КАК ВалютаСуммы,
	|	ТаблицаВалют.ПериодКурсаПересчет КАК ПериодКурсаПересчет
	|ПОМЕСТИТЬ ТаблицаПериодовСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Валюта КАК ВалютаСтроки,
	|		Таблица.ФункциональнаяВалюта КАК ВалютаСуммы,
	|		Таблица.ПериодКурса КАК ПериодКурсаПересчет
	|	ИЗ
	|		Таблица
	|	ГДЕ
	|		Таблица.ВалютаХранения <> Таблица.Валюта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Валюта КАК ВалютаСтроки,
	|		Таблица.ВалютаХранения КАК ВалютаСуммы,
	|		Таблица.ПериодКурса КАК ПериодКурсаПересчет
	|	ИЗ
	|		Таблица
	|	ГДЕ
	|		Таблица.ВалютаХранения <> Таблица.Валюта
	|		И Таблица.ВалютаХранения <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	) КАК ТаблицаВалют
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПериодовСтроки.ВалютаСтроки,
	|	ТаблицаПериодовСтроки.ВалютаСуммы,
	|	ТаблицаПериодовСтроки.ПериодКурсаПересчет,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ТаблицаПериодовВалютаСуммыСтроки
	|ИЗ
	|	ТаблицаПериодовСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|	ПО
	|		КурсыВалют.Период <= ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|		И КурсыВалют.Валюта = ТаблицаПериодовСтроки.ВалютаСуммы
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодовСтроки.ВалютаСтроки,
	|	ТаблицаПериодовСтроки.ВалютаСуммы,
	|	ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПериодовСтроки.ВалютаСтроки,
	|	ТаблицаПериодовСтроки.ПериодКурсаПересчет,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ТаблицаПериодовВалютаСтроки
	|ИЗ
	|	ТаблицаПериодовСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|	ПО
	|		КурсыВалют.Период <= ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|		И КурсыВалют.Валюта = ТаблицаПериодовСтроки.ВалютаСтроки
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодовСтроки.ВалютаСтроки,
	|	ТаблицаПериодовСтроки.ВалютаСуммы,
	|	ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПериодовСтроки.ВалютаСтроки,
	|	ТаблицаПериодовСтроки.ВалютаСуммы,
	|	ТаблицаПериодовСтроки.ПериодКурсаПересчет,
	|	ВЫБОР
	|		КОГДА КурсыВалютХранения.КурсЗнаменатель <> 0 И КурсыВалют.КурсЧислитель <> 0 ТОГДА
	|			КурсыВалютХранения.КурсЧислитель * КурсыВалют.КурсЗнаменатель / (КурсыВалютХранения.КурсЗнаменатель * КурсыВалют.КурсЧислитель)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаВВалютуСтроки
	|ИЗ
	|	ТаблицаПериодовСтроки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПериодовВалютаСуммыСтроки
	|	ПО
	|		ТаблицаПериодовВалютаСуммыСтроки.ПериодКурсаПересчет = ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|		И ТаблицаПериодовВалютаСуммыСтроки.ВалютаСуммы = ТаблицаПериодовСтроки.ВалютаСуммы
	|		И ТаблицаПериодовВалютаСуммыСтроки.ВалютаСтроки = ТаблицаПериодовСтроки.ВалютаСтроки
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютХранения
	|		ПО
	|			КурсыВалютХранения.Период = ТаблицаПериодовВалютаСуммыСтроки.ДатаКурса
	|			И КурсыВалютХранения.Валюта = ТаблицаПериодовВалютаСуммыСтроки.ВалютаСуммы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПериодовВалютаСтроки
	|	ПО
	|		ТаблицаПериодовВалютаСтроки.ПериодКурсаПересчет = ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|		И ТаблицаПериодовВалютаСтроки.ВалютаСтроки = ТаблицаПериодовСтроки.ВалютаСтроки
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО
	|			КурсыВалют.Период = ТаблицаПериодовВалютаСтроки.ДатаКурса
	|			И КурсыВалют.Валюта = ТаблицаПериодовВалютаСтроки.ВалютаСтроки
	|;
	|
	|ВЫБРАТЬ 
	|	&ПоляПересчета,
	|	&ПоляВВалюте,
	|	&ПоляТаблицы,
	|	ВЫБОР КОГДА Таблица.ВалютаХранения = НЕОПРЕДЕЛЕНО ИЛИ Таблица.ВалютаХранения = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		Таблица.ФункциональнаяВалюта
	|	ИНАЧЕ
	|		Таблица.ВалютаХранения
	|	КОНЕЦ КАК ВалютаХранения
	|ИЗ
	|	Таблица
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КоэффициентыПересчетаВВалютуОтчета КАК КоэффициентыПересчетаИзФункциональнойВалюты
	|	ПО
	|		КоэффициентыПересчетаИзФункциональнойВалюты.ВалютаСуммы = Таблица.ФункциональнаяВалюта
	|		И КоэффициентыПересчетаИзФункциональнойВалюты.ПериодКурсаПересчет = Таблица.ПериодКурса
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КоэффициентыПересчетаВВалютуОтчета КАК КоэффициентыПересчетаИзВалютыХранения
	|	ПО
	|		КоэффициентыПересчетаИзВалютыХранения.ВалютаСуммы = Таблица.ВалютаХранения
	|		И КоэффициентыПересчетаИзВалютыХранения.ПериодКурсаПересчет = Таблица.ПериодКурса
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КоэффициентыПересчетаВВалютуСтроки КАК КоэффициентыПересчетаИзФункциональнойВалютыСтроки
	|	ПО
	|		КоэффициентыПересчетаИзФункциональнойВалютыСтроки.ВалютаСтроки = Таблица.Валюта
	|		И КоэффициентыПересчетаИзФункциональнойВалютыСтроки.ВалютаСуммы = Таблица.ФункциональнаяВалюта
	|		И КоэффициентыПересчетаИзФункциональнойВалютыСтроки.ПериодКурсаПересчет = Таблица.ПериодКурса
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КоэффициентыПересчетаВВалютуСтроки КАК КоэффициентыПересчетаИзВалютыХраненияСтроки
	|	ПО
	|		КоэффициентыПересчетаИзВалютыХраненияСтроки.ВалютаСтроки = Таблица.Валюта
	|		И КоэффициентыПересчетаИзВалютыХраненияСтроки.ВалютаСуммы = Таблица.ВалютаХранения
	|		И КоэффициентыПересчетаИзВалютыХраненияСтроки.ПериодКурсаПересчет = Таблица.ПериодКурса
	|
	|";

	ШаблонПоляПересчета = "
	|	ВЫБОР
	|		КОГДА Таблица.ВалютаХранения = &ВалютаОтчета
	|			ТОГДА %1 // Таблица.СуммаВВалютеХранения
	|		КОГДА Таблица.ВалютаХранения <> &ВалютаОтчета
	|			И НЕ (%2 ЕСТЬ NULL
	|				ИЛИ Таблица.ФункциональнаяВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ %2 = 0 И %1 <> 0)
	|			ТОГДА %2 * ЕСТЬNULL(КоэффициентыПересчетаИзФункциональнойВалюты.КоэффициентПересчета, 1)
	|		КОГДА Таблица.ВалютаХранения <> &ВалютаОтчета
	|			И (%2 ЕСТЬ NULL
	|				ИЛИ Таблица.ФункциональнаяВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ %2 = 0 И %1 <> 0)
	|			ТОГДА %1 * ЕСТЬNULL(КоэффициентыПересчетаИзВалютыХранения.КоэффициентПересчета, 1)
	|		КОГДА Таблица.ВалютаХранения = НЕОПРЕДЕЛЕНО
	|			ТОГДА %1
	|	КОНЕЦ КАК %3
	|";

	ШаблонПоляПересчетаВВалюте = "
	|	ВЫБОР
	|		КОГДА Таблица.ВалютаХранения = Таблица.Валюта
	|			ТОГДА %1 // Таблица.СуммаВВалютеХранения
	|		КОГДА Таблица.ВалютаХранения <> Таблица.Валюта
	|			И НЕ (%2 ЕСТЬ NULL
	|				ИЛИ Таблица.ФункциональнаяВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ %2 = 0 И %1 <> 0)
	|			ТОГДА %2 * ЕСТЬNULL(КоэффициентыПересчетаИзФункциональнойВалютыСтроки.КоэффициентПересчета, 1)
	|		КОГДА Таблица.ВалютаХранения <> Таблица.Валюта
	|			И (%2 ЕСТЬ NULL
	|				ИЛИ Таблица.ФункциональнаяВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ %2 = 0 И %1 <> 0)
	|			ТОГДА %1 * ЕСТЬNULL(КоэффициентыПересчетаИзВалютыХраненияСтроки.КоэффициентПересчета, 1)
	|		КОГДА Таблица.ВалютаХранения = НЕОПРЕДЕЛЕНО
	|			ТОГДА %1
	|	КОНЕЦ КАК %3
	|";

	СтрокиПолейПересчета = Новый Массив;
	Для каждого Поле Из ПоляПересчета Цикл
		СтрокиПолейПересчета.Добавить(СтрШаблон(ШаблонПоляПересчета, Поле.ПолеПересчета, Поле.ПолеФункциональнойВалюты, Поле.ПолеВыходныхДанных));
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляПересчета", СтрСоединить(СтрокиПолейПересчета, ", "));

	СтрокиПолейПересчетаВВалюте = Новый Массив;
	Для каждого Поле Из ПоляПересчета Цикл
		СтрокиПолейПересчетаВВалюте.Добавить(СтрШаблон(ШаблонПоляПересчетаВВалюте, Поле.ПолеПересчета, Поле.ПолеФункциональнойВалюты, Поле.ПолеВыходныхДанныхВВалюте));
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВВалюте", СтрСоединить(СтрокиПолейПересчетаВВалюте, ", "));

	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("ВалютаОтчета", ВалютаОтчета);
	Запрос.УстановитьПараметр("ФункциональнаяВалюта", ФункциональнаяВалюта);

	ПоляТаблицы = Новый Массив;
	НетипизированныеПоля = Новый Массив;
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
		Если ЗначениеЗаполнено(Колонка.ТипЗначения) Тогда
			ПоляТаблицы.Добавить(Колонка.Имя);
		Иначе
			НетипизированныеПоля.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;

	ИндексПоляСумма = ПоляТаблицы.Найти("Сумма");
	Если ИндексПоляСумма <> Неопределено Тогда
		ПоляТаблицы.Удалить(ИндексПоляСумма);
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы", СтрСоединить(ПоляТаблицы, ","));

	Если ПоляТаблицы.Найти("Организация") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаРегл", "Организация.ВалютаРегламентированногоУчета");
	Иначе
		Запрос.УстановитьПараметр("ВалютаРегл", ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	КонецЕсли;

	Пакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	#Вставка 
	Если ТаблицаДанных.Количество() > 0  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаОтбораТаблицыДанных(ТаблицаДанных);
		Запрос.УстановитьПараметр("Таблица",ТаблицаДанных);
		Результат = Запрос.Выполнить().Выгрузить();  
	 	ТаблицаДанных = Результат;
	КонецЕсли;
	#КонецВставки
	Для каждого Поле Из НетипизированныеПоля Цикл
		ТаблицаДанных.Колонки.Добавить(Поле);
	КонецЦикла;

КонецПроцедуры 

Функция ТекстЗапросаОтбораТаблицыДанных(ТаблицаДанных)
	
	МаксимальнаяДлинаИдентификатора = 0; 
	Если ТаблицаДанных.Колонки.Найти("ИД_Источника") <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			МаксимальнаяДлинаИдентификатора = Макс(СтрДлина(СтрокаТаблицы.ИД_Источника),МаксимальнаяДлинаИдентификатора);		
		КонецЦикла;
	КонецЕсли;
	
	СтрЗапрос = "ВЫБРАТЬ";
	СтрЗавершение = 		
	"ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ *
	|ИЗ
	|	ВТ КАК ВТ";
	
	Для Каждого Поле Из ТаблицаДанных.Колонки Цикл 
		
		Если Поле.ТипЗначения.СодержитТип(Тип("Строка")) И Поле.ТипЗначения.КвалификаторыСтроки.Длина = 0 Тогда  
			Если Поле.Имя = "ИД_Источника" Тогда 
				Шаблон = "ВЫРАЗИТЬ(Таблица.%1 КАК СТРОКА(" + МаксимальнаяДлинаИдентификатора + ")) КАК %2,";	
			Иначе
				Шаблон = "ВЫРАЗИТЬ(Таблица.%1 КАК СТРОКА(1024)) КАК %2,";
			КонецЕсли;
		Иначе
			Шаблон = "Таблица.%1 КАК %2,";
		КонецЕсли;
		СтрЗапрос = СтрШаблон(СтрЗапрос + Символы.ПС + Шаблон, Поле.Имя, Поле.Имя); 
		
		Если ТаблицаДанных.Колонки.Индекс(Поле) =  ТаблицаДанных.Колонки.Количество()-1 Тогда 
			СтрЗапрос = СтрЗаменить(СтрЗапрос,Поле.Имя + ",",Поле.Имя + Символы.ПС + СтрЗавершение);  	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрЗапрос;
	
КонецФункции	

