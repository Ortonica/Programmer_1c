
&ИзменениеИКонтроль("ФормаПриИзмененииРеквизитов")
Функция РСК_ФормаПриИзмененииРеквизитов(Форма, ИзмененныеРеквизиты, ЭтоИзмененияМеханизма)
	
	Если ТипЗнч(ИзмененныеРеквизиты) = Тип("Массив") Тогда
		МассивРеквизитов = ИзмененныеРеквизиты;
	ИначеЕсли ТипЗнч(ИзмененныеРеквизиты) = Тип("Структура") Тогда
		МассивРеквизитов = Новый Массив;
		Для Каждого Элемент Из ИзмененныеРеквизиты Цикл
			МассивРеквизитов.Добавить(Элемент.Ключ);
		КонецЦикла;
	Иначе //строка
		МассивРеквизитов = Новый Массив;
		Реквизиты = СтрРазделить(ИзмененныеРеквизиты, ",");
		Для Каждого Реквизит Из Реквизиты Цикл
			МассивРеквизитов.Добавить(СокрЛП(Реквизит));
		КонецЦикла;
	КонецЕсли;
	
	СтарыеЗначенияИзмененныхРеквизитов = Новый Структура;
	ЕстьИзмененияВалют = Ложь;
	ИзмененКурсВалюты = Ложь;
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	
	//Возвращает какие из измененных реквизитов используются в структурах параметров.
	Результаты = МассивСтруктурПараметровПоРеквизитам(ДополненныеПараметрыМеханизма.МассивПараметров, МассивРеквизитов);
	
	Для Каждого Результат Из Результаты Цикл
		
		СтруктураПараметров = Результат.СтруктураПараметров;
		МассивИспользуемыхРеквизитов = Результат.ИспользуемыеРеквизиты;
		
		ОбновитьТекстГиперссылкиОграничениеЗадолженности = Ложь;
		ОбновитьТекстГиперссылкиСостояниеРасчетов = Ложь;
		ОбновитьТекстГиперссылкиЭтапыОплаты = Ложь;
		УстановитьВидимостьЗачетОплаты = Ложь;
		УстановитьВидимостьГФУНД = Ложь;
		ИзменилсяГрафикИсполнения = Ложь;
		
		//График исполнения договора
		Если МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено Тогда
			
			ОбновитьТекстГиперссылкиОграничениеЗадолженности = Истина;
			
			Договор = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма.Объект, СтруктураПараметров.Договор);
			Если ЗначениеЗаполнено(Договор) Тогда
				Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					УстановитьПривилегированныйРежим(Истина);
					РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЗаданГрафикИсполнения, ГрафикИсполненияДоговора, ВариантКурсаДоговора");
					УстановитьПривилегированныйРежим(Ложь);
					ЗаданГрафикИсполнения = РеквизитыДоговора.ЗаданГрафикИсполнения;
					СтруктураПараметров.ГрафикИсполненияДоговора = РеквизитыДоговора.ГрафикИсполненияДоговора;
					СтруктураПараметров.ВариантКурсаДоговора = РеквизитыДоговора.ВариантКурсаДоговора;
				Иначе
					ЗаданГрафикИсполнения = Ложь;
					СтруктураПараметров.ГрафикИсполненияДоговора = Ложь;
					УстановитьПривилегированныйРежим(Истина);
					СтруктураПараметров.ВариантКурсаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВариантКурсаДоговора");
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			Иначе
				ЗаданГрафикИсполнения = Ложь;
				СтруктураПараметров.ГрафикИсполненияДоговора = Ложь;
				СтруктураПараметров.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.Переменный;
			КонецЕсли;
			
			Если СтруктураПараметров.ЗаданГрафикИсполнения <> ЗаданГрафикИсполнения Тогда
				ИзменилсяГрафикИсполнения = Истина;
			КонецЕсли;
			
			СтруктураПараметров.ЗаданГрафикИсполнения = ЗаданГрафикИсполнения;
			
		КонецЕсли;
		
		//Порядок расчетов
		Если (МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ДоговорКомиссионера") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("НакладнаяПоЗаказам") <> Неопределено)
			И ЗначениеЗаполнено(СтруктураПараметров.ПорядокРасчетов)
			И ТипЗнч(СтруктураПараметров.ПорядокРасчетов) = Тип("Строка") 
			И СтрЧислоВхождений(СтруктураПараметров.ПорядокРасчетов, ".") = 1 Тогда
			
			ПорядокРасчетовПоУмолчанию = ПорядокРасчетовПоПараметрам(Форма, СтруктураПараметров);
			ПорядокРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ПорядокРасчетов);
			
			Если ПорядокРасчетов.Данные[ПорядокРасчетов.Имя]<> ПорядокРасчетовПоУмолчанию 
				ИЛИ ИзменилсяГрафикИсполнения Тогда
				СтарыеЗначенияИзмененныхРеквизитов.Вставить(ПорядокРасчетов.Имя, ПорядокРасчетов.Данные[ПорядокРасчетов.Имя]);
				ПорядокРасчетов.Данные[ПорядокРасчетов.Имя] = ПорядокРасчетовПоУмолчанию;
				
				Если МассивИспользуемыхРеквизитов.Найти("ПорядокРасчетов") = Неопределено Тогда
					МассивИспользуемыхРеквизитов.Добавить("ПорядокРасчетов");
				КонецЕсли;
				
				ОбновитьТекстГиперссылкиСостояниеРасчетов = Истина;
				ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
				УстановитьВидимостьЗачетОплаты = Истина;
			КонецЕсли;
			
			УстановитьВидимостьГФУНД = Истина;
			
		КонецЕсли;
		
		// Курс валюты договора и дата курса валюты документа
		Если МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено Тогда
			Если СтруктураПараметров.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре Тогда
				ИзмененКурсВалюты = Истина;
			КонецЕсли;
			Если СтруктураПараметров.ВариантКурсаДоговора <> Перечисления.ВариантыКурсаДоговора.Переменный 
				И ЗначениеЗаполнено(СтруктураПараметров.ДатаКурсаВалютыДокумента) Тогда
				ДатаКурсаВалютыДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ДатаКурсаВалютыДокумента);
				Если ЗначениеЗаполнено(ДатаКурсаВалютыДокумента.Данные[ДатаКурсаВалютыДокумента.Имя]) Тогда
					ДатаКурсаВалютыДокумента.Данные[ДатаКурсаВалютыДокумента.Имя] = Дата(1, 1, 1);
					ИзмененКурсВалюты = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//ГФУ
		Если (МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("ДоговорКомиссионера") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено)
			И ЗначениеЗаполнено(СтруктураПараметров.ГруппаФинансовогоУчета) Тогда
			
			ГФУПоУмолчанию = ГФУПоУмолчанию(Форма, СтруктураПараметров, СистемныеНастройки);
			
			ГФУРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма,СтруктураПараметров.ГруппаФинансовогоУчета);
			Если ГФУРеквизит <> Неопределено И НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ГФУРеквизит.Данные)) Тогда
				ГФУРеквизит.Данные[ГФУРеквизит.Имя] = ГФУПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("НакладнаяПоЗаказам") <> Неопределено Тогда
			УстановитьВидимостьЗачетОплаты = Истина;
			УстановитьВидимостьГФУНД = Истина;
			ОчиститьРасшифровкуПлатежа(Форма, СтруктураПараметров);
		КонецЕсли;
		
		//Оплата в валюте
		Если МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ДоговорКомиссионера") <> Неопределено Тогда
			
			ОплатаВВалютеПоУмолчанию = ОплатаВВалютеПоУмолчанию(Форма, СтруктураПараметров);
			ОплатаВВалюте = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ОплатаВВалюте);
			
			Если ОплатаВВалюте <> Неопределено И ОплатаВВалюте.Данные[ОплатаВВалюте.Имя]<> ОплатаВВалютеПоУмолчанию Тогда
				СтарыеЗначенияИзмененныхРеквизитов.Вставить(ОплатаВВалюте.Имя, ОплатаВВалюте.Данные);
				ОплатаВВалюте.Данные[ОплатаВВалюте.Имя] = ОплатаВВалютеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		//График оплаты
		Если МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено Или ИзменилсяГрафикИсполнения Тогда
			//Очистка графика этапов оплаты
			Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
				ОчиститьЭтапыГрафикаОплаты(Форма, СтруктураПараметров);
			ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
				Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ДатаПлатежа);
				Реквизит.Данные[Реквизит.Имя] = Дата(1,1,1);
			КонецЕсли;
			ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
		ИначеЕсли МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено И ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
			Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ДатаПлатежа);
			Реквизит.Данные[Реквизит.Имя] = Дата(1,1,1);
			ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты)
			И (МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("ДатаОтгрузки") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("ДатаСогласования") <> Неопределено) Тогда
			
			ЭтапыГрафика = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
			
			Если СтруктураПараметров.ЭтоЗаказ Тогда
				Если МассивИспользуемыхРеквизитов.Найти("ДатаОтгрузки") <> Неопределено Тогда
					ЕстьЭтапыОтДатыОтгрузки = Ложь;
					Для Каждого СтрокаЭтапа Из ЭтапыГрафика Цикл;
						Если СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки
							ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки
							#Вставка
							//++ РС Консалт: Трофимов Евгений 15.03.2023 Задача 23985
							//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
							ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОкончанияПроизводства
							ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОкончанияПроизводства
							ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыПрибытияВПорт
							//-- КонецЗадачи 23985
							#КонецВставки
							ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности Тогда
							ЕстьЭтапыОтДатыОтгрузки = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьЭтапыОтДатыОтгрузки Тогда
						ЭтапыГрафика.Очистить();
						#Вставка
						//++ РС Консалт: Трофимов Евгений 05.04.2023 Тикет 24979
						//e1cib/data/Документ.Задание?ref=bfce16fc2321e5a741be6a1dbeb43ccc
						//Костина Галина: А можно сделать так, что бы они не слетали, а пересчитывались при внесении изменений в даты отгрузки/ETA?
						ПересчётЭтаповОплат(Форма, ЭтапыГрафика);
						//-- КонецТикета 24979						
						#КонецВставки
					КонецЕсли;
				Иначе
					Соглашение = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Соглашение);
					Если ЗначениеЗаполнено(Соглашение) Тогда
						Календарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "Календарь");
					Иначе
						Календарь = Справочники.ПроизводственныеКалендари.ПустаяСсылка();
					КонецЕсли; 
					
					ДатаСогласования = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаСогласования);
					ДатаЗаказа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
					
					Для Каждого СтрокаЭтапа Из ЭтапыГрафика Цикл
						Если СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования 
								И МассивИспользуемыхРеквизитов.Найти("ДатаСогласования") <> Неопределено
							#Удаление
							ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа 
							#КонецУдаления
							#Вставка
							//++ РС Консалт: Трофимов Евгений 07.03.2023 Задача 23985
							//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
							ИЛИ (СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа 
							ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыРазмещения)
							//-- КонецЗадачи 23985
							#КонецВставки
								И МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено Тогда
							ПараметрыРасчетаДатыПлатежа = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
							ПараметрыРасчетаДатыПлатежа.ВариантОтсчета                 = СтрокаЭтапа.ВариантОтсчета;
							ПараметрыРасчетаДатыПлатежа.Сдвиг                          = СтрокаЭтапа.Сдвиг;
							ПараметрыРасчетаДатыПлатежа.ДатаЗаказа                     = ДатаЗаказа;
							ПараметрыРасчетаДатыПлатежа.ДатаСогласования               = ДатаСогласования;
							ПараметрыРасчетаДатыПлатежа.ДатаОтгрузки                   = Дата(1,1,1);
							ПараметрыРасчетаДатыПлатежа.ДатаПереходаПраваСобственности = Дата(1,1,1);
							ПараметрыРасчетаДатыПлатежа.СрокПереходаПраваСобственности = 0;
							ПараметрыРасчетаДатыПлатежа.Календарь                      = Календарь;
							#Вставка
							//++ РС Консалт: Трофимов Евгений 07.03.2023 Задача 23985
							//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
							Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "ДатаПоДаннымПоставщика") Тогда
								ПараметрыРасчетаДатыПлатежа.ДатаРазмещения = Форма.Объект.ДатаПоДаннымПоставщика;
							КонецЕсли;
							//-- КонецЗадачи 23985
							#КонецВставки
							ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
							Если ЗначениеЗаполнено(Календарь)  Тогда
								СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(ПараметрыРасчетаДатыПлатежа);
							Иначе
								СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(ПараметрыРасчетаДатыПлатежа);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ЭтоПродажаЗакупка Тогда
				Соглашение = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Соглашение);
				Если ЗначениеЗаполнено(Соглашение) Тогда
					Календарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "Календарь");
				Иначе
					Календарь = Справочники.ПроизводственныеКалендари.ПустаяСсылка();
				КонецЕсли; 
				
				ДатаСогласования = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаСогласования);
				ДатаЗаказа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
				
				Для Каждого СтрокаЭтапа Из ЭтапыГрафика Цикл
					Если (СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки 
						ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки) 
							И МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено Тогда
						ПараметрыРасчетаДатыПлатежа = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
						ПараметрыРасчетаДатыПлатежа.ВариантОтсчета                 = СтрокаЭтапа.ВариантОтсчета;
						ПараметрыРасчетаДатыПлатежа.Сдвиг                          = СтрокаЭтапа.Сдвиг;
						ПараметрыРасчетаДатыПлатежа.ДатаЗаказа                     = ДатаЗаказа;
						ПараметрыРасчетаДатыПлатежа.ДатаСогласования               = ДатаСогласования;
						ПараметрыРасчетаДатыПлатежа.ДатаОтгрузки                   = Дата(1,1,1);
						ПараметрыРасчетаДатыПлатежа.ДатаПереходаПраваСобственности = Дата(1,1,1);
						ПараметрыРасчетаДатыПлатежа.СрокПереходаПраваСобственности = 0;
						ПараметрыРасчетаДатыПлатежа.Календарь                      = Календарь;
						ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
						Если ЗначениеЗаполнено(Календарь)  Тогда
							СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(ПараметрыРасчетаДатыПлатежа);
						Иначе
							СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(ПараметрыРасчетаДатыПлатежа);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
				
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("Организация") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Партнер") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Контрагент") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("НаправлениеДеятельности") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено И НЕ СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент Тогда
			
			ОчиститьОбъектИСуммуРасшифровкиПлатежа(Форма, СтруктураПараметров);
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("Организация") <> Неопределено Тогда
			
			Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма.Объект, СтруктураПараметров.Организация);
			ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ВалютаДокумента) И Не ЗначениеЗаполнено(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма.Объект, СтруктураПараметров.ВалютаДокумента)) Тогда
				Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ВалютаДокумента);
				Реквизит.Данные[Реквизит.Имя] = ВалютаРегламентированногоУчета;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов)
				И Не СтруктураПараметров.ВалютаВзаиморасчетовВСтроках
				И Не ЗначениеЗаполнено(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма.Объект, СтруктураПараметров.ВалютаВзаиморасчетов)) Тогда
				Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ВалютаВзаиморасчетов);
				Реквизит.Данные[Реквизит.Имя] = ВалютаРегламентированногоУчета;
			КонецЕсли;
			
			ЕстьИзмененияВалют = Истина;
				
		КонецЕсли;
		
		Если (МассивИспользуемыхРеквизитов.Найти("Организация") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Контрагент") <> Неопределено)
			И СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент
			И ЗначениеЗаполнено(СтруктураПараметров.Договор) Тогда
			
			Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.Договор);
			Реквизит.Данные[Реквизит.Имя] = Неопределено;
			
			Если МассивИспользуемыхРеквизитов.Найти("Договор") = Неопределено Тогда
				МассивИспользуемыхРеквизитов.Добавить("Договор");
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаДокумента") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаВзаиморасчетов") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ДатаКурсаВалютыДокумента") <> Неопределено Тогда
			
			МассивОчищаемыхПолейЭтапов = Новый Массив;
			Если МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаДокумента") <> Неопределено Тогда
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаПлатежа");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаЗалогаЗаТару");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетов");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетовПоТаре");
			ИначеЕсли МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено 
				ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаВзаиморасчетов") <> Неопределено Тогда
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетов");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетовПоТаре");
			КонецЕсли;
			
			ОчиститьПоляЭтаповГрафикаОплаты(Форма, СтруктураПараметров, МассивОчищаемыхПолейЭтапов);
			ОчиститьСуммыВзаиморасчетовТЧ(Форма, СтруктураПараметров);
			
			Если НЕ ЭтоИзмененияМеханизма И ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетов) Тогда
				Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.СуммаВзаиморасчетов);
				Реквизит.Данные[Реквизит.Имя] = 0;
			КонецЕсли;
			
			ПроверитьЗаполнитьСуммыВзаиморасчетовВТабличнойЧасти(Форма, СтруктураПараметров);
			ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма,СтруктураПараметров);
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ДатаПлатежа") <> Неопределено Тогда
			ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено Тогда
			ЕстьИзмененияВалют = Истина;
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ПорядокРасчетов") <> Неопределено 
			ИЛИ ЕстьИзмененияВалют Тогда
			Если МассивИспользуемыхРеквизитов.Найти("ПорядокРасчетов") <> Неопределено Тогда
				// Необходимо очистить объекты расчетов для корректного определения состояния расчетов
				ОчиститьОбъектРасчетов(Форма, СтруктураПараметров);
			КонецЕсли;
			ОчиститьРасшифровкуПлатежа(Форма, СтруктураПараметров);
			УстановитьВидимостьЗачетОплаты = Истина;
			ОбновитьТекстГиперссылкиСостояниеРасчетов = Истина;
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("КурсЧислитель") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("КурсЗнаменатель") <> Неопределено Тогда
			ИзмененКурсВалюты = Истина;
		КонецЕсли;
		
		Если ОбновитьТекстГиперссылкиОграничениеЗадолженности Тогда
			ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
		КонецЕсли;
		
		Если ОбновитьТекстГиперссылкиСостояниеРасчетов Тогда
			ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
		КонецЕсли;
		
		Если ОбновитьТекстГиперссылкиЭтапыОплаты Тогда
			ОбновитьТекстГиперссылкиЭтапыОплаты(Форма, СтруктураПараметров, СистемныеНастройки);
		КонецЕсли;
		
		Если УстановитьВидимостьЗачетОплаты Тогда
			УстановитьВидимостьЗачетОплаты(Форма, СтруктураПараметров);
		КонецЕсли;
		
		Если УстановитьВидимостьГФУНД Тогда
			УстановитьВидимостьГФУНД(Форма, СтруктураПараметров);
		КонецЕсли;
		
		//При изменении порядка расчетов проверить видимость ЗачетОплаты
		//При изменении суммы документа на форме, переформировывать надпись валюты, все гиперссылки
		//При изменении даты, даты банка, проведено банком, очистить суммы взаиморасчетов расшифровки
	КонецЦикла;
	
	Если НЕ ЭтоИзмененияМеханизма И ЕстьИзмененияВалют И ЗначениеЗаполнено(СтруктураПараметров.КурсЧислитель) Тогда
		СтарыеЗначенияИзмененныхРеквизитов.Вставить("КурсЧислитель", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, "Объект.КурсЧислитель"));    
		СтарыеЗначенияИзмененныхРеквизитов.Вставить("КурсЗнаменатель", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, "Объект.КурсЗнаменатель"));
		ЗаполнитьКурсКратностьПоУмолчанию(Форма, ДополненныеПараметрыМеханизма);
		ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма,СтруктураПараметров);
	ИначеЕсли ИзмененКурсВалюты Тогда
		ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма,СтруктураПараметров);
	КонецЕсли;
	
	Возврат СтарыеЗначенияИзмененныхРеквизитов;
	
КонецФункции

//++ РС Консалт: Трофимов Евгений 05.04.2023 Тикет 24979
//e1cib/data/Документ.Задание?ref=bfce16fc2321e5a741be6a1dbeb43ccc
Процедура ПересчётЭтаповОплат(Форма, ЭтапыГрафика)

	Если НЕ Форма.ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаДокумента" Тогда
		Возврат;
	КонецЕсли;
	оДок = Форма.Объект;
	Если НЕ ЗначениеЗаполнено(оДок.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	ТаблицаСумм = ТаблицаСуммПоЗаказам(Форма);
	СтруктураСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		оДок.Соглашение,
		"ПорядокРасчетов,СрокПереходаПраваСобственности"
	);
	
	ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты();
	ПараметрыЗаполнения.Соглашение = оДок.Соглашение;
	ПараметрыЗаполнения.ГрафикСоглашенияЗаполнен = ГрафикСоглашенияЗаполнен(ПараметрыЗаполнения.Соглашение);
	ПараметрыЗаполнения.ДатаЗаказа = оДок.Дата;
	ПараметрыЗаполнения.ДатаОтгрузки = ТаблицаСумм;
	ПараметрыЗаполнения.ДатаРазмещения = оДок.ДатаПоДаннымПоставщика;
	ПараметрыЗаполнения.ДатаСогласования = оДок.ДатаСогласования;
	ПараметрыЗаполнения.ЕстьДатаПереходаПраваСобственности = Ложь;
	ПараметрыЗаполнения.НакладнаяПоЗаказам = Ложь;
	ПараметрыЗаполнения.НетКонтроляПредоплаты = Ложь;
	ПараметрыЗаполнения.ПорядокРасчетов = СтруктураСоглашения.ПорядокРасчетов;
	ПараметрыЗаполнения.СрокПереходаПраваСобственности = СтруктураСоглашения.СрокПереходаПраваСобственности;
	ПараметрыЗаполнения.СуммаВзаиморасчетов = ТаблицаСумм.Итог("СуммаВзаиморасчетов");
	ПараметрыЗаполнения.СуммаВзаиморасчетовПоТаре = ТаблицаСумм.Итог("СуммаВзаиморасчетовПоТаре");
	ПараметрыЗаполнения.СуммаЗалогаЗаТару = 0;
	ПараметрыЗаполнения.СуммаОплаты = оДок.СуммаДокумента;
	ПараметрыЗаполнения.ЭтоЗаказ = Истина;
	ПараметрыЗаполнения.ЭтоРасчетыСКлиентами = Ложь;
	
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплаты(ЭтапыГрафика, ПараметрыЗаполнения);
	

КонецПроцедуры

//++ РС Консалт: Трофимов Евгений 05.04.2023 Тикет 24979
//e1cib/data/Документ.Задание?ref=bfce16fc2321e5a741be6a1dbeb43ccc
Функция ГрафикСоглашенияЗаполнен(Соглашение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК СоглашенияСПоставщикамиЭтапыГрафикаОплаты
		|ГДЕ
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка = &Соглашение";
	
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции // ГрафикСоглашенияЗаполнен()

&ИзменениеИКонтроль("ПроверитьЗаполнитьЭтапыГрафикаОплаты")
Процедура РСК_ПроверитьЗаполнитьЭтапыГрафикаОплаты(Объект, Знач ДополненныеПараметрыМеханизма)

	Если ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") И ДополненныеПараметрыМеханизма = Неопределено Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(Объект);
		ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Объект, "Взаиморасчеты");
	КонецЕсли;

	СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;

	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл

		Если Не ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) И Не ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
			Продолжить;
		КонецЕсли;

		СуммыДокумента = СуммыДокумента(Объект, СтруктураПараметров);

		ИзменяетПланОплаты            = СтруктураПараметров.ИзменяетПланОплаты ИЛИ СтруктураПараметров.ЗаказКакСчет;
		ЗаданГрафикИсполнения         = СтруктураПараметров.ЗаданГрафикИсполнения;
		ГрафикИсполненияДоговора      = СтруктураПараметров.ГрафикИсполненияДоговора;
		ЭтоПродажаЗакупка             = СтруктураПараметров.ЭтоПродажаЗакупка;
		ЭтоЗаказ                      = СтруктураПараметров.ЭтоЗаказ;

		ПорядокРасчетов           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
		Соглашение                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение);
		Если СистемныеНастройки.ИспользоватьГрафикиОплаты Тогда
			ГрафикОплаты          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ГрафикОплаты);
		Иначе
			ГрафикОплаты          = Справочники.ГрафикиОплаты.ПустаяСсылка();
		КонецЕсли;
		НакладнаяПоЗаказам        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НакладнаяПоЗаказам, , Ложь);

		ДатаДокумента             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		ДатаОтгрузки              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаОтгрузки);
		ДатаСогласования          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаСогласования);
		Если ЭтоЗаказ Тогда
			ДатаЗаказа            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		КонецЕсли;
		ДатаПереходаПраваСобственности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаПереходаПраваСобственности);

		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДатаСеанса();
		КонецЕсли;

		ГрафикСоглашенияЗаполнен = ЭтапыОплатыВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение);

		//Одна дата платежа
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда

			ДатаПлатежаПоУмолчанию = Дата(1,1,1);

			Если ЗаданГрафикИсполнения И НЕ СтруктураПараметров.ЭтоЗаказ Тогда
				ДатаПлатежаПоУмолчанию = ЭтапыОплатыСервер.ДатаПервогоНеоплаченногоЭтапаГрафика(ГрафикИсполненияДоговора, ДатаДокумента, СтруктураПараметров.ТипРасчетов);
			ИначеЕсли (ГрафикСоглашенияЗаполнен ИЛИ ЗначениеЗаполнено(ГрафикОплаты)) И НЕ СтруктураПараметров.ЭтоЗаказ Тогда
				ДатаПлатежаПоУмолчанию = ЭтапыОплатыСервер.ПолучитьПоследнююДатуПоГрафику(
				ДатаОтгрузки,Соглашение,ГрафикОплаты,ДатаЗаказа,ДатаСогласования,ДатаПереходаПраваСобственности);
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ДатаПлатежаПоУмолчанию) Тогда
				ДатаПлатежаПоУмолчанию = ДатаДокумента;
			КонецЕсли;

			Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ДатаПлатежа);

			Если НЕ ЗначениеЗаполнено(Реквизит.Данные[Реквизит.Имя]) Тогда
				Реквизит.Данные[Реквизит.Имя] = ДатаПлатежаПоУмолчанию;
			КонецЕсли;

			Возврат;
		КонецЕсли;

		//График оплаты
		ЭтапыОплатыРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		ЭтапыГрафикаОплаты = ЭтапыОплатыРеквизит.Данные[ЭтапыОплатыРеквизит.Имя];

		//Отклонения мерных товаров
		ЕстьОтклоненияМерныхТоваров = Ложь;
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЕстьОтклоненияМерныхТоваров = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0],"СуммаОтклоненияМерныхТоваров");
		КонецЕсли;

		Если ИзменяетПланОплаты
			И НЕ (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") И ЭтоЗаказ И НЕ ЭтоПродажаЗакупка)
			И НЕ (ЗаданГрафикИсполнения И ЭтоЗаказ
			И (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов")
			ИЛИ ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"))) Тогда

			СуммаЭтаповОплаты       = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
			Если ЭтапыГрафикаОплаты.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0], "СуммаЗалогаЗаТару") Тогда
				СуммаЗалогаПоЭтапам     = ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
			Иначе
				СуммаЗалогаПоЭтапам = 0;
			КонецЕсли;

			Если ЭтоПродажаЗакупка 
				И ЭтапыГрафикаОплаты.Количество() > 0 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0], "СуммаВзаиморасчетов")Тогда
				СуммаВзаиморасчетовЭтапы = ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетов");
			Иначе
				СуммаВзаиморасчетовЭтапы = 0;
			КонецЕсли;

			Если ЭтоПродажаЗакупка И ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетовПоТаре) Тогда
				СуммаВзаиморасчетовПоТареЭтапы = ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетовПоТаре");
			Иначе
				СуммаВзаиморасчетовПоТареЭтапы = 0;
			КонецЕсли;

			Если ЕстьОтклоненияМерныхТоваров Тогда
				СуммаОтклоненияПоЭтапам = ЭтапыГрафикаОплаты.Итог("СуммаОтклоненияМерныхТоваров");
			Иначе
				СуммаОтклоненияПоЭтапам = 0;
			КонецЕсли;

			СуммаОтклоненияПоОплате = ?(СуммаЭтаповОплаты+СуммаЗалогаПоЭтапам = 0,0,
			Окр(СуммаОтклоненияПоЭтапам * СуммаЭтаповОплаты /(СуммаЭтаповОплаты+СуммаЗалогаПоЭтапам),2));

			КоличествоЭтапов = ЭтапыГрафикаОплаты.Количество();

			Если СуммыДокумента.СуммаДокументаБезЗалога = 0 И СуммыДокумента.СуммаЗалогаЗаТару = 0 И КоличествоЭтапов > 0 Тогда
				ЭтапыГрафикаОплаты.Очистить();
			ИначеЕсли СуммыДокумента.СуммаДокументаБезЗалога - СуммаОтклоненияПоОплате <> СуммаЭтаповОплаты
				ИЛИ СуммыДокумента.СуммаЗалогаЗаТару-(СуммаОтклоненияПоЭтапам - СуммаОтклоненияПоОплате) <> СуммаЗалогаПоЭтапам 
				ИЛИ СуммыДокумента.СуммаВзаиморасчетовБезЗалога <> СуммаВзаиморасчетовЭтапы 
				ИЛИ СуммыДокумента.СуммаВзаиморасчетовПоТаре <> СуммаВзаиморасчетовПоТареЭтапы Тогда

				//Заполнение
				Если КоличествоЭтапов = 0 Тогда

					//Накладная по заказам
					Если НЕ ЭтоЗаказ 
						И НакладнаяПоЗаказам И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
						И НЕ (ЗаданГрафикИсполнения И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
						ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным)) Тогда

						ЗаполнитьЭтапыОплатыДокументаПоЗаказам(Объект, СтруктураПараметров);

						//Заказ или накладная не по заказам
					Иначе

						ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты();
						ПараметрыЗаполнения.ЭтоРасчетыСКлиентами   = СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
						ПараметрыЗаполнения.НакладнаяПоЗаказам     = НакладнаяПоЗаказам;
						ПараметрыЗаполнения.ЭтоЗаказ               = СтруктураПараметров.ЭтоЗаказ;
						ПараметрыЗаполнения.НетКонтроляПредоплаты  = СтруктураПараметров.НетКонтроляПредоплаты;
						ПараметрыЗаполнения.ПорядокРасчетов        = ПорядокРасчетов;
						ПараметрыЗаполнения.ДатаЗаказа             = ДатаЗаказа;
						ПараметрыЗаполнения.ДатаСогласования       = ДатаСогласования;
						Если СтрЧислоВхождений(СтруктураПараметров.ДатаОтгрузки, ".") > 1 Тогда
							ТаблицаТовары = ТаблицаСуммПоЗаказам(Объект);
							ПараметрыЗаполнения.ДатаОтгрузки = ТаблицаТовары;
						Иначе
							ПараметрыЗаполнения.ДатаОтгрузки = ДатаОтгрузки;
						КонецЕсли;
						ПараметрыЗаполнения.ГрафикСоглашенияЗаполнен       = ГрафикСоглашенияЗаполнен;
						ПараметрыЗаполнения.ДатаПереходаПраваСобственности = ДатаПереходаПраваСобственности;
						ПараметрыЗаполнения.ЕстьДатаПереходаПраваСобственности = СтруктураПараметров.ЕстьДатаПереходаПраваСобственности;
						ПараметрыЗаполнения.Соглашение                     = Соглашение;
						ПараметрыЗаполнения.ГрафикИсполненияДоговора       = ГрафикИсполненияДоговора;
						ПараметрыЗаполнения.ГрафикОплаты                   = ГрафикОплаты;
						ПараметрыЗаполнения.СуммаОплаты                    = СуммыДокумента.СуммаДокументаБезЗалога;
						ПараметрыЗаполнения.СуммаЗалогаЗаТару              = СуммыДокумента.СуммаЗалогаЗаТару;
						ПараметрыЗаполнения.СуммаВзаиморасчетов            = СуммыДокумента.СуммаВзаиморасчетовБезЗалога;
						ПараметрыЗаполнения.СуммаВзаиморасчетовПоТаре      = СуммыДокумента.СуммаВзаиморасчетовПоТаре;
						#Вставка
						//++ РС Консалт: Трофимов Евгений 15.03.2023 Задача 23985
						//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыОплатыРеквизит.Данные, "ДатаПоДаннымПоставщика") Тогда
							ПараметрыЗаполнения.ДатаРазмещения = ЭтапыОплатыРеквизит.Данные.ДатаПоДаннымПоставщика;
						КонецЕсли;
						//-- КонецЗадачи 23985
						#КонецВставки

						ЭтапыОплатыСервер.ЗаполнитьЭтапыОплаты(
						ЭтапыГрафикаОплаты,
						ПараметрыЗаполнения);

					КонецЕсли;
					//Перераспределение сумм
				Иначе

					Если НакладнаяПоЗаказам 
						И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам
						ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов)
						//Заказ как счет - распределять ничего не нужно, т.к. заказ не делал движений
						И НЕ (СтруктураПараметров.ДокументРасчетовСКлиентами И НЕ Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Получить()) 
						И НЕ ЗаданГрафикИсполнения Тогда

						РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(Объект, СтруктураПараметров);

					Иначе

						ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
						ЭтапыГрафикаОплаты,
						СуммыДокумента.СуммаДокументаБезЗалога,
						СуммыДокумента.СуммаЗалогаЗаТару,
						СуммыДокумента.СуммаВзаиморасчетовБезЗалога,
						СуммыДокумента.СуммаВзаиморасчетовПоТаре);

					КонецЕсли;

				КонецЕсли;

				ЭтапыОплатыСервер.ЗаполнитьПроцентыПоСуммам(ЭтапыГрафикаОплаты);

			КонецЕсли;

			ДополненныеПараметрыМеханизма.ОповеститьОЗаполненииЭтапов = ИСТИНА;
			Если Не ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
				Объект.ДополнительныеСвойства.Вставить("ОповеститьОЗаполненииЭтапов", Истина);
			КонецЕсли;

		Иначе
			ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;

	КонецЦикла;

	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбновитьТекстГиперссылкиЭтапыОплаты(Объект);
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("СообщитьОРезультатахКонтроляИзменений")
Процедура РСК_СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ)

	#Область РасчетыСКлиентами

	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменение") Тогда

		ШаблонСообщения = НСтр("ru = 'Нарушены условия оплаты, необходимые для обеспечения/отгрузки по %1,
		|Требуется %2 %4 оплачено %3 %4';
		|en = 'Payment terms required for provision / shipment for %1 are violated.
		|Required %2%4 paid %3%4'");

		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиРасчетыСКлиентами Цикл

			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов,
			СтрокаОшибки.СуммаЗаказа, СтрокаОшибки.СуммаОплаты, СтрокаОшибки.Валюта);

			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);

		КонецЦикла;

	КонецЕсли;

	#КонецОбласти

	#Область СуммыСрокЗадолженности

	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга") Тогда

		ШаблонСообщения = НСтр("ru = 'По договору %1 превышена допустимая сумма кредита на %2 %3';
		|en = 'Available loan amount under the contract %1 is exceeded by %2%3'");

		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиОграничениеСуммыЗадолженности Цикл

			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.Договор, СтрокаОшибки.СуммаПревышения,
			СтрокаОшибки.Валюта);

			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);

		КонецЦикла;

	КонецЕсли;

	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда
		
		#Вставка 
		Если ТипЗнч(Документ) <> Тип("ДокументОбъект.ЗаказКлиента") И РезультатыКонтроля.ОшибкиКонтрольСрокаЗадолженности.Количество() > 0 Тогда
			
			УведомлениеЗадачи = ""; 
			ШаблонСообщения = НСтр("ru = 'По договору %1 имеется просроченная задолженность на сумму %2 %3';
			|en = 'There are AR/AP overdue under the contract %1 in the amount of %2%3'");
	        Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКонтрольСрокаЗадолженности Цикл
            	ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.Договор, СтрокаОшибки.ПросроченнаяЗадолженность,
				СтрокаОшибки.Валюта);

			    УведомлениеЗадачи = УведомлениеЗадачи + ТекстСообщения + Символы.ПС;  
			КонецЦикла;  
			
			РСК_Сервер.СоздатьЗадачуИнформированиеОПДЗ(Документ.Ссылка, УведомлениеЗадачи, Документ.Подразделение);
			
		Иначе
			ИгнорироватьПДЗ = Ложь; 
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("РСК_ИгнорироватьПДЗ", Документ.Метаданные()) Тогда
				ИгнорироватьПДЗ = Документ.РСК_ИгнорироватьПДЗ;
			КонецЕсли;
		#КонецВставки
		ШаблонСообщения = НСтр("ru = 'По договору %1 имеется просроченная задолженность на сумму %2 %3';
		|en = 'There are AR/AP overdue under the contract %1 in the amount of %2%3'");

		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКонтрольСрокаЗадолженности Цикл
			
			#Вставка
			Если ИгнорироватьПДЗ Тогда
				Продолжить;
			КонецЕсли;
			#КонецВставки
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.Договор, СтрокаОшибки.ПросроченнаяЗадолженность,
			СтрокаОшибки.Валюта);

			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);

			
		КонецЦикла; 
		#Вставка 
		КонецЕсли;
		#КонецВставки

	КонецЕсли;

	#КонецОбласти

	#Область АвансыПоНакладным

	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеАвансыПоНакладным") Тогда

		ШаблонСообщения = НСтр("ru = 'Превышена сумма зачета аванса %1 на %2 %3';
		|en = 'The prepayment AR/AP amount is exceeded %1 by %2%3'");

		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКонтрольЗачтенныхАвансовПоНакладнымКлиент Цикл

			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ДокументАванса, СтрокаОшибки.СуммаПревышения,
			СтрокаОшибки.Валюта);

			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);

		КонецЦикла;

	КонецЕсли;

	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным") Тогда

		ШаблонСообщения = НСтр("ru = 'Превышена сумма зачета аванса %1 на %2 %3';
		|en = 'The prepayment AR/AP amount is exceeded %1 by %2%3'");

		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКонтрольЗачтенныхАвансовПоНакладнымПоставщик Цикл

			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ДокументАванса, СтрокаОшибки.СуммаПревышения,
			СтрокаОшибки.Валюта);

			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);

		КонецЦикла;

	КонецЕсли;

	#КонецОбласти

	#Область ВводОстатков

	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "РасчетыСКлиентамиИзмененияВводОстатков") Тогда

		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЕстьВводОстатковПослеКлиенты Цикл

			ШаблонСообщения = НСтр("ru = 'Существуют документы ввода начальных остатков взаиморасчетов по объекту расчетов ""%1"", введенные позже изменяемого периода.';
			|en = 'There are documents for entering opening balance of AR/AP accounting for the ""%1"" AR/AP object that were entered later than the period to be changed.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);

		КонецЦикла;

		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЕстьДвиженияДоКлиенты Цикл

			ШаблонСообщения = НСтр("ru = 'Существуют документы введенные раньше ввода начальных остатков взаиморасчетов по объекту расчетов ""%1"".';
			|en = 'There are documents entered before entering opening balance of AR/AP accounting for the ""%1"" AR/AP object.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);

		КонецЦикла;

	КонецЕсли;

	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "РасчетыСПоставщикамиИзмененияВводОстатков") Тогда

		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЕстьВводОстатковПослеПоставщики Цикл

			ШаблонСообщения = НСтр("ru = 'Существуют документы ввода начальных остатков взаиморасчетов по объекту расчетов ""%1"", введенные позже изменяемого периода.';
			|en = 'There are documents for entering opening balance of AR/AP accounting for the ""%1"" AR/AP object that were entered later than the period to be changed.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);

		КонецЦикла;

		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЕстьДвиженияДоПоставщики Цикл

			ШаблонСообщения = НСтр("ru = 'Существуют документы введенные раньше ввода начальных остатков взаиморасчетов по объекту расчетов ""%1"".';
			|en = 'There are documents entered before entering opening balance of AR/AP accounting for the ""%1"" AR/AP object.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);

		КонецЦикла;

	КонецЕсли;

	#КонецОбласти

	#Область Оплачивается

	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеОплачивается")
		Или ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСПоставщикамиИзменениеОплачивается") Тогда

		ШаблонСообщения = НСтр("ru = 'По объекту расчетов %1 оплачивается больше, чем утверждено в заявке, на %2 %3';
		|en = 'Under AR/AP object %1 payment is greater than confirmed in the request by %2 %3'");

		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиОплачивается Цикл
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
			СтрокаОшибки.ОбъектРасчетов, СтрокаОшибки.Сумма, СтрокаОшибки.Валюта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
		КонецЦикла;
	КонецЕсли;

	#КонецОбласти

КонецПроцедуры
