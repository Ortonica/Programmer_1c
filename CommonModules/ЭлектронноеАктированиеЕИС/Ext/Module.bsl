
&ИзменениеИКонтроль("РазобратьФайлКонтракта")
Функция РСК_РазобратьФайлКонтракта(ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO, 
	ИдентификаторУчастникаДокументооборотаЗаказчика, 
	РазбиратьДанныеЗакрытогоКонтракта, 
	ИдентификаторГосударственногоКонтракта)

	Результат = НовыеДанныеКонтракта();

	Если ТипЗнч(ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		ДанныеКонтракта = ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO;
	Иначе
		Чтение = Новый ЧтениеXML;
		Если ТипЗнч(ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO) = Тип("Строка") Тогда
			Чтение.ОткрытьФайл(ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO);
		Иначе
			СтрокаДанных = ПолучитьСтрокуИзДвоичныхДанных(
			ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO, "UTF-8");
			Чтение.УстановитьСтроку(СтрокаДанных);
		КонецЕсли;
		ДанныеКонтракта = ФабрикаXDTO.ПрочитатьXML(Чтение);
	КонецЕсли;

	ИмяУзлаВерсииСхемы = "schemeVersion";
	Если ЕстьСвойство(ДанныеКонтракта, ИмяУзлаДанныхКонтракта()) Тогда 
		ДанныеКонтракта = ДанныеКонтракта[ИмяУзлаДанныхКонтракта()];
	ИначеЕсли ЕстьСвойство(ДанныеКонтракта, ИмяУзлаДанныхЗакрытогоКонтракта()) Тогда
		ДанныеКонтракта = ДанныеКонтракта[ИмяУзлаДанныхЗакрытогоКонтракта()];
		Результат.ЭтоЗакрытыйКонтракт = Истина;
		Если НЕ РазбиратьДанныеЗакрытогоКонтракта Тогда
			Возврат Результат;
		КонецЕсли;
	Иначе
		Если НЕ ЕстьСвойство(ДанныеКонтракта, ИмяУзлаВерсииСхемы) Тогда
			ОписаниеОшибки = НСтр("ru = 'Не обнаружен узел с данными государственного контракта ЕИС.';
			|en = 'Node with the UIS state contract data is not found.'");
			ВызватьИсключение(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;

	Результат.ИдентификаторУчастникаДокументооборотаЗаказчика = ИдентификаторУчастникаДокументооборотаЗаказчика;
	Результат.ВерсияСхемы = ДанныеКонтракта.schemeVersion;
	Результат.Идентификатор = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "id");
	Результат.ВнешнийИдентификатор = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "externalId");
	Результат.ДатаРазмещенияДокумента = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "publishDate", "Дата");
	Результат.Версия = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "versionNumber");
	ОснованиеЗаключения = ДанныеКонтракта.foundation;
	ИмяУзла44ФЗ = "fcsOrder";
	ИмяУзла94ФЗ = "oosOrder";
	Если ЕстьСвойство(ОснованиеЗаключения, ИмяУзла94ФЗ) Тогда
		Результат.НомерЗакона = Закон94ФЗ();
	ИначеЕсли ЕстьСвойство(ОснованиеЗаключения, ИмяУзла44ФЗ) Тогда
		Узел44ФЗ = ОснованиеЗаключения[ИмяУзла44ФЗ];
		Результат.НомерЗакона = Закон44ФЗ();
		// Извлекаем идентификационный код закупки (ИКЗ).
		ИмяУзлаЗакупка = "order";
		ИмяУзлаЗакупкаУОдногоПоставщика = "singleCustomer";
		ИмяУзлаЗакупкаНеРазмещалась = "notOosOrder";
		ИмяУзлаКодаЗакупки = "";
		Если ЕстьСвойство(Узел44ФЗ, ИмяУзлаЗакупка) Тогда
			ИмяУзлаКодаЗакупки = ИмяУзлаЗакупка;
		ИначеЕсли ЕстьСвойство(Узел44ФЗ, ИмяУзлаЗакупкаУОдногоПоставщика) Тогда
			ИмяУзлаКодаЗакупки = ИмяУзлаЗакупкаУОдногоПоставщика;
		ИначеЕсли ЕстьСвойство(Узел44ФЗ, ИмяУзлаЗакупкаНеРазмещалась) Тогда
			ИмяУзлаКодаЗакупки = ИмяУзлаЗакупкаНеРазмещалась;
		КонецЕсли;
		Если НЕ ПустаяСтрока(ИмяУзлаКодаЗакупки) Тогда
			Результат.ИдентификационныйКодЗакупки =
			ЗначениеНеобязательногоСвойства(Узел44ФЗ[ИмяУзлаКодаЗакупки], "purchaseCode");
		КонецЕсли;
	КонецЕсли;
	Результат.ДатаЗаключенияКонтракта = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "signDate", "Дата");
	Результат.НомерРеестровойЗаписи = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "regNum");
	Результат.НомерКонтракта = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "number");
	Результат.ПредметКонтракта = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "contractSubject");
	Результат.НомерКонтрактаГОЗ = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "defenseContractNumber");
	Результат.ЭтоГОЗ = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "isGOZ", "Булево", Ложь);

	// Данные аванса по контракту.
	Если ЕстьСвойство(ДанныеКонтракта, "AdvancePaymentSum") Тогда
		ДанныеАванса = ДанныеКонтракта.AdvancePaymentSum;
		Результат.РазмерАвансаВПроцентах = ЗначениеНеобязательногоСвойства(ДанныеАванса, "sumInPercents", "Число");
		Результат.РазмерАванса = ЗначениеНеобязательногоСвойства(ДанныеАванса, "priceValue", "Число");
		Результат.РазмерАвансаВРублях = ЗначениеНеобязательногоСвойства(ДанныеАванса, "priceValueRUR", "Число");
		Если ЗначениеЗаполнено(Результат.РазмерАвансаВПроцентах) Тогда
			Результат.ЕстьАвансовыеПлатежиПоКонтракту = Истина;
		КонецЕсли;
	КонецЕсли;

	// Этапы контракта.
	Результат.КоличествоЭтаповКонтракта = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "quantityContractStages");
	Результат.ДатаНачалаИсполнения = XMLЗначение(Тип("Дата"), ДанныеКонтракта.executionPeriod.startDate);
	Результат.ДатаОкончанияИсполнения = XMLЗначение(Тип("Дата"), ДанныеКонтракта.executionPeriod.endDate);
	Для каждого ДанныеЭтапа Из ЗначениеВКоллекцию(ДанныеКонтракта.executionPeriod.stages) Цикл
		Этап = НовыйЭтапИсполненияКонтракта();
		Этап.ВнутреннийИдентификаторЕИС = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "sid", "Число");
		Этап.ВнешнийИдентификатор = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "externalSid");
		Этап.Идентификатор = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "guid");
		Этап.ДатаНачала = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "startDate", "Дата");
		Этап.ДатаОкончания = XMLЗначение(Тип("Дата"), ДанныеЭтапа.endDate);
		Этап.Цена = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "stagePrice", "Число");
		Этап.ЦенаВРублях = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "stagePriceRUR", "Число");
		// Процент и размер аванса по этапу контракта. Указание допустимо при заполненном блоке advancePaymentSum.
		Если ЕстьСвойство(ДанныеЭтапа, "stageAdvancePaymentSum") Тогда
			ДанныеАванса = ДанныеЭтапа.stageAdvancePaymentSum;
			Этап.РазмерАвансаВПроцентах = ЗначениеНеобязательногоСвойства(ДанныеАванса, "sumInPercents", "Число");
			Этап.РазмерАванса = ЗначениеНеобязательногоСвойства(ДанныеАванса, "priceValue", "Число");
			Этап.РазмерАвансаВРублях = ЗначениеНеобязательногоСвойства(ДанныеАванса, "priceValueRUR", "Число");
			Если ЗначениеЗаполнено(Результат.РазмерАвансаВПроцентах) Тогда
				Результат.ЕстьАвансовыеПлатежиПоЭтапам = Истина;
			КонецЕсли;
		КонецЕсли;
		Результат.ЭтапыИсполнения.Добавить(Этап);
	КонецЦикла;

	// Сведения о заказчике.
	Результат.СведенияОЗаказчике = ИзвлечьСведенияОЗаказчике(ДанныеКонтракта);

	// Сведения о поставщиках.
	Результат.СведенияОПоставщиках = ИзвлечьСведенияОПоставщиках(ДанныеКонтракта);

	// Сведения об объектах закупки.
	Результат.ОбъектыЗакупки = ИзвлечьСведенияОбОбъектахЗакупки(ДанныеКонтракта);
	Результат.ИнформацияОЦенах = ИзвлечьИнформациюОЦенах(ДанныеКонтракта);
	Результат.НевозможноУказатьКоличество = ЗначениеНеобязательногоСвойства(
	ДанныеКонтракта.products, "quantityUndefined", "Булево");

	Результат.УказанаМаксимальнаяЦена =
	Результат.ИнформацияОЦенах.СпособУказанияЦены = СпособУказанияЦеныМаксимальнаяЦена();

	Результат.КонтрактНедействителен =
	ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "isInvalid", "Булево", Ложь);

	// Текущее состояние контракта:
	// см. СостояниеКонтрактаАннулировано, см. СостояниеКонтрактаИсполнениеЗавершено,
	// см. СостояниеКонтрактаИсполнение, см. СостояниеКонтрактаИсполнениеПрекращено
	Результат.ТекущееСостояние = ОпределитьСостояниеКонтракта(ДанныеКонтракта);

	// Строительная специфика.
	Если ЕстьСвойство(ДанныеКонтракта, "constructionWorksInfo") Тогда
		ДанныеПоСтроительству = ДанныеКонтракта.constructionWorksInfo;
		Результат.ПредметОтноситсяКРаботамПоСтроительству =
		ЗначениеНеобязательногоСвойства(ДанныеПоСтроительству, "isConstructionWorks");
		Если ЕстьСвойство(ДанныеПоСтроительству, "constructionWorkGroup") Тогда
			ДанныеГруппы = ДанныеПоСтроительству.constructionWorkGroup;
			Результат.КодГруппыРаботПоСтроительству = ЗначениеНеобязательногоСвойства(ДанныеГруппы, "code");
			Результат.НаименованиеГруппыРаботПоСтроительству = ЗначениеНеобязательногоСвойства(ДанныеГруппы, "name");
		КонецЕсли;
	КонецЕсли;

	// Банковское или казначейское сопровождение.
	Если ЕстьСвойство(ДанныеКонтракта, "bankSupportContractRequiredInfo") Тогда
		ДанныеСопровождения = ДанныеКонтракта.bankSupportContractRequiredInfo;
		Результат.ТребуетсяБанковскоеСопровождение = 
		ЕстьСвойство(ДанныеСопровождения, "bankSupportContractRequired");
		Результат.ТребуетсяКазначейскоеСопровождение = 
		ЕстьСвойство(ДанныеСопровождения, "treasurySupportContractRequired");
	КонецЕсли;

	Если ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта) Тогда
		Результат.ИГК = ИдентификаторГосударственногоКонтракта;
	Иначе
		Результат.ИГК = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "IGK");
		#Вставка
		//++РС Консалт Назаров М.Ю. 15 ноября 2022 г. 6:56:57                  
		// Поля IGK в xml нет поэтому используем "Идентификационный код закупки"
		Если Не ЗначениеЗаполнено(Результат.ИГК) 
			И ЗначениеЗаполнено(Результат.Идентификатор) Тогда 
			Результат.ИГК = Результат.Идентификатор;
		КонецЕсли;
		//--РС Консалт Назаров М.Ю. 15 ноября 2022 г. 6:56:57
		#КонецВставки
	КонецЕсли;

	Возврат Результат;

КонецФункции
