  
#Область Devices 
  
&ИзменениеИКонтроль("IsNewData")
Функция РСК_IsNewData(SN, UserName)

	ОбъектОтвета = Новый Структура;

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Запрос=Новый Запрос("ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.new_templates) КАК new_templates,
	|	МАКСИМУМ(ВложенныйЗапрос.new_cells) КАК new_cells,
	|	МАКСИМУМ(ВложенныйЗапрос.new_docs) КАК new_docs,
	|	МАКСИМУМ(ВложенныйЗапрос.new_users) КАК new_users,
	|	МАКСИМУМ(ВложенныйЗапрос.new_arts) КАК new_arts,
	|	МАКСИМУМ(ВложенныйЗапрос.new_clients) КАК new_clients,
	|	МАКСИМУМ(ВложенныйЗапрос.new_units) КАК new_units,
	|	МАКСИМУМ(ВложенныйЗапрос.new_egais_arts) КАК new_egais_arts,
	|	МАКСИМУМ(ВложенныйЗапрос.new_warehouses) КАК new_warehouses,
	|	МАКСИМУМ(ВложенныйЗапрос.new_egais_marks) КАК new_egais_marks,
	|	МАКСИМУМ(ВложенныйЗапрос.new_steps) КАК new_steps,
	|	МАКСИМУМ(ВложенныйЗапрос.need_check_ftp) КАК need_check_ftp 
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ИСТИНА КАК new_templates,
	|		ЛОЖЬ КАК new_cells,
	|		ЛОЖЬ КАК new_docs,
	|		ЛОЖЬ КАК new_users,
	|		ЛОЖЬ КАК new_arts,
	|		ЛОЖЬ КАК new_clients,
	|		ЛОЖЬ КАК new_units,
	|		ЛОЖЬ КАК new_egais_arts,
	|		NULL КАК new_warehouses,
	|		ЛОЖЬ КАК new_egais_marks,
	|		ЛОЖЬ КАК new_steps,
	|		ЛОЖЬ КАК need_check_ftp
	|
	|	ИЗ
	|		Справочник.ДатаМобайл_ШаблоныДокументов.Изменения КАК ДатаМобайл_ШаблоныДокументовИзменения
	|	ГДЕ
	|		НЕ ДатаМобайл_ШаблоныДокументовИзменения.Ссылка.ПометкаУдаления
	|		И ДатаМобайл_ШаблоныДокументовИзменения.Узел = &Узел
	|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	//|		ЛОЖЬ,
	//|		ИСТИНА,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ
	//|	ИЗ
	//|		Справочник.СкладскиеЯчейки.Изменения КАК МестаХраненияИзменения
	//|	ГДЕ
	//|		НЕ МестаХраненияИзменения.Ссылка.ПометкаУдаления
	//|		И МестаХраненияИзменения.Узел = &Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.ДатаМобайл_ДокументыТСД.Изменения КАК ДатаМобайл_ДокументыТСДИзменения
	|	ГДЕ
	|		НЕ ДатаМобайл_ДокументыТСДИзменения.Ссылка.ПометкаУдаления
	|		И ДатаМобайл_ДокументыТСДИзменения.Узел = &Узел
	|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ИСТИНА,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ
	//|	ИЗ
	//|		Справочник.Пользователи.Изменения КАК ПользователиИзменения
	//|	ГДЕ
	//|		НЕ ПользователиИзменения.Ссылка.ПометкаУдаления
	//|		И ПользователиИзменения.Узел = &Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|	ГДЕ
	|		НЕ НоменклатураИзменения.Ссылка.ПометкаУдаления
	|		И НоменклатураИзменения.Узел = &Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры.Изменения КАК ХарактеристикиНоменклатурыИзменения
	|	ГДЕ
	|		НЕ ХарактеристикиНоменклатурыИзменения.Ссылка.ПометкаУдаления
	|		И ХарактеристикиНоменклатурыИзменения.Узел = &Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		РегистрСведений.ШтрихкодыНоменклатуры.Изменения КАК ШтрихкодыНоменклатурыИзменения
	|	ГДЕ
	|		ШтрихкодыНоменклатурыИзменения.Узел = &Узел
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		РегистрСведений.ДСТ_ШтрихкодыСерий.Изменения КАК ДСТ_ШтрихкодыСерийИзменения
	|	ГДЕ
	|		ДСТ_ШтрихкодыСерийИзменения.Узел = &Узел
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.ДатаМобайл_НовыеТовары.Изменения КАК ДатаМобайл_НовыеТоварыИзменения
	|	ГДЕ
	|		ДатаМобайл_НовыеТоварыИзменения.Узел = &Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		РегистрСведений.ДатаМобайл_НовыеШтрихкоды.Изменения КАК ДатаМобайл_НовыеШтрихкодыИзменения
	|	ГДЕ
	|		ДатаМобайл_НовыеШтрихкодыИзменения.Узел = &Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.Партнеры.Изменения КАК ПартнерыИзменения
	|	ГДЕ
	|		НЕ ПартнерыИзменения.Ссылка.ПометкаУдаления
	|		И ПартнерыИзменения.Узел = &Узел
	|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ИСТИНА,
	//|		ЛОЖЬ, 
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ
	//|	ИЗ
	//|		Справочник.УпаковкиЕдиницыИзмерения.Изменения КАК УпаковкиЕдиницыИзмерения
	//|	ГДЕ
	//|		НЕ УпаковкиЕдиницыИзмерения.Ссылка.ПометкаУдаления
	//|		И УпаковкиЕдиницыИзмерения.Узел = &Узел
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ИСТИНА,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ
	//|	ИЗ
	//|		Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Изменения КАК КлассификаторАлкогольнойПродукцииЕГАИСИзменения
	//|	ГДЕ
	//|		КлассификаторАлкогольнойПродукцииЕГАИСИзменения.Узел = &Узел
	//|		И НЕ КлассификаторАлкогольнойПродукцииЕГАИСИзменения.Ссылка.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.Склады.Изменения КАК СкладыИзменения
	|	ГДЕ
	|		НЕ СкладыИзменения.Ссылка.ПометкаУдаления
	|		И СкладыИзменения.Узел = &Узел
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ИСТИНА
	//|	ИЗ
	//|		РегистрСведений.АкцизныеМаркиЕГАИС.Изменения КАК МаркиЕГАИСИзменения
	//|	ГДЕ
	//|		НЕ МаркиЕГАИСИзменения.АкцизнаяМарка.ПометкаУдаления
	//|		И МаркиЕГАИСИзменения.Узел = &Узел
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ЛОЖЬ,
	//|		ИСТИНА,
	//|		ЛОЖЬ
	//|	ИЗ
	//|		РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов.Изменения КАК СвязиДополнительныхФормИШаблонов
	//|	ГДЕ
	//|		СвязиДополнительныхФормИШаблонов.Узел = &Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ДатаМобайл_СписокТСД.выгружатьТоварыНаFTP
	|	ИЗ
	|		ПланОбмена.ДатаМобайл_СписокТСД КАК ДатаМобайл_СписокТСД
	|	ГДЕ
	|		ДатаМобайл_СписокТСД.Ссылка = &Узел) КАК ВложенныйЗапрос");

	Запрос.УстановитьПараметр("Узел", УзелПО.Ссылка);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		//ЗаполнитьЗначенияСвойств(ОбъектОтвета,Рез);


		ОбъектОтвета.Вставить("is_need_clear_templates",  		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьШаблоны"));
		ОбъектОтвета.Вставить("is_need_load_templates",   		 ?(Рез.new_templates,Рез.new_templates, ОбъектОтвета.is_need_clear_templates));

		ОбъектОтвета.Вставить("is_need_clear_cells",     		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьЯчейки"));
		ОбъектОтвета.Вставить("is_need_load_cells",       		 ?(Рез.new_cells, Рез.new_cells, ОбъектОтвета.is_need_clear_cells));

		ОбъектОтвета.Вставить("is_need_clear_docs",       		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьДокументы"));
		ОбъектОтвета.Вставить("is_need_load_docs",         		 ?(Рез.new_docs,Рез.new_docs,ОбъектОтвета.is_need_clear_docs));

		ОбъектОтвета.Вставить("is_need_clear_users",      		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьПользователей"));
		ОбъектОтвета.Вставить("is_need_load_users",        		 ?(Рез.new_users,Рез.new_users,ОбъектОтвета.is_need_clear_users));

		ОбъектОтвета.Вставить("is_need_clear_arts",       	 	 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьТовары"));
		ОбъектОтвета.Вставить("is_need_load_arts",         		 ?(Рез.new_arts,Рез.new_arts,ОбъектОтвета.is_need_clear_arts));

		ОбъектОтвета.Вставить("is_need_clear_clients",    		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьКлиентов"));
		ОбъектОтвета.Вставить("is_need_load_clients",      		 ?(Рез.new_clients,Рез.new_clients,ОбъектОтвета.is_need_clear_clients));

		ОбъектОтвета.Вставить("is_need_clear_units",      		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьЕдиницыИзмерения"));
		ОбъектОтвета.Вставить("is_need_load_units",        		 ?(Рез.new_units,Рез.new_units,ОбъектОтвета.is_need_clear_units));

		ОбъектОтвета.Вставить("is_need_clear_egais_arts",  		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьТоварыЕГАИС"));
		ОбъектОтвета.Вставить("is_need_load_egais_arts",    	 ?(Рез.new_egais_arts,Рез.new_egais_arts,ОбъектОтвета.is_need_clear_egais_arts));

		ОбъектОтвета.Вставить("is_need_clear_warehouses", 		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьСклады"));
		ОбъектОтвета.Вставить("is_need_load_warehouses",   		 ?(Рез.new_warehouses,Рез.new_warehouses,ОбъектОтвета.is_need_clear_warehouses));

		ОбъектОтвета.Вставить("is_need_clear_egais_marks", 		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьМаркиЕГАИС"));
		ОбъектОтвета.Вставить("is_need_load_egais_marks",   	 ?(Рез.new_egais_marks,Рез.new_egais_marks,ОбъектОтвета.is_need_clear_egais_marks));

		ОбъектОтвета.Вставить("is_need_clear_art_marks", 		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьКодыМаркировки"));
		ОбъектОтвета.Вставить("is_need_load_art_marks",   		 ОбъектОтвета.is_need_clear_art_marks);

		ОбъектОтвета.Вставить("is_need_clear_steps",             ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьДополнительныеФормы"));
		ОбъектОтвета.Вставить("is_need_load_steps",    	     	 ?(Рез.new_steps,Рез.new_steps,ОбъектОтвета.is_need_clear_steps));

		ОбъектОтвета.Вставить("is_need_clear_barcode_templates", ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьШаблоныШтрихкодов"));
		ОбъектОтвета.Вставить("is_need_load_barcode_templates",  ОбъектОтвета.is_need_clear_barcode_templates);

		ОбъектОтвета.Вставить("is_need_clear_sn_types", 		 ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьТипыСерий"));
		ОбъектОтвета.Вставить("is_need_load_sn_types",  		 ОбъектОтвета.is_need_clear_sn_types);

	КонецЕсли;

	ДатаМобайл_ОбщийМодуль.ЗаписьЗначенийУзлаОбменаТСД(УзелПО, "ДатаПоследнейЗагрузкиСправочников", ТекущаяДата());

	Возврат ПодготовитьОтветJSON(ОбъектОтвета);
КонецФункции

#КонецОбласти

#Область Arts

&ИзменениеИКонтроль("OnArtScanSelect")
Функция РСК_OnArtScanSelect(SN, UserName, ШК, DocOutID, Ячейка, Params)

	ОбъектСписка = Новый Массив;
	СтруктураОтвета = Новый Структура;

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Попытка
		СсылкаНаДок = XMLЗначение(Тип("СправочникСсылка.ДатаМобайл_ДокументыТСД"), Сред(DocOutID, 5));	
	Исключение			
		СтруктураОтвета.Вставить("Описание", "Не нашли документ. ");		
		Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
	КонецПопытки;

	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");

	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок, "ТСД, ДатаНачалаСбора, ДатаЗавершенияСбора, Шаблон, ИсходныйДокумент, Склад");

	ДокТСД 				   = ЗначенияРеквизитовСсылкаНаДок.ТСД;
	ДокДатаНачалаСбора 	   = ЗначенияРеквизитовСсылкаНаДок.ДатаНачалаСбора;
	ДокДатаЗавершенияСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаЗавершенияСбора;
	Шаблон 				   = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	ИсходныйДокумент 	   = ЗначенияРеквизитовСсылкаНаДок.ИсходныйДокумент;
	Склад  				   = ЗначенияРеквизитовСсылкаНаДок.Склад;

	Если Шаблон = Неопределено Тогда		
		СтруктураОтвета.Вставить("Описание", "Не нашли запись документа. ");	
		Возврат ПодготовитьОтветJSON(,СтруктураОтвета);	
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокТСД) Тогда
		Если ДокТСД <> УзелПО Тогда			
			СтруктураОтвета.Вставить("Описание", "Чужой документ. ");			
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
		КонецЕсли;	
	КонецЕсли;

	Если ДокДатаЗавершенияСбора <> Дата(1, 1, 1) Тогда		
		СтруктураОтвета.Вставить("Описание", "Закрытый документ. ");	
		Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
	КонецЕсли;			

	ЗначенияРеквизитовУзелПО = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелПО, "ТипЦен, ДобавлятьАртикулВНаименование, ПростойФорматВесовыхШтрихкодов");
	ТипЦен = ЗначенияРеквизитовУзелПО.ТипЦен;
	ВключатьАртикул = ЗначенияРеквизитовУзелПО.ДобавлятьАртикулВНаименование;
	ПростойФорматВесовыхШтрихкодов = ЗначенияРеквизитовУзелПО.ПростойФорматВесовыхШтрихкодов;

	Если СтрДлина(ШК) = 5 И НЕ ПростойФорматВесовыхШтрихкодов Тогда
		ВесовойШК = "2_" + ШК + "00000_";			
	КонецЕсли;	

	Запрос = Новый Запрос;

	Если Шаблон.ЕГАИС  Тогда
		OnArtScan_Select_EGAIS(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, "Select");	
	Иначе
		Попытка
			лЕстьЯчейка = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Ячейка") <> Неопределено;
		Исключение
			лЕстьЯчейка = Ложь;
		КонецПопытки;

		Если Шаблон.ИспользованиеЯчеекПодбор = 0 ИЛИ Шаблон.ВыгрузкаЯчеекПодбор = 1 ИЛИ НЕ лЕстьЯчейка Тогда
			OnArtScan_Select_Insert_Casual(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, "Select");
			Запрос.УстановитьПараметр("Артикул", ?(УзелПО.ИспользоватьАртикулКакШтрихкодТовара, ШК, Неопределено));
		Иначе
			OnArtScan_Select_Insert_Cells(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, "Select", Ячейка)
		КонецЕсли;
	КонецЕсли;

	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
	Запрос.УстановитьПараметр("ИсходноеЗадание", СсылкаНаДок);          	
	Запрос.УстановитьПараметр("ШтрихКод", ШК);
	Запрос.УстановитьПараметр("НесколькоДокументов", СсылкаНаДок.Шаблон.МножествоДокументовКакЗадание);
	Запрос.УстановитьПараметр("Документы", СсылкаНаДок.Задания.ВыгрузитьКолонку("Задание"));
	Запрос.УстановитьПараметр("ВесовойШтрихКод", ВесовойШК);
	Запрос.УстановитьПараметр("ВсеУпаковки", Шаблон.ВсеШтрихкодыТовара);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");	
	Если ЗначениеЗаполнено(СсылкаНаДок.Склад) Тогда	
		СписокСкладов.Очистить();
		СписокСкладов.Добавить(СсылкаНаДок.Склад);			
	КонецЕсли;		
	Запрос.УстановитьПараметр("Склады", СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады" ,СписокСкладов.Количество() = 0);

	СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Если ЗначениеЗаполнено(СсылкаНаДок.Помещение) Тогда	
		СписокПомещений.Очистить();
		СписокПомещений.Добавить(СсылкаНаДок.Помещение);			
	КонецЕсли;	
	Запрос.УстановитьПараметр("Помещения", СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", СписокПомещений.Количество() = 0);

	Запрос.УстановитьПараметр("ВключатьАртикул", ВключатьАртикул);

	Рез = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаДока Из Рез Цикл 

		Итог = (СтрокаДока.ВНаличии - СтрокаДока.ВРезерве - СтрокаДока.ВРезервеТСД);
		СтрокаДока.Коэффициент=?(СтрокаДока.Коэффициент=0,1,СтрокаДока.Коэффициент);
		СтрокаДока.НаименованиеУпаковки=?(ЗначениеЗаполнено(СтрокаДока.НаименованиеУпаковки),СтрокаДока.НаименованиеУпаковки,"шт.");

		// Табачные изделия, штрихкод товара на все характеристики
		ЕстьХарактеристикиБезШтрихкодов = Ложь;
		ТипПродукции = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Если НЕ СтрокаДока.ЭтоНовыйТовар И УзелПО.ВыводитьВсеХарактеристикиПоШтрихкоду Тогда

			ЗапросВсехХарактеристик = Новый Запрос();				
			ЗапросВсехХарактеристик.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ХарактеристикиНоменклатуры.Ссылка,
			|	ХарактеристикиНоменклатуры.Наименование,
			|	ХарактеристикиНоменклатуры.Владелец
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец = &Владелец
			|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";

			Если СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
				ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.Ссылка);
			ИначеЕсли СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
				ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.ВидНоменклатуры);
			ИначеЕсли СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
				ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.ВладелецХарактеристик);
			Иначе
				ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", Неопределено);
			КонецЕсли;
			ЗапросВсехХарактеристик.УстановитьПараметр("ИсходноеЗадание", СсылкаНаДок);
			ЗапросВсехХарактеристик.УстановитьПараметр("Номенклатура", СсылкаНаДок); 
			ЗапросВсехХарактеристик.УстановитьПараметр("Склады", СписокСкладов);
			ЗапросВсехХарактеристик.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);

			ВыборкаХарактеристик = ЗапросВсехХарактеристик.Выполнить().Выбрать();
			Пока ВыборкаХарактеристик.Следующий() Цикл	
				ЕстьХарактеристикиБезШтрихкодов = Истина;

				СтруктураТекущейСтроки = Новый Структура;

				ОбъектТовара = ПолучитьСтруктуруОбъектаДляHttp("art","scan");
				ОбъектТовара.name = ЧистаяСтрока(СокрП(СтрокаДока.Номенклатура.Наименование) + " " + СокрП(ВыборкаХарактеристик.Наименование));			
				ОбъектТовара.id = "8U-" + XMLСтрока(СтрокаДока.Номенклатура) + XMLСтрока(ВыборкаХарактеристик.Ссылка);
				ОбъектТовара.price = СтрокаДока.Цена;
				Попытка	
					DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры, Склад);
				Исключение
					DMUseSN = Ложь;
				Конецпопытки;
				СформироватьЗаголовкиJSONParamsТовара(УзелПО,ОбъектТовара,СтрокаДока.Номенклатура,ВыборкаХарактеристик.Ссылка,DMUseSN,Шаблон);
				СтруктураТекущейСтроки.Вставить("art", ОбъектТовара);

				ОбъектШтрихкода = ПолучитьСтруктуруОбъектаДляHttp("barcode","scan");
				Попытка ОбъектШтрихкода.unit_name = СтрокаДока.НаименованиеУпаковки; Исключение ОбъектШтрихкода.unit_name = "шт."; КонецПопытки;	
				Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
					ОбъектШтрихкода.unit_coef = 1;
				Иначе	
					ОбъектШтрихкода.unit_coef = СтрокаДока.Коэффициент;
				КонецЕсли;
				СтруктураТекущейСтроки.Вставить("barcode", ОбъектШтрихкода);

				ЭтоУслуга = Ложь;
				Попытка 
					Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
						ЭтоУслуга = Истина;
					КонецЕсли;
				Исключение
				КонецПопытки;

				limit_qty = 0;
				Если УзелПО.НеОтображатьОстатки Тогда
					limit_qty = 0;
				ИначеЕсли ЭтоУслуга Тогда
					limit_qty = 999;	
				Иначе
					Если ЗначениеЗаполнено(Ячейка) Тогда
						ТекущаяЯчейкаСсылка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Ячейка,СсылкаНаДок);
						limit_qty = ПолучитьОстаткиПоЯчейке(УзелПО, Неопределено, СтрокаДока.Номенклатура, ВыборкаХарактеристик.Ссылка, ТекущаяЯчейкаСсылка);
					Иначе
						limit_qty = ПолучитьОстаткиПоТовару(УзелПО, Неопределено, СтрокаДока.Номенклатура, ВыборкаХарактеристик.Ссылка);
					КонецЕсли; 	
				КонецЕсли;

				СтруктураТекущейСтроки.Вставить("limit_qty", limit_qty);

				Если СокрЛП(ЧистаяСтрока(ОбъектТовара.name)) = "" или СокрЛП(ЧистаяСтрока(ОбъектТовара.id)) = "" Тогда
					Продолжить;
				КонецЕсли;

				ОбъектСписка.Добавить(СтруктураТекущейСтроки);

			КонецЦикла;		
		КонецЕсли;

		// Остальные товары 
		Если НЕ ЕстьХарактеристикиБезШтрихкодов Тогда

			СтруктураТекущейСтроки = Новый Структура;

			ОбъектТовара = ПолучитьСтруктуруОбъектаДляHttp("art","scan");	
			ОбъектТовара.name = ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));
			ОбъектТовара.id = ?(СтрокаДока.ЭтоНовыйТовар, "8n-" + XMLСтрока(СтрокаДока.Номенклатура), "8U-" + XMLСтрока(СтрокаДока.Номенклатура) + XMLСтрока(СтрокаДока.Характеристика));
			ОбъектТовара.price = СтрокаДока.Цена;			
			Попытка	
				DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры, Склад);
			Исключение
				DMUseSN = Ложь;
			Конецпопытки;		
			СформироватьЗаголовкиJSONParamsТовара(УзелПО,ОбъектТовара,СтрокаДока.Номенклатура,СтрокаДока.Характеристика, DMUseSN,Шаблон);
			СтруктураТекущейСтроки.Вставить("art", ОбъектТовара);
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
				sn = ПолучитьЗначениеСерии(УзелПО, СтрокаДока.Номенклатура, СтрокаДока.Серия);
				СтруктураТекущейСтроки.Вставить("sn", sn)
			КонецЕсли;
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки


			ОбъектШтрихкода = ПолучитьСтруктуруОбъектаДляHttp("barcode","scan");
			Попытка ОбъектШтрихкода.unit_name = СтрокаДока.НаименованиеУпаковки; Исключение ОбъектШтрихкода.unit_name = "шт."; КонецПопытки;	
			Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
				ОбъектШтрихкода.unit_coef = 1;
			Иначе	
				ОбъектШтрихкода.unit_coef = СтрокаДока.Коэффициент;
			КонецЕсли;
			СтруктураТекущейСтроки.Вставить("barcode", ОбъектШтрихкода);

			ЭтоУслуга = Ложь;
			Попытка 
				Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЭтоУслуга = Истина;
				КонецЕсли;
			Исключение
			КонецПопытки;	

			Если УзелПО.НеОтображатьОстатки Тогда
				limit_qty = 0;
			ИначеЕсли ЭтоУслуга Тогда
				limit_qty = 999;
			Иначе	
				limit_qty = Итог;	
			КонецЕсли;

			СтруктураТекущейСтроки.Вставить("limit_qty", limit_qty);

			Если СокрЛП(ЧистаяСтрока(ОбъектТовара.name)) = "" ИЛИ СокрЛП(ЧистаяСтрока(ОбъектТовара.id)) = "" Тогда
				Продолжить;
			КонецЕсли;

			ОбъектСписка.Добавить(СтруктураТекущейСтроки);
		КонецЕсли;
	КонецЦикла;


	//ЗАПИСЬ	
	Если НЕ Шаблон.ГрупповаяРабота Тогда
		//ОБЫЧНАЯ ЛОГИКА
		Если НЕ ЗначениеЗаполнено(ДокДатаНачалаСбора) ИЛИ НЕ ЗначениеЗаполнено(ДокТСД) Тогда

			Попытка
				Объект = СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора = ТекущаяДата();
				Объект.ТСД = УзелПО;

				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();

			Исключение
			КонецПопытки;
		КонецЕсли;

	Иначе
		//ГРУППОВОЙ ДОКУМЕНТ

		ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаНачалаСбора");	
		Если НЕ ЗначениеЗаполнено(ДатаСбораПоТСД) Тогда	
			ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(SN, СсылкаНаДок, UserName);		
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ДокДатаНачалаСбора) Тогда
			Попытка
				Объект = СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора = ТекущаяДата();

				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
			Исключение
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;	

	Возврат ПодготовитьОтветJSON(ОбъектСписка);

КонецФункции

&ИзменениеИКонтроль("OnArtScanInsert")
Функция РСК_OnArtScanInsert(SN, UserName, ШК, DocOutID, Ячейка, Params)

	ОбъектСписка = Новый Массив;
	СтруктураОтвета = Новый Структура;

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Попытка
		СсылкаНаДок = XMLЗначение(Тип("СправочникСсылка.ДатаМобайл_ДокументыТСД"), Сред(DocOutID, 5));	
	Исключение	
		СтруктураОтвета.Вставить("Описание", "Не нашли запись документа. ");	
		Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
	КонецПопытки;

	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");

	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок, "ТСД, ДатаНачалаСбора, ДатаЗавершенияСбора, Шаблон, ИсходныйДокумент, Склад");

	ДокТСД = ЗначенияРеквизитовСсылкаНаДок.ТСД;
	ДокДатаНачалаСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаНачалаСбора;
	ДокДатаЗавершенияСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаЗавершенияСбора;
	Шаблон = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	ИсходныйДокумент = ЗначенияРеквизитовСсылкаНаДок.ИсходныйДокумент;
	Склад  = ЗначенияРеквизитовСсылкаНаДок.Склад;

	Если Шаблон = Неопределено Тогда		
		СтруктураОтвета.Вставить("Описание", "Не нашли запись документа. ");	
		Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокТСД) Тогда
		Если ДокТСД <> УзелПО Тогда		
			СтруктураОтвета.Вставить("Описание", "Чужой документ.");		
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
		КонецЕсли;	
	КонецЕсли;

	Попытка
		ДокДатаЗавершенияСбора = СсылкаНаДок.ДатаЗавершенияСбора;
	Исключение	
		ДокДатаЗавершенияСбора = Дата(1, 1, 1);
	КонецПопытки;

	Если ДокДатаЗавершенияСбора <> Дата(1, 1, 1) Тогда		
		СтруктураОтвета.Вставить("Описание", "Закрытый документ.");		
		Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
	КонецЕсли;					

	ТипЦен = УзелПО.ТипЦен;
	ВключатьАртикул = УзелПО.ДобавлятьАртикулВНаименование;
	ВесовойШК = ШК;
	Если СтрДлина(ШК) = 5 И НЕ УзелПО.ПростойФорматВесовыхШтрихкодов Тогда	
		ВесовойШК = "2_" + ШК + "00000_";			
	КонецЕсли;	

	Запрос = Новый Запрос;

	Попытка
		лЕстьЯчейка = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПриемка].Реквизиты.Найти("Ячейка") <> Неопределено;
	Исключение
		лЕстьЯчейка = Ложь;
	КонецПопытки;

	Если Шаблон.ИспользованиеЯчеекПриемка = 0 ИЛИ Шаблон.ВыгрузкаЯчеекПриемка = 1 ИЛИ НЕ лЕстьЯчейка Тогда
		OnArtScan_Select_Insert_Casual(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, "Insert");
		Запрос.УстановитьПараметр("Артикул", ?(УзелПО.ИспользоватьАртикулКакШтрихкодТовара, ШК, Неопределено));
	Иначе
		OnArtScan_Select_Insert_Cells(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, "Insert", Ячейка);
	КонецЕсли;



	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("ИсходныйДокумент", 	 ИсходныйДокумент);
	Запрос.УстановитьПараметр("ИсходноеЗадание", 	 СсылкаНаДок);
	Запрос.УстановитьПараметр("ШтрихКод", 			 ШК);
	Запрос.УстановитьПараметр("НесколькоДокументов", СсылкаНаДок.Шаблон.МножествоДокументовКакЗадание);
	Запрос.УстановитьПараметр("Документы", 			 СсылкаНаДок.Задания.ВыгрузитьКолонку("Задание"));
	Запрос.УстановитьПараметр("ВесовойШтрихКод", 	 ВесовойШК);
	Запрос.УстановитьПараметр("ВсеУпаковки", 		 Шаблон.ВсеШтрихкодыТовара);

	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");		
	Если ЗначениеЗаполнено(СсылкаНаДок.Склад) Тогда		
		СписокСкладов.Очистить();
		СписокСкладов.Добавить(СсылкаНаДок.Склад);			
	КонецЕсли;
	Запрос.УстановитьПараметр("Склады",			     СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады",			 СписокСкладов.Количество() = 0);

	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Если ЗначениеЗаполнено(СсылкаНаДок.Помещение) Тогда	
		СписокПомещений.Очистить();
		СписокПомещений.Добавить(СсылкаНаДок.Помещение);			
	КонецЕсли;	
	Запрос.УстановитьПараметр("Помещения",			 СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", 		 СписокПомещений.Количество() = 0);

	Запрос.УстановитьПараметр("ВключатьАртикул",     ВключатьАртикул);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	Рез = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаДока Из Рез Цикл 


		Итог = (СтрокаДока.ВНаличии - СтрокаДока.ВРезерве - СтрокаДока.ВРезервеТСД);
		СтрокаДока.Коэффициент=?(СтрокаДока.Коэффициент=0,1,СтрокаДока.Коэффициент);
		СтрокаДока.НаименованиеУпаковки=?(ЗначениеЗаполнено(СтрокаДока.НаименованиеУпаковки),СтрокаДока.НаименованиеУпаковки,"шт.");

		// Табачные изделия, штрихкод товара на все характеристики
		ЕстьХарактеристикиБезШтрихкодов = Ложь;
		ТипПродукции = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Если НЕ СтрокаДока.ЭтоНовыйТовар И УзелПО.ВыводитьВсеХарактеристикиПоШтрихкоду Тогда

			ЗапросВсехХарактеристик = Новый Запрос();				
			ЗапросВсехХарактеристик.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ХарактеристикиНоменклатуры.Ссылка,
			|	ХарактеристикиНоменклатуры.Наименование,
			|	ХарактеристикиНоменклатуры.Владелец
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец = &Владелец
			|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";

			Если СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
				ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.Ссылка);
			ИначеЕсли СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
				ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.ВидНоменклатуры);
			ИначеЕсли СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
				ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.ВладелецХарактеристик);
			Иначе
				ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", Неопределено);
			КонецЕсли;
			ЗапросВсехХарактеристик.УстановитьПараметр("ИсходноеЗадание", СсылкаНаДок);
			ЗапросВсехХарактеристик.УстановитьПараметр("Номенклатура", СсылкаНаДок); 
			ЗапросВсехХарактеристик.УстановитьПараметр("Склады", СписокСкладов);
			ЗапросВсехХарактеристик.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);

			ВыборкаХарактеристик = ЗапросВсехХарактеристик.Выполнить().Выбрать();
			Пока ВыборкаХарактеристик.Следующий() Цикл	
				ЕстьХарактеристикиБезШтрихкодов = Истина;


				СтруктураТекущейСтроки = Новый Структура;

				ОбъектТовара = ПолучитьСтруктуруОбъектаДляHttp("art","scan");
				ОбъектТовара.name = ЧистаяСтрока(СокрП(СтрокаДока.Номенклатура.Наименование) + " " + СокрП(ВыборкаХарактеристик.Наименование));			
				ОбъектТовара.id = "8U-" + XMLСтрока(СтрокаДока.Номенклатура) + XMLСтрока(ВыборкаХарактеристик.Ссылка);
				ОбъектТовара.price = СтрокаДока.Цена;
				Попытка	
					DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры, Склад);
				Исключение
					DMUseSN = Ложь;
				Конецпопытки;	
				СформироватьЗаголовкиJSONParamsТовара(УзелПО,ОбъектТовара,СтрокаДока.Номенклатура,ВыборкаХарактеристик.Ссылка, DMUseSN,Шаблон);
				СтруктураТекущейСтроки.Вставить("art", ОбъектТовара);

				ОбъектШтрихкода = ПолучитьСтруктуруОбъектаДляHttp("barcode","scan");
				Попытка ОбъектШтрихкода.unit_name = СтрокаДока.НаименованиеУпаковки; Исключение ОбъектШтрихкода.unit_name = "шт."; КонецПопытки;	
				Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
					ОбъектШтрихкода.unit_coef = 1;
				Иначе	
					ОбъектШтрихкода.unit_coef = СтрокаДока.Коэффициент;
				КонецЕсли;
				СтруктураТекущейСтроки.Вставить("barcode", ОбъектШтрихкода);

				ЭтоУслуга = Ложь;
				Попытка 
					Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
						ЭтоУслуга = Истина;
					КонецЕсли;
				Исключение
				КонецПопытки;

				limit_qty = 0;
				Если УзелПО.НеОтображатьОстатки Тогда
					limit_qty = 0;
				ИначеЕсли ЭтоУслуга Тогда
					limit_qty = 999;	
				Иначе
					Если ЗначениеЗаполнено(Ячейка) Тогда
						ТекущаяЯчейкаСсылка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Ячейка,СсылкаНаДок);
						limit_qty = ПолучитьОстаткиПоЯчейке(УзелПО, Неопределено, СтрокаДока.Номенклатура, ВыборкаХарактеристик.Ссылка, ТекущаяЯчейкаСсылка);
					Иначе
						limit_qty = ПолучитьОстаткиПоТовару(УзелПО, Неопределено, СтрокаДока.Номенклатура, ВыборкаХарактеристик.Ссылка);
					КонецЕсли; 	
				КонецЕсли;
				СтруктураТекущейСтроки.Вставить("limit_qty", limit_qty);

				Если СокрЛП(ЧистаяСтрока(ОбъектТовара.name)) = "" или СокрЛП(ЧистаяСтрока(ОбъектТовара.id)) = "" Тогда
					Продолжить;
				КонецЕсли;

				ОбъектСписка.Добавить(СтруктураТекущейСтроки);

			КонецЦикла;		
		КонецЕсли;

		// Остальные товары 
		Если НЕ ЕстьХарактеристикиБезШтрихкодов Тогда

			СтруктураТекущейСтроки = Новый Структура;

			ОбъектТовара = ПолучитьСтруктуруОбъектаДляHttp("art","scan");
			ОбъектТовара.name = ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));	
			ОбъектТовара.id = ?(СтрокаДока.ЭтоНовыйТовар, "8n-" + XMLСтрока(СтрокаДока.Номенклатура), "8U-" + XMLСтрока(СтрокаДока.Номенклатура) + XMLСтрока(СтрокаДока.Характеристика));
			ОбъектТовара.price = СтрокаДока.Цена;	
			Попытка	
				DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры, Склад);
			Исключение
				DMUseSN = Ложь;
			Конецпопытки;	
			СформироватьЗаголовкиJSONParamsТовара(УзелПО,ОбъектТовара,СтрокаДока.Номенклатура,СтрокаДока.Характеристика, DMUseSN,Шаблон);
			СтруктураТекущейСтроки.Вставить("art", ОбъектТовара);
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
				sn = ПолучитьЗначениеСерии(УзелПО, СтрокаДока.Номенклатура, СтрокаДока.Серия);
				СтруктураТекущейСтроки.Вставить("sn", sn)
			КонецЕсли;
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки


			ОбъектШтрихкода = ПолучитьСтруктуруОбъектаДляHttp("barcode","scan");
			Попытка ОбъектШтрихкода.unit_name = СтрокаДока.НаименованиеУпаковки; Исключение ОбъектШтрихкода.unit_name = "шт."; КонецПопытки;	
			Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
				ОбъектШтрихкода.unit_coef = 1;
			Иначе	
				ОбъектШтрихкода.unit_coef = СтрокаДока.Коэффициент;
			КонецЕсли;
			СтруктураТекущейСтроки.Вставить("barcode", ОбъектШтрихкода);

			ЭтоУслуга = Ложь;
			Попытка 
				Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЭтоУслуга = Истина;
				КонецЕсли;
			Исключение
			КонецПопытки;	

			limit_qty = 0;
			Если УзелПО.НеОтображатьОстатки Тогда
				limit_qty = 0;
			ИначеЕсли ЭтоУслуга Тогда
				limit_qty = 999;
			Иначе	
				limit_qty = Итог;	
			КонецЕсли;

			СтруктураТекущейСтроки.Вставить("limit_qty", limit_qty);


			Если СокрЛП(ЧистаяСтрока(ОбъектТовара.name)) = "" ИЛИ СокрЛП(ЧистаяСтрока(ОбъектТовара.id)) = "" Тогда
				Продолжить;
			КонецЕсли;			

			ОбъектСписка.Добавить(СтруктураТекущейСтроки);

		КонецЕсли;
	КонецЦикла;


	//ЗАПИСЬ	
	Если НЕ Шаблон.ГрупповаяРабота Тогда
		//ОБЫЧНАЯ ЛОГИКА
		Если Не ЗначениеЗаполнено(ДокДатаНачалаСбора) ИЛИ НЕ ЗначениеЗаполнено(ДокТСД) Тогда

			Попытка
				Объект = СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора = ТекущаяДата();
				Объект.ТСД = УзелПО;

				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();

			Исключение
			КонецПопытки;
		КонецЕсли;

	Иначе
		//ГРУППОВОЙ ДОКУМЕНТ

		ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаНачалаСбора");	
		Если Не ЗначениеЗаполнено(ДатаСбораПоТСД) Тогда	
			ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(SN, СсылкаНаДок, UserName);		
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ДокДатаНачалаСбора) Тогда
			Попытка
				Объект = СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора = ТекущаяДата();

				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
			Исключение
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;	

	Возврат ПодготовитьОтветJSON(ОбъектСписка);

КонецФункции

&ИзменениеИКонтроль("GetNewArts")
Функция РСК_GetNewArts(SN, UserName, НомерПакета)

	ОбъектСписка = Новый Массив();  

	УзелПО = НайтиУзел(SN); 

	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;   

	Если НЕ НомерПакета = "" Тогда
		ПакетнаяВыгрузка = Истина; 
		НомерПакета = Число(НомерПакета);
		КоличествоТоваровВПорции = УзелПО.КоличествоТоваровВПорции;
		Если НЕ ЗначениеЗаполнено(КоличествоТоваровВПорции) Тогда
			КоличествоТоваровВПорции = 1000;
		КонецЕсли;	
	Иначе
		ПакетнаяВыгрузка = Ложь;
	КонецЕсли;

	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьТовары") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьТовары", Ложь);

		Если ПакетнаяВыгрузка Тогда      

			Попытка ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.Номенклатура); Исключение КонецПопытки;

			ПланыОбмена.ЗарегистрироватьИзменения(УзелПО, Метаданные.Справочники.Номенклатура); 		

			МассивКВыгрузке = ПолучитьПорциюТоваров(УзелПО, КоличествоТоваровВПорции);
			Если МассивКВыгрузке.Количество() Тогда				
				ПланыОбмена.ВыбратьИзменения(УзелПО, НомерПакета, МассивКВыгрузке);		
				ОбъектСписка = СобратьТовары(МассивКВыгрузке, УзелПО,,, ПакетнаяВыгрузка); 			
			Иначе				
				ОбъектСписка = СобратьТовары(МассивКВыгрузке, УзелПО,,, ПакетнаяВыгрузка);				
			КонецЕсли;	

		Иначе		
			ОбъектСписка = СобратьТовары(ОбъектСписка, УзелПО);
		КонецЕсли;
	Иначе

		Если НЕ ПакетнаяВыгрузка Тогда
			Попытка	
				ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.Справочники.Номенклатура);
				ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.Справочники.ХарактеристикиНоменклатуры);
				ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
				ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
				ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.Справочники.ДатаМобайл_НовыеТовары);
				ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.РегистрыСведений.ДатаМобайл_НовыеШтрихкоды);
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.РегистрыСведений.ДСТ_ШтрихкодыСерий);
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки
			Исключение
			КонецПопытки; 
		Конецесли;	

		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзменившиесяТовары.Ссылка КАК Ссылка
		|
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		НоменклатураИзменения.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
		|	ГДЕ
		|		НоменклатураИзменения.Узел = &Узел
		|		И НЕ НоменклатураИзменения.НомерСообщения ЕСТЬ NULL
		|		И НЕ ЕСТЬNULL(НоменклатураИзменения.Ссылка.ЭтоГруппа, ИСТИНА)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Номенклатура.Ссылка
		|	ИЗ
		|		Справочник.ХарактеристикиНоменклатуры.Изменения КАК ХарактеристикиНоменклатурыИзменения
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|			ПО (ВЫБОР
		|					КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|						ТОГДА ХарактеристикиНоменклатурыИзменения.Ссылка.Владелец = Номенклатура.Ссылка
		|					КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|						ТОГДА ХарактеристикиНоменклатурыИзменения.Ссылка.Владелец = Номенклатура.ВидНоменклатуры
		|					КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|						ТОГДА ХарактеристикиНоменклатурыИзменения.Ссылка.Владелец = Номенклатура.ВладелецХарактеристик
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)
		|	ГДЕ
		|		ХарактеристикиНоменклатурыИзменения.Узел = &Узел
		|		И НЕ ХарактеристикиНоменклатурыИзменения.НомерСообщения ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Номенклатура.Ссылка
		|	ИЗ
		|		Справочник.УпаковкиЕдиницыИзмерения.Изменения КАК УпаковкиНоменклатурыИзменения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|			ПО (УпаковкиНоменклатурыИзменения.Ссылка.Владелец = Номенклатура.Ссылка
		|					ИЛИ УпаковкиНоменклатурыИзменения.Ссылка.Владелец = Номенклатура.ВидНоменклатуры)
		|	ГДЕ
		|		УпаковкиНоменклатурыИзменения.Узел = &Узел
		|		И НЕ УпаковкиНоменклатурыИзменения.НомерСообщения ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ШтрихкодыНоменклатуры.Номенклатура
		|	ИЗ
		|		РегистрСведений.ШтрихкодыНоменклатуры.Изменения КАК ШтрихкодыНоменклатурыИзменения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|			ПО ШтрихкодыНоменклатурыИзменения.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод
		|	ГДЕ
		|		ШтрихкодыНоменклатурыИзменения.Узел = &Узел
		|		И НЕ ШтрихкодыНоменклатурыИзменения.НомерСообщения ЕСТЬ NULL
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДСТ_ШтрихкодыСерий.Номенклатура
		|	ИЗ
		|		РегистрСведений.ДСТ_ШтрихкодыСерий.Изменения КАК ДСТ_ШтрихкодыСерийИзменения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДСТ_ШтрихкодыСерий КАК ДСТ_ШтрихкодыСерий
		|			ПО ДСТ_ШтрихкодыСерийИзменения.Штрихкод = ДСТ_ШтрихкодыСерий.Штрихкод
		|	ГДЕ
		|		ДСТ_ШтрихкодыСерийИзменения.Узел = &Узел
		|		И НЕ ДСТ_ШтрихкодыСерийИзменения.НомерСообщения ЕСТЬ NULL
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки	
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДатаМобайл_НовыеШтрихкоды.Номенклатура
		|	ИЗ
		|		РегистрСведений.ДатаМобайл_НовыеШтрихкоды.Изменения КАК ДатаМобайл_НовыеШтрихкодыИзменения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
		|			ПО ДатаМобайл_НовыеШтрихкодыИзменения.ШтрихКод = ДатаМобайл_НовыеШтрихкоды.ШтрихКод
		|	ГДЕ
		|		ДатаМобайл_НовыеШтрихкодыИзменения.Узел = &Узел
		|		И НЕ ДатаМобайл_НовыеШтрихкодыИзменения.НомерСообщения ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДатаМобайл_НовыеТоварыИзменения.Ссылка
		|	ИЗ
		|		Справочник.ДатаМобайл_НовыеТовары.Изменения КАК ДатаМобайл_НовыеТоварыИзменения
		|	ГДЕ
		|		ДатаМобайл_НовыеТоварыИзменения.Узел = &Узел
		|		И НЕ ДатаМобайл_НовыеТоварыИзменения.НомерСообщения ЕСТЬ NULL) КАК ИзменившиесяТовары
		|ГДЕ
		|	(НЕ ИзменившиесяТовары.Ссылка ССЫЛКА Справочник.Номенклатура
		|			ИЛИ ИзменившиесяТовары.Ссылка В ИЕРАРХИИ (&СписокТоваров)
		|			ИЛИ &ВсеТовары)");

		Запрос.УстановитьПараметр("Узел", УзелПО);
		Запрос.УстановитьПараметр("СписокТоваров", УзелПО.ДоступныеГруппыТоваров.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("ВсеТовары", УзелПО.ДоступныеГруппыТоваров.Количество() = 0);

		Если НЕ ПакетнаяВыгрузка Тогда 	

			МассивКВыгрузке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

			Попытка	
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.Номенклатура);
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ХарактеристикиНоменклатуры);
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ДатаМобайл_НовыеТовары);
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.РегистрыСведений.ДатаМобайл_НовыеШтрихкоды);
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.РегистрыСведений.ДСТ_ШтрихкодыСерий);
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД 
				#КонецВставки
			Исключение
			КонецПопытки;   

		Иначе

			//1. удаляем данные предыдущего пакета:

			Попытка ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, НомерПакета - 1); Исключение КонецПопытки;

			//2. регистрируем данные нового пакета:
			МассивКВыгрузке = ПолучитьПорциюТоваров(УзелПО, КоличествоТоваровВПорции);
			Если МассивКВыгрузке.Количество() Тогда				
				ПланыОбмена.ВыбратьИзменения(УзелПО, НомерПакета, МассивКВыгрузке);
			КонецЕсли;	

		КонецЕсли;	

		ОбъектСписка = СобратьТовары(МассивКВыгрузке, УзелПО,,, ПакетнаяВыгрузка); 

	КонецЕсли;

	Возврат ПодготовитьОтветJSON(ОбъектСписка);

КонецФункции

&ИзменениеИКонтроль("GetArtOnBC")
Функция РСК_GetArtOnBC(SN, UserName, Barcode)

	ОбъектСписка = Новый Массив();

	УзелПО = НайтиУзел(SN);	
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;  

	МассивТоваров = Новый Массив;

	Если УзелПО.ИспользоватьАртикулКакШтрихкодТовара Тогда



		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления";  
		Запрос.УстановитьПараметр("Артикул", Barcode);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивТоваров.Добавить(Выборка.Ссылка);		
		КонецЦикла;			

	КонецЕсли;	

	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрШтрихкодов.Номенклатура КАК Ссылка,
	|	РегистрШтрихкодов.Характеристика КАК СсылкаХарактеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК РегистрШтрихкодов
	|ГДЕ
	|	РегистрШтрихкодов.Штрихкод = &ШК");

	Запрос.УстановитьПараметр("ШК", Barcode);

	МассивТоваров_Запрос = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	МассивХарактеристик = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаХарактеристика");

	Для Каждого ЭлементМассива Из МассивТоваров_Запрос Цикл
		Если МассивТоваров.Найти(ЭлементМассива) = Неопределено Тогда
			МассивТоваров.Добавить(ЭлементМассива);	
		КонецЕсли;	
	КонецЦикла;
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрШтрихкодов.Номенклатура КАК Ссылка,
	|	РегистрШтрихкодов.Характеристика КАК СсылкаХарактеристика,
	|	РегистрШтрихкодов.Серия КАК СсылкаСерия
	|ИЗ
	|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК РегистрШтрихкодов
	|ГДЕ
	|	РегистрШтрихкодов.Штрихкод = &ШК");

	Запрос.УстановитьПараметр("ШК", Barcode);
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	МассивТоваров_Запрос = ТаблицаРезультатов.ВыгрузитьКолонку("Ссылка");
	МассивХарактеристик_Запрос = ТаблицаРезультатов.ВыгрузитьКолонку("СсылкаХарактеристика");
	МассивСерий = ТаблицаРезультатов.ВыгрузитьКолонку("СсылкаСерия");
	
	Для Каждого ЭлементМассива Из МассивТоваров_Запрос Цикл
		Если МассивТоваров.Найти(ЭлементМассива) = Неопределено Тогда
			МассивТоваров.Добавить(ЭлементМассива);	
		КонецЕсли;	
	КонецЦикла;
	Для Каждого ЭлементМассива Из МассивХарактеристик_Запрос Цикл
		Если МассивХарактеристик.Найти(ЭлементМассива) = Неопределено Тогда
			МассивХарактеристик.Добавить(ЭлементМассива);	
		КонецЕсли;	
	КонецЦикла;
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки

	Если МассивТоваров.Количество() > 0 Тогда
		ОбъектСписка = СобратьТовары(МассивТоваров, УзелПО, МассивХарактеристик);
	КонецЕсли;

	Возврат ПодготовитьОтветJSON(ОбъектСписка);

КонецФункции

&ИзменениеИКонтроль("UpdateBarcode")
Функция РСК_UpdateBarcode(SN, UserName, ArtID, Barcode)

	СтруктураОтвета = Новый Структура;

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		NewTSD(SN, UserName);  
	КонецЕсли;	

	СХарактеристикой = Ложь;
	ЭтоНовыйТовар = Ложь;
	Если Лев(ArtID, 3)= "8U-" Тогда

		лТовар = XMLЗначение(Тип("СправочникСсылка.Номенклатура"), Сред(ArtID, 4, 36));
		ИДХК = Сред(ArtID, 40, 36);

		Если ИДХК <> "00000000-0000-0000-0000-000000000000" Тогда
			лХарактеристикаНоменклатуры = XMLЗначение(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"), ИДХК);
			СХарактеристикой = Истина;
		Иначе
			лХарактеристикаНоменклатуры =Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;

	ИначеЕсли Лев(ArtID, 3)= "8n-" Тогда
		лТовар = XMLЗначение(Тип("СправочникСсылка.ДатаМобайл_НовыеТовары"), Сред(ArtID, 4));
		ЭтоНовыйТовар = Истина;
		лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
		Возврат ПодготовитьОтветJSON(Barcode); 
	КонецЕсли;	

	ШК = Barcode.Получить("value");
	Коэффициент = Barcode.Получить("unit_coef");

	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Упаковка,
	|	ШтрихкодыНоменклатуры.Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("ШтрихКод",ШК);

	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда // уже есть в списке шк
		Если Рез.Номенклатура = лТовар и Рез.Характеристика = лХарактеристикаНоменклатуры Тогда  
			Если ЗначениеЗаполнено(Рез.Упаковка) тогда
				Попытка
					ТекущийКоэффициент = ?(Рез.Упаковка.Числитель=0,1,Рез.Упаковка.Числитель)/?(Рез.Упаковка.Знаменатель=0,1,Рез.Упаковка.Знаменатель);
				Исключение
				КонецПопытки;	
			Иначе
				ТекущийКоэффициент = 1;
			КонецЕсли;	

			Если Коэффициент <> ТекущийКоэффициент тогда
				СтруктураОтвета.Вставить("Описание", "Не удалось обновить штрихкод. В 1С он принадлежит упаковке с коэффициентом : " + ТекущийКоэффициент + ", а введен коэффициент " + Коэффициент + ". Изменение коэффициентов упаковок из ТСД невозможно. ");
				Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
			КонецЕсли;

			Возврат ПодготовитьОтветJSON(Barcode); 
		Иначе		
			СтруктураОтвета.Вставить("Описание", "Не удалось добавить штрихкод. В 1С он принадлежит другому товару: " + Рез.Номенклатура + " " + Рез.Характеристика);		
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
		КонецЕсли;	
	КонецЕсли;
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Упаковка,
	|	ШтрихкодыНоменклатуры.Характеристика
	|ИЗ
	|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("ШтрихКод",ШК);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда // уже есть в списке шк
		Если Рез.Номенклатура = лТовар и Рез.Характеристика = лХарактеристикаНоменклатуры Тогда  
			Если ЗначениеЗаполнено(Рез.Упаковка) тогда
				Попытка
					ТекущийКоэффициент = ?(Рез.Упаковка.Числитель=0,1,Рез.Упаковка.Числитель)/?(Рез.Упаковка.Знаменатель=0,1,Рез.Упаковка.Знаменатель);
				Исключение
				КонецПопытки;	
			Иначе
				ТекущийКоэффициент = 1;
			КонецЕсли;	
			
			Если Коэффициент <> ТекущийКоэффициент тогда
				СтруктураОтвета.Вставить("Описание", "Не удалось обновить штрихкод. В 1С он принадлежит упаковке с коэффициентом : " + ТекущийКоэффициент + ", а введен коэффициент " + Коэффициент + ". Изменение коэффициентов упаковок из ТСД невозможно. ");
				Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
			КонецЕсли;
			
			Возврат ПодготовитьОтветJSON(Barcode); 
		Иначе		
			СтруктураОтвета.Вставить("Описание", "Не удалось добавить штрихкод. В 1С он принадлежит другому товару: " + Рез.Номенклатура + " " + Рез.Характеристика);		
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
		КонецЕсли;	
	КонецЕсли;
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки


	Если УзелПО.ЗаписьВРегистр И НЕ ЭтоНовыйТовар Тогда
		Если лТовар.ИспользоватьУпаковки Тогда

			ЗапросУпаковок = Новый Запрос;
			ЗапросУпаковок.УстановитьПараметр("Номенклатура", лТовар);
			ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокНоменклатура", лТовар.НаборУпаковок);
			ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокВидНоменклатуры", лТовар.ВидНоменклатуры.НаборУпаковок);
			ЗапросУпаковок.УстановитьПараметр("Коэффициент", Коэффициент);	
			ЗапросУпаковок.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	УпаковкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
			|ГДЕ
			|	УпаковкиНоменклатуры.Владелец = &Номенклатура
			|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
			|ОБЪЕДИНИТЬ
			|ВЫБРАТЬ
			|	УпаковкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
			|ГДЕ
			|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокНоменклатура
			|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
			|ОБЪЕДИНИТЬ
			|ВЫБРАТЬ
			|	УпаковкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
			|ГДЕ
			|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокВидНоменклатуры
			|	И УпаковкиНоменклатуры.Числитель = &Коэффициент";

			ВыборкаУпаковок = ЗапросУпаковок.Выполнить().Выбрать();                            
			лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();

			Пока ВыборкаУпаковок.Следующий() Цикл
				лУпак = ВыборкаУпаковок.ССылка;
				Прервать;
			КонецЦикла;

			Если  лУпак.Пустая() и Коэффициент<>1 Тогда			
				СтруктураОтвета.Вставить("Описание", "Не удалось добавить штрихкод. В 1С для товара не найдена упаковка с коэффициентом " + Коэффициент);		
				Возврат ПодготовитьОтветJSON(,СтруктураОтвета);			
			КонецЕсли;			

		Иначе
			лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;						   

		ЗаписьШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		ЗаписьШК.Номенклатура = лТовар;

		Если СокрЛП(лУпак.код) = "" Тогда
			ЗаписьШК.Упаковка = лУпак;
		КонецЕсли;


		ЗаписьШК.Штрихкод = ШК;	

		Если СХарактеристикой Тогда
			ЗаписьШК.Характеристика = лХарактеристикаНоменклатуры; 
		КонецЕсли;

		Попытка	
			ЗаписьШК.Записать(Истина);	
		Исключение
			СтруктураОтвета.Вставить("Описание", "Не удалось добавить штрихкод. " + ОписаниеОшибки());		
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
		КонецПопытки;

	Иначе
		лНЗ = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
		лНЗ.Отбор.ШтрихКод.Установить(ШК);
		лНЗ.Прочитать();
		лНЗ.Очистить();
		лШК = лНЗ.Добавить();

		лШК.Номенклатура   = лТовар;
		лШК.Характеристика = лХарактеристикаНоменклатуры;
		лШК.ШтрихКод       = ШК;
		лШК.Пользователь   = UserName;
		лШК.Наименование   = Barcode.Получить("unit_name");
		лШК.Коэффициент    = Barcode.Получить("unit_coef");
		Попытка
			лНЗ.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			лНЗ.ОбменДанными.Получатели.Заполнить();
			лНЗ.ОбменДанными.Получатели.Удалить(УзелПО);
			лНЗ.Записать(Истина);
		Исключение		
			СтруктураОтвета.Вставить("Описание", "Не удалось добавить штрихкод. " + ОписаниеОшибки());	
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);		
		Конецпопытки;	
	КонецЕсли;

	Возврат ПодготовитьОтветJSON(Barcode); 

КонецФункции

#КонецОбласти

#Область Docs

&ИзменениеИКонтроль("WriteDoc")
Функция РСК_WriteDoc(SN, UserName, СтруктураДокумента, isFinished) 
	
	СтруктураОтвета = Новый Структура;
	
	//Переменные Params
	СтруктураParams = Новый Структура;
	СтруктураParams.Вставить("isFinished", isFinished);

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	попытка
		СсылкаНаДок = XMLЗначение(Тип("СправочникСсылка.ДатаМобайл_ДокументыТСД"), Сред(СтруктураДокумента.id, 5));
	Исключение	
		Попытка
			СсылкаНаДок=СоздатьДокумент(SN, UserName,СтруктураДокумента.id, СтруктураДокумента.template.id);
		Исключение		
			СтруктураОтвета.Вставить("Описание", "Не найден документ. ");
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
		КонецПопытки;
		
		Если СсылкаНаДок = Неопределено тогда
			СтруктураОтвета.Вставить("Описание", "Не найден документ. ");
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
		КонецЕсли;			
	КонецПопытки;
	
	Шаблон=СсылкаНаДок.Шаблон;
	
	Если (Шаблон.БыстраяПриемка или Шаблон.БыстраяОтгрузка) и НЕ Шаблон.ВидДокументаНового = "ЗаказНаВнутреннееПотребление" Тогда
		Попытка
			Если СтруктураДокумента.client.id = "" Тогда		
				СтруктураОтвета.Вставить("Описание", "Не указан контрагент. ");		
				Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
			Иначе
				Попытка 
					ТекущийКлиент = XMLЗначение(Тип("СправочникСсылка.Партнеры"), Сред(СтруктураДокумента.client.id, 4));
					Если ТекущийКлиент.ПолучитьОбъект() = Неопределено Тогда
						СтруктураОтвета.Вставить("Описание", "Не указан контрагент. ");			
						Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
					Иначе
						
						Если Шаблон.БыстраяОтгрузка и НЕ ТекущийКлиент.Клиент Тогда					
							СтруктураОтвета.Вставить("Описание", "Указанный контрагент не является клиентом, быстрая отгрузка не возможна! ");					
							Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
						КонецЕсли;
					КонецЕсли;	
				Исключение	
					СтруктураОтвета.Вставить("Описание", "Не указан контрагент. ");			
					Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
				КонецПопытки;	
			КонецЕсли;
		Исключение
			СтруктураОтвета.Вставить("Описание", "Не указан контрагент. ");			
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
		КонецПопытки;
	КонецЕсли;

	Если Шаблон.БыстроеПеремещение <> 0 Тогда
		
		Модуль_СкладыСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СкладыСервер");
		
		НаименованиеСклада = "Склад";
		НаименованиеВторогоСкладаНаТСД = "Контрагент";
		
		//Получим склады для "Перемещение товаров" из автозагрузки
		ПараметрыОтбораОтправитель = Новый Структура;
		ПараметрыОтбораОтправитель.Вставить("ИмяРеквизита", "СкладОтправитель");
		НайденныеСтрокиОтправитель = Шаблон.НовыеЗначенияРеквизитов.НайтиСтроки(ПараметрыОтбораОтправитель);
		
		Попытка ТекущийСкладОтправитель = НайденныеСтрокиОтправитель[0].ЗначениеРеквизита; Исключение ТекущийСкладОтправитель =Неопределено; КонецПопытки; 
		
		ПараметрыОтбораПолучатель = Новый Структура;
		ПараметрыОтбораПолучатель.Вставить("ИмяРеквизита", "СкладПолучатель");
		НайденныеСтрокиОПолучатель = Шаблон.НовыеЗначенияРеквизитов.НайтиСтроки(ПараметрыОтбораПолучатель);
		
		Попытка ТекущийСкладПолучатель = НайденныеСтрокиОПолучатель[0].ЗначениеРеквизита;  Исключение ТекущийСкладПолучатель =Неопределено; КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекущийСкладОтправитель) И ЗначениеЗаполнено(ТекущийСкладПолучатель) Тогда
			НаименованиеВторогоСкладаНаТСД 	= "Склад получатель автозагрузки";
			НаименованиеСклада 				= "Склад отправитель автозагрузки";
		Иначе
			Попытка				
				Если Шаблон.ИспользоватьВторойСклад Тогда
					ТекущийСкладПолучатель = XMLЗначение(Тип("СправочникСсылка.Склады"), СтруктураДокумента.warehouse_2.id);
					НаименованиеВторогоСкладаНаТСД = "Склад получатель";
				Иначе
					ТекущийСкладПолучатель = XMLЗначение(Тип("СправочникСсылка.Склады"), Сред(СтруктураДокумента.client.id, 4));
				КонецЕсли;
				
				ТекущийСкладОтправитель = XMLЗначение(Тип("СправочникСсылка.Склады"), СтруктураДокумента.warehouse_1.id);			
			Исключение		
				СтруктураОтвета.Вставить("Описание", "Некорректно указан склад. ");			
				Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
			КонецПопытки;	
		КонецЕсли; 
		
		Попытка
			ИспользуетсяОрдернаяСхемаУСкладаПолучателя = Модуль_СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(ТекущийСкладПолучатель, ТекущаяДата())
				Или Модуль_СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(ТекущийСкладПолучатель, ТекущаяДата());
			
			ИспользуетсяОрдернаяСхемаУСкладаОтправителя = Модуль_СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(ТекущийСкладОтправитель, ТекущаяДата())
				Или Модуль_СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(ТекущийСкладОтправитель, ТекущаяДата());
		Исключение		
			СтруктураОтвета.Вставить("Описание", "Не удалось получить ордерную схему склада. ");			
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
		КонецПопытки;
			
		//1 = Перемещение «ордерный – не ордерный»
		//2 = Перемещение «не ордерный – ордерный»		
		ЭтоПеремещениеСОрдерныйНаНеОрдерный = Шаблон.БыстроеПеремещение = 1;												
		
		Если ЭтоПеремещениеСОрдерныйНаНеОрдерный Тогда 
			
			Если Не ИспользуетсяОрдернаяСхемаУСкладаОтправителя Тогда	
				СтруктураОтвета.Вставить("Описание", "В поле " + НаименованиеСклада + " указан не ордерный склад.");			
				Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
			КонецЕсли; 
			
			Если ИспользуетсяОрдернаяСхемаУСкладаПолучателя Тогда 						
				СтруктураОтвета.Вставить("Описание", "В поле " + НаименованиеВторогоСкладаНаТСД + " указан ордерный склад. ");			
				Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
			КонецЕсли;
			
		Иначе
			
			Если ИспользуетсяОрдернаяСхемаУСкладаОтправителя Тогда	
				СтруктураОтвета.Вставить("Описание", "В поле " + НаименованиеСклада + " указан ордерный склад. ");		
				Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
			КонецЕсли; 
			
			Если Не ИспользуетсяОрдернаяСхемаУСкладаПолучателя Тогда	
				СтруктураОтвета.Вставить("Описание", "В поле " + НаименованиеВторогоСкладаНаТСД + " указан не ордерный склад. ");				
				Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
			КонецЕсли;
			
		КонецЕсли;
		                                                           
	КонецЕсли;
	
	
	Если ссылканадок.ПолучитьОбъект()=неопределено Тогда		
		СтруктураОтвета.Вставить("Описание", "Не найден документ " + СтруктураДокумента.id);		
		Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
	КонецЕсли;	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД <> УзелПО Тогда
			СтруктураОтвета.Вставить("Описание", "Чужой документ.");		
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);		
		КонецЕсли;	
	КонецЕсли;	
	Если СсылкаНаДок.ДатаПриемкиОператором<>Дата(1,1,1) Тогда	
		СтруктураОтвета.Вставить("Описание", "Закрытый документ. ");	
		Возврат ПодготовитьОтветJSON(,СтруктураОтвета);	
	КонецЕсли;	

	Если НЕ Шаблон.ГрупповаяРабота Тогда
		Попытка
			Объект=СсылкаНаДок.ПолучитьОбъект();
			
			Если СсылкаНаДок.ДатаНачалаСбора = Дата(1,1,1) Тогда 		
				Для Каждого СтрокаДокумента из СтруктураДокумента.details.select цикл  
					Объект.ДатаНачалаСбора = СтрокаДокумента.date;
					Прервать;
				КонецЦикла;
				Если Объект.ДатаНачалаСбора=Дата(1,1,1) Тогда 
                	Объект.ДатаНачалаСбора = ТекущаяДата();
				КонецЕсли;
			КонецЕсли;

		Исключение
		КонецПопытки;
		
		Если Объект = неопределено Тогда	
			СтруктураОтвета.Вставить("Описание", "Не нашли документ. ");	
			Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
		КонецЕсли;
	Иначе
		Объект = Неопределено;
	КонецЕсли;	
	
		Для Каждого СтрокаДокумента Из СтруктураДокумента.details.select Цикл   
			
			//ПРОВЕРКА ДУБЛЕЙ
			Если ПроверитьЗаписи("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,Объект) тогда
				Продолжить;
			КонецЕсли;
			
			//ПРОВЕРКА СЕРИЙ/СЕРИЙНЫХ НОМЕРОВ
			Если СтрокаДокумента.sn<>"" и СтрокаДокумента.sn<>"[]" Тогда
				ШаблонПроверкиСерии = "";
				Если СерияНеПодходит(УзелПО,СсылкаНаДок,СтрокаДокумента,ШаблонПроверкиСерии) Тогда
					СтруктураОтвета.Вставить("Описание", "Серийный номер "+СтрокаДокумента.sn+" не соответсвует шаблону "+ШаблонПроверкиСерии);
					Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
				КонецЕсли;
			КонецЕсли;
			
			//СТРУКТУРА СТРОКИ
			СтруктураСтроки = ПолучитьСтруктуруСтрокиДокумента("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,UserName,Истина);
			
			//ПРОВЕРКА ПРИНАДЛЕЖНОСТИ ЯЧЕЙКИ К СКЛАДУ ДОКУМЕНТА
			Если ЗначениеЗаполнено(СтруктураСтроки.ЯчейкаСсылка) И НЕ СтруктураСтроки.Количество < 0 Тогда
				Если Шаблон.ГрупповаяРабота Тогда
					СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеекГрупповаяРабота(СсылкаНаДок);			
				Иначе
					СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеек(Объект.СобранныеДанныеПодбор.Выгрузить());
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СкладЯчеек) И НЕ СтруктураСтроки.ЯчейкаСсылка.Владелец = СкладЯчеек Тогда
					СтруктураОтвета.Вставить("Описание","Введены ячейки разных складов в одном документе, строка не может быть записана!");		
					Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
				КонецЕсли;
			КонецЕсли;
			
			//УдалениеЗначенийДополнительныхФорм
			Если СтруктураСтроки.Количество < 0 Тогда
				ДатаМобайл_ОбщийМодуль.УдалитьЗначениеФормыПоСтроке(СсылкаНаДок, СтруктураСтроки.ИдентификаторСтроки);
			КонецЕсли;
			
			//ПРЕВЫШЕНИЕ ПРИ ГРУППОВОЙ РАБОТЕ
			Если Шаблон.ГрупповаяРабота И Шаблон.ПриПревышенииЗаданияПодбор = 2 Тогда	
				Если ПроверитьПревышениеГрупповогоЗадания("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,СтруктураСтроки) Тогда
					СтруктураОтвета.Вставить("Описание", "Превышено задание по данной номенклатуре.");
					Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
				КонецЕсли;	
			КонецЕсли;

			//ЗАПИСЬ
			Если НЕ Шаблон.ГрупповаяРабота и НЕ Шаблон.БыстроеСканирование Тогда
				НоваяСтрока=Объект.СобранныеДанныеПодбор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураСтроки);
			Иначе 
				ДатаМобайл_ОбщийМодуль.СоздатьЗаписиГрупповогоДокумента(СтруктураСтроки);
			КонецЕсли;
			
			//ЗАПИСЬ МАРОК
			Если Шаблон.ЕГАИС Тогда
				Если СтрокаДокумента.egais.mark <> "" Тогда
					Если НЕ МаркаСерияУжеЕсть(СтрокаДокумента.egais.mark, СсылкаНаДок, Ложь) Тогда
						МенеджерЗаписиМарки = РегистрыСведений.ДатаМобайл_МаркиДляПроверки.СоздатьМенеджерЗаписи();
						МенеджерЗаписиМарки.Марка = СокрЛП(СтрокаДокумента.egais.mark);
						МенеджерЗаписиМарки.ЗаданиеТСД = СсылкаНаДок;
						МенеджерЗаписиМарки.Статус = Перечисления.ДатаМобайл_СтатусыПроверкиМарок.ОжидаетОтправки;
						МенеджерЗаписиМарки.Серия = "";
						Попытка МенеджерЗаписиМарки.НомерТТН = Объект.ИсходныйДокумент.Номер; Исключение КонецПопытки;
						Попытка МенеджерЗаписиМарки.УТМ = Объект.ИсходныйДокумент.УТМ; Исключение КонецПопытки;
						МенеджерЗаписиМарки.Завершен = Истина;
						МенеджерЗаписиМарки.Записать(Истина);
					Иначе
						НаборЗаписиМарок = РегистрыСведений.ДатаМобайл_МаркиДляПроверки.СоздатьНаборЗаписей();
						ЭлементОтбораЗадание = НаборЗаписиМарок.Отбор.Найти("ЗаданиеТСД");
						ЭлементОтбораЗадание.Использование = Истина;
						ЭлементОтбораЗадание.Значение = СсылкаНаДок;
						ЭлементОтбораЗадание.ВидСравнения = ВидСравнения.Равно;
						ЭлементОтбораМарка = НаборЗаписиМарок.Отбор.Найти("Марка");
						ЭлементОтбораМарка.Использование = Истина;
						ЭлементОтбораМарка.Значение = СокрЛП(СтрокаДокумента.egais.mark);
						ЭлементОтбораСтатус = НаборЗаписиМарок.Отбор.Найти("Статус");
						ЭлементОтбораСтатус.Использование = Истина;
						ЭлементОтбораСтатус.Значение = Перечисления.ДатаМобайл_СтатусыПроверкиМарок.ОжидаетОтправки;
						НаборЗаписиМарок.Прочитать();
						Для Каждого СтрокаНабораЗаписи ИЗ НаборЗаписиМарок Цикл
							Попытка СтрокаНабораЗаписи.НомерТТН = Объект.ИсходныйДокумент.Номер; Исключение КонецПопытки;
							Попытка СтрокаНабораЗаписи.УТМ = Объект.ИсходныйДокумент.УТМ; Исключение КонецПопытки;
							СтрокаНабораЗаписи.Завершен = Истина;
						КонецЦикла;
						НаборЗаписиМарок.Записать(Истина);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;

			
		КонецЦикла;	
		
		
		Для Каждого СтрокаДокумента из СтруктураДокумента.details.insert цикл
			
			//ПРОВЕРКА ДУБЛЕЙ
			Если ПроверитьЗаписи("Insert",УзелПО,СсылкаНаДок,СтрокаДокумента,Объект) Тогда
				Продолжить;
			КонецЕсли;
			
			//ПРОВЕРКА СЕРИЙ/СЕРИЙНЫХ НОМЕРОВ
			Если СтрокаДокумента.sn <> "" и СтрокаДокумента.sn <> "[]" Тогда
				ШаблонПроверкиСерии = "";
				Если СерияНеПодходит(УзелПО,СсылкаНаДок,СтрокаДокумента,ШаблонПроверкиСерии) Тогда	
					СтруктураОтвета.Вставить("Описание", "Серийный номер "+СтрокаДокумента.sn + " не соответсвует шаблону "+ШаблонПроверкиСерии);
					Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
				КонецЕсли;
			КонецЕсли;

			//СТРУКТУРА СТРОКИ
			СтруктураСтроки = ПолучитьСтруктуруСтрокиДокумента("Insert", УзелПО, СсылкаНаДок, СтрокаДокумента, UserName, Истина);
			
			//ПРОВЕРКА ПРИНАДЛЕЖНОСТИ ЯЧЕЙКИ К СКЛАДУ ДОКУМЕНТА
			Если ЗначениеЗаполнено(СтруктураСтроки.ЯчейкаСсылка) И НЕ СтруктураСтроки.Количество < 0 Тогда
				Если Шаблон.ГрупповаяРабота Тогда
					СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеекГрупповаяРабота(СсылкаНаДок);			
				Иначе
					СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеек(Объект.СобранныеДанныеПриемка.Выгрузить());
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СкладЯчеек) И НЕ СтруктураСтроки.ЯчейкаСсылка.Владелец = СкладЯчеек Тогда
					СтруктураОтвета.Вставить("Описание","Введены ячейки разных складов в одном документе, строка не может быть записана!");		
					Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
				КонецЕсли;
			КонецЕсли;
			
			//УдалениеЗначенийДополнительныхФорм
			Если СтруктураСтроки.Количество < 0 Тогда
				ДатаМобайл_ОбщийМодуль.УдалитьЗначениеФормыПоСтроке(СсылкаНаДок, СтруктураСтроки.ИдентификаторСтроки);
			КонецЕсли;
			
			//ПРЕВЫШЕНИЕ ПРИ ГРУППОВОЙ РАБОТЕ
			Если Шаблон.ГрупповаяРабота И Шаблон.ПриПревышенииЗаданияПодбор = 2 Тогда	
				Если ПроверитьПревышениеГрупповогоЗадания("Insert", УзелПО, СсылкаНаДок, СтрокаДокумента, СтруктураСтроки) Тогда	
					СтруктураОтвета.Вставить("Описание", "Превышено задание по данной номенклатуре.");
					Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
				КонецЕсли;	
			КонецЕсли;
			
			//ЗАПИСЬ
			Если НЕ Шаблон.ГрупповаяРабота и НЕ Шаблон.БыстроеСканирование Тогда
				НоваяСтрока=Объект.СобранныеДанныеПриемка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураСтроки);
			Иначе 
				ДатаМобайл_ОбщийМодуль.СоздатьЗаписиГрупповогоДокумента(СтруктураСтроки);
			КонецЕсли;

		КонецЦикла;	
		
		
		Если НЕ Шаблон.ГрупповаяРабота Тогда
			
			Если isFinished Тогда
				Объект.ДатаЗавершенияСбора=ТекущаяДата();
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				//Если ТипЗнч(Объект.ИсходныйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров")
				//	Или ТипЗнч(Объект.ИсходныйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
				//	
				//	Объект.ДатаПриемкиОператором=ТекущаяДата();
				//	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Истина;			
				//	Для Каждого СтрТЧ из Объект.СобранныеДанныеПодбор цикл
				//		Обработки.ДатаМобайл_АРМДиспетчера.УстановитьЕдиницу(СтрТЧ);
				//	КонецЦикла;	
				//	Для Каждого СтрТЧ из Объект.СобранныеДанныеПриемка цикл
				//		Обработки.ДатаМобайл_АРМДиспетчера.УстановитьЕдиницу(СтрТЧ);
				//	КонецЦикла
				//КонецЕсли;
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки
			КонецЕсли;
			
			Объект.ТСД = УзелПО;
			Объект.Номер = СтруктураДокумента.number;
			Объект.Дата = СтруктураДокумента.date;
			Объект.Комментарий = СтруктураДокумента.comment;
			//Объект.ДатаИзмененияКлиента = DocHead.DMClientSelectDate;
			
			Если Объект.ДатаИзмененияКлиента <> Дата(1,1,1) Тогда
				Попытка
					
					ИДКлиента = Новый УникальныйИдентификатор(Сред(СтруктураДокумента.client.id, 4));
					
					Если НЕ Шаблон.МножествоДокументовКакЗадание Тогда
						
						Если Объект.Клиент.ПолучитьОбъект() = Неопределено Тогда
							Объект.Клиент = Справочники.Склады.ПолучитьСсылку(ИДКлиента);
						КонецЕсли;				
						
						Если Объект.Клиент.ПолучитьОбъект() = Неопределено и ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() Тогда
							Объект.Клиент = Справочники.ОрганизацииМДЛП.ПолучитьСсылку(ИДКлиента);	
						КонецЕсли;
						
						Если Объект.Клиент.ПолучитьОбъект() = Неопределено Тогда
							Объект.Клиент = Справочники.СтруктураПредприятия.ПолучитьСсылку(ИДКлиента);
						КонецЕсли;
						
					КонецЕсли;
				Исключение
				Конецпопытки;
			КонецЕсли;
			
			Попытка 
				Если ЗначениеЗаполнено(СтруктураДокумента.warehouse_1.id) Тогда	
					Объект.Склад = XMLЗначение(Тип("СправочникСсылка.Склады"), СтруктураДокумента.warehouse_1.id);
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			Попытка
				Если ЗначениеЗаполнено(СтруктураДокумента.warehouse_2.id) Тогда
					Объект.СкладПолучатель = XMLЗначение(Тип("СправочникСсылка.Склады"), СтруктураДокумента.warehouse_2.id);
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			Попытка 							
				Объект.Записать();
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				//Если isFinished Тогда
				//	Если ТипЗнч(Объект.ИсходныйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
				//		ДокументРезультат = Обработки.ДатаМобайл_АРМДиспетчера.ВнестиДокументВБазу(Объект, "");
				//		Если ТипЗнч(ДокументРезультат.Распоряжение) = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
				//			И ДокументРезультат.Распоряжение.Статус = Перечисления.СтатусыРасходныхОрдеров.КПроверке Тогда
				//			
				//			ШаблонДокумента = реа_ОбщийСерверПовтИсп.ПолучитьПредопределенноеЗначение("РС_ШаблонРОТТСД");
				//			
				//			Запрос = Новый Запрос(
				//			"ВЫБРАТЬ
				//			|	ДатаМобайл_ДокументыТСД.ИсходныйДокумент КАК ИсходныйДокумент,
				//			|	МАКСИМУМ(ДатаМобайл_ДокументыТСД.Ссылка) КАК Ссылка
				//			|ИЗ
				//			|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
				//			|ГДЕ
				//			|	ДатаМобайл_ДокументыТСД.ИсходныйДокумент = &ИсходныйДокумент
				//			|	И НЕ ДатаМобайл_ДокументыТСД.ПометкаУдаления
				//			|
				//			|СГРУППИРОВАТЬ ПО
				//			|	ДатаМобайл_ДокументыТСД.ИсходныйДокумент");	
				//			Запрос.УстановитьПараметр("ИсходныйДокумент", ДокументРезультат.Распоряжение);
				//			
				//			
				//			РезультатЗапроса = Запрос.Выполнить();
				//			Если РезультатЗапроса.Пустой() Тогда
				//				ДокументТСД = Справочники.ДатаМобайл_ДокументыТСД.СоздатьЭлемент()						
				//			Иначе
				//				Выборка = РезультатЗапроса.Выбрать();
				//				Выборка.Следующий();
				//				ДокументТСД = Выборка.Ссылка.ПолучитьОбъект()
				//			КонецЕсли;
				//			
				//			ДокументТСД.ИсходныйДокумент = ДокументРезультат.Распоряжение;
				//			ДокументТСД.СписокТерминалов.Очистить();
				//			ДокументТСД.Комментарий = ДокументРезультат.Распоряжение.Комментарий;			
				//			ДокументТСД.Шаблон = ШаблонДокумента;
				//			ДокументТСД.Приоритет = 0;
				//			
				//			Попытка
				//				ДокументТСД.Записать()	
				//			Исключение
				//				Сообщить(ОписаниеОшибки())
				//			КонецПопытки
				//		КонецЕсли
				//	ИначеЕсли ТипЗнч(Объект.ИсходныйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
				//		ДокументРезультат = Обработки.ДатаМобайл_АРМДиспетчера.ВнестиДокументВБазу(Объект, "")
				//	КонецЕсли
				//КонецЕсли;
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки
			Исключение	
				СтруктураОтвета.Вставить("Описание", "Ошибка записи. " + ОписаниеОшибки());	
				Возврат ПодготовитьОтветJSON(,СтруктураОтвета);	
			КонецПопытки;	
		Иначе
			
			ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаНачалаСбора");	
			Если Не ЗначениеЗаполнено(ДатаСбораПоТСД) Тогда	
				ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(SN, СсылкаНаДок, UserName);		
			КонецЕсли;

		Попытка
			Если СсылкаНаДок.ДатаНачалаСбора=Дата(1,1,1) Тогда
				Объект=СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора=ТекущаяДата();
				Объект.Записать();
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если isFinished Тогда
			ДатаЗавершенияПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаЗавершенияСбора");
			Если (ДатаЗавершенияПоТСД = Неопределено) ИЛИ (ДатаЗавершенияПоТСД = Дата(1,1,1)) Тогда
				ДатаМобайл_ОбщийМодуль.ОбновитьЗаписьТСДГрупповогоДокумента(SN,СсылкаНаДок,ТекущаяДата());	
			КонецЕсли;
			
			Если ДатаМобайл_ОбщийМодуль.ПроверитьЗавершенностьГрупповогоДокумента(СсылкаНаДок) Тогда
				Попытка
					Объект=СсылкаНаДок.ПолучитьОбъект();
					Объект.ДатаЗавершенияСбора=ТекущаяДата();
					
					Попытка
						Если ЗначениеЗаполнено(СтруктураДокумента.warehouse_1.id) Тогда
							Объект.Склад = XMLЗначение(Тип("СправочникСсылка.Склады"), СтруктураДокумента.warehouse_1.id);
						КонецЕсли;
					Исключение 
					КонецПопытки;
					
					Попытка
						Если ЗначениеЗаполнено(СтруктураДокумента.warehouse_2.id) Тогда
							Объект.СкладПолучатель = XMLЗначение(Тип("СправочникСсылка.Склады"), СтруктураДокумента.warehouse_2.id);
 						КонецЕсли;	
					Исключение 
					КонецПопытки;
				
					Объект.Записать();
				Исключение		
					СтруктураОтвета.Вставить("Описание", "Ошибка записи. " + ОписаниеОшибки());
					Возврат ПодготовитьОтветJSON(,СтруктураОтвета);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	СтруктураОтвета.Вставить("is_success", Истина);
	
	Возврат ПодготовитьОтветJSON(СтруктураОтвета);

КонецФункции

#КонецОбласти

#Область ВспомогательныеПродедурыИФункции

#Область OnArtScan_OnArtMarkScan

&ИзменениеИКонтроль("OnArtScan_Select_Insert_Cells")
Процедура РСК_OnArtScan_Select_Insert_Cells(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, Тип, Ячейка)

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Упаковка.ЕдиницаИзмерения.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры.Упаковка.Числитель = 0
	|				ИЛИ ШтрихкодыНоменклатуры.Упаковка.Числитель ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Числитель
	|	КОНЕЦ / ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры.Упаковка.Знаменатель = 0
	|				ИЛИ ШтрихкодыНоменклатуры.Упаковка.Знаменатель ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Знаменатель
	|	КОНЕЦ КАК Коэффициент
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	,ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЛОЖЬ КАК ШтрихкодыССериями
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|ПОМЕСТИТЬ ДоступныеТовары
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	(ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|			ИЛИ ШтрихкодыНоменклатуры.Штрихкод = &ВесовойШтрихкод)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатаМобайл_НовыеШтрихкоды.Номенклатура,
	|	ДатаМобайл_НовыеШтрихкоды.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|	ДатаМобайл_НовыеШтрихкоды.ШтрихКод,
	|	ДатаМобайл_НовыеШтрихкоды.Наименование,
	|	ДатаМобайл_НовыеШтрихкоды.Коэффициент
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	,ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ЛОЖЬ
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|ИЗ
	|	РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
	|ГДЕ
	|	ДатаМобайл_НовыеШтрихкоды.ШтрихКод = &Штрихкод
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДСТ_ШтрихкодыСерий.Номенклатура КАК Номенклатура,
	|	ДСТ_ШтрихкодыСерий.Характеристика КАК Характеристика,
	|	ДСТ_ШтрихкодыСерий.Упаковка КАК Упаковка,
	|	ДСТ_ШтрихкодыСерий.Штрихкод КАК Штрихкод,
	|	ДСТ_ШтрихкодыСерий.Упаковка.ЕдиницаИзмерения.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ДСТ_ШтрихкодыСерий.Упаковка.Числитель = 0
	|				ИЛИ ДСТ_ШтрихкодыСерий.Упаковка.Числитель ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ДСТ_ШтрихкодыСерий.Упаковка.Числитель
	|	КОНЕЦ / ВЫБОР
	|		КОГДА ДСТ_ШтрихкодыСерий.Упаковка.Знаменатель = 0
	|				ИЛИ ДСТ_ШтрихкодыСерий.Упаковка.Знаменатель ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ДСТ_ШтрихкодыСерий.Упаковка.Знаменатель
	|	КОНЕЦ КАК Коэффициент,
	|	ДСТ_ШтрихкодыСерий.Серия,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ДСТ_ШтрихкодыСерий
	|ГДЕ
	|	(ДСТ_ШтрихкодыСерий.Штрихкод = &Штрихкод
	|			ИЛИ ДСТ_ШтрихкодыСерий.Штрихкод = &ВесовойШтрихкод)
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыСРезервамиТСД
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ	
	|	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
	|		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД 
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.СерияСсылка КАК Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
	|ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
	|ИЗ
	|	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД 
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.СерияСсылка,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ДоступныеТовары.Серия КАК Серия,			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество * (ВЫБОР
	|							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель = 0
	|									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
	|								ТОГДА 1
	|							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель
	|						КОНЕЦ / ВЫБОР
	|							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель = 0
	|									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
	|								ТОГДА 1
	|							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель
	|						КОНЕЦ), 0)) КАК ВРезервеТСД
	|ПОМЕСТИТЬ ТоварыСРезервамиТСД
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|		ПО ДоступныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	|			И ДоступныеТовары.Упаковка = ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	|				И ДоступныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|				И ВЫБОР КОГДА ДоступныеТовары.ШтрихкодыССериями ТОГДА ДоступныеТовары.Серия = ДатаМобайл_ДокументыТСДСобранныеДанные.Серия ИНАЧЕ ИСТИНА КОНЕЦ			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки



	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Упаковка,
	|	ДоступныеТовары.Характеристика,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ДоступныеТовары.Серия,			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДоступныеТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток * (ВЫБОР
	|				КОГДА ТоварыВЯчейкахОстатки.Упаковка.Числитель = 0
	|						ИЛИ ТоварыВЯчейкахОстатки.Упаковка.Числитель ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ ТоварыВЯчейкахОстатки.Упаковка.Числитель
	|			КОНЕЦ / ВЫБОР
	|				КОГДА ТоварыВЯчейкахОстатки.Упаковка.Знаменатель = 0
	|						ИЛИ ТоварыВЯчейкахОстатки.Упаковка.Знаменатель ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ ТоварыВЯчейкахОстатки.Упаковка.Знаменатель
	|			КОНЕЦ), 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.КОтборуОстаток * (ВЫБОР
	|				КОГДА ТоварыВЯчейкахОстатки.Упаковка.Числитель = 0
	|						ИЛИ ТоварыВЯчейкахОстатки.Упаковка.Числитель ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ ТоварыВЯчейкахОстатки.Упаковка.Числитель
	|			КОНЕЦ / ВЫБОР
	|				КОГДА ТоварыВЯчейкахОстатки.Упаковка.Знаменатель = 0
	|						ИЛИ ТоварыВЯчейкахОстатки.Упаковка.Знаменатель ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ ТоварыВЯчейкахОстатки.Упаковка.Знаменатель
	|			КОНЕЦ), 0)) КАК ВРезерве,
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ДоступныеТовары.Серия КАК Серия,			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДоступныеТовары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТоварыСОстатками1С
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
	|				,
	|				(&ВсеЯчейки
	|					ИЛИ Ячейка = &Ячейка)) КАК ТоварыВЯчейкахОстатки
	|		ПО ДоступныеТовары.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			И ДоступныеТовары.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|			И ВЫБОР КОГДА ДоступныеТовары.ШтрихкодыССериями ТОГДА ДоступныеТовары.Серия = ТоварыВЯчейкахОстатки.Серия ИНАЧЕ ИСТИНА КОНЕЦ			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Характеристика,
	|	ДоступныеТовары.Номенклатура,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ДоступныеТовары.Серия,			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДоступныеТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ДоступныеТовары.Серия КАК Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ВЫБОР
	|				КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
	|			КОНЕЦ КАК ЧИСЛО(19, 2))) КАК Цена
	|ПОМЕСТИТЬ ТоварыСЦенами
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ДоступныеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Номенклатура,
	|	ДоступныеТовары.Характеристика,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ДоступныеТовары.Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДоступныеТовары.Упаковка
	|;
	|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	Ячейки.Номенклатура КАК Номенклатура,
	//|	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
	//|ПОМЕСТИТЬ СписокЯчеек
	//|ИЗ
	//|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Ячейки.Номенклатура
	//|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ДоступныеТовары.Серия КАК Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	0 КАК ВЗадании,
	|	ТоварыСОстатками1С.ВНаличии КАК ВНаличии,
	|	ТоварыСОстатками1С.ВРезерве КАК ВРезерве,
	|	ТоварыСРезервамиТСД.ВРезервеТСД КАК ВРезервеТСД,
	|	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена,
	//|	ЕСТЬNULL(СписокЯчеек.АдресХранения, """") КАК АдресХранения,
	|	ЕСТЬNULL(ДоступныеТовары.Наименование, ДоступныеТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
	|	ЕСТЬNULL(ДоступныеТовары.Коэффициент, 1) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА &ВключатьАртикул
	|				И ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ДоступныеТовары.Номенклатура.Артикул + ""-""
	|		ИНАЧЕ """"
	|	КОНЕЦ + ДоступныеТовары.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ДоступныеТовары.Характеристика.Наименование, """") КАК НаименованиеТовара,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(справочник.номенклатура)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоНовыйТовар
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
	|		ПО ДоступныеТовары.Характеристика = ТоварыСРезервамиТСД.Характеристика
	|			И ДоступныеТовары.Номенклатура = ТоварыСРезервамиТСД.Номенклатура
	|			И ДоступныеТовары.Упаковка = ТоварыСРезервамиТСД.Упаковка
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|			И ДоступныеТовары.Серия = ТоварыСРезервамиТСД.Серия			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
	|		ПО ДоступныеТовары.Номенклатура = ТоварыСОстатками1С.Номенклатура
	|			И ДоступныеТовары.Характеристика = ТоварыСОстатками1С.Характеристика
	|			И ДоступныеТовары.Упаковка = ТоварыСОстатками1С.Упаковка
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|			И ДоступныеТовары.Серия = ТоварыСОстатками1С.Серия			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
	|		ПО ДоступныеТовары.Номенклатура = ТоварыСЦенами.Номенклатура
	|			И ДоступныеТовары.Характеристика = ТоварыСЦенами.Характеристика
	|			И ДоступныеТовары.Упаковка = ТоварыСЦенами.Упаковка
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|			И ДоступныеТовары.Серия = ТоварыСЦенами.Серия			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
	//|		ПО ДоступныеТовары.Номенклатура = СписокЯчеек.Номенклатура
	|";

	СкорректироватьЗапросПоЦенообразованию25(Запрос.Текст, "OnArtScan_Select_Insert_Cells");

	Запрос.Текст=СтрЗаменить(Запрос.Текст,".ОтборРазмещениеТоваров.","."+Шаблон.ВидДокумента+".");

	Если УзелПО.ИспользоватьАртикулКакШтрихкодТовара Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	ДатаМобайл_НовыеШтрихкоды.ШтрихКод = &Штрихкод",
		"	ДатаМобайл_НовыеШтрихкоды.ШтрихКод = &Штрихкод
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
		|	Номенклатура.Артикул,
		|	Номенклатура.Ссылка.ЕдиницаИзмерения.Наименование,
		|	1
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	,ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|	ГДЕ 
		|	 НЕ Номенклатура.ПометкаУдаления
		|	 И НЕ Номенклатура.ЭтоГруппа
		|	 И Номенклатура.Артикул = &Штрихкод");

	КонецЕсли;	

	//ТекущаяЯчейкаСсылка = ?(УзелПО.ВыгружатьВКодЯчейки=1,Справочники.СкладскиеЯчейки.НайтиПоКоду(Ячейка), ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоШтрихкоду(Ячейка));
	ТекущаяЯчейкаСсылка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Ячейка,СсылкаНаДок);

	Запрос.УстановитьПараметр("Ячейка",ТекущаяЯчейкаСсылка);
	Запрос.УстановитьПараметр("ВсеЯчейки",Ложь);

	Если Тип = "Select" Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ТоварыОтбор КАК","."+Шаблон.ИмяТабличнойЧастиПодбор+" КАК");
	Иначе 
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ТоварыОтбор КАК","."+Шаблон.ИмяТабличнойЧастиПриемка+" КАК");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор","Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка");	
	КонецЕсли;


КонецПроцедуры

&ИзменениеИКонтроль("OnArtScan_Select_Insert_Casual")
Процедура РСК_OnArtScan_Select_Insert_Casual(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, Тип)

	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	РеквизитыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,"ВидДокумента,ИмяТабличнойЧастиПодбор,ИмяТабличнойЧастиПриемка");

	ВидДокумента 				= РеквизитыШаблона.ВидДокумента;
	ИмяТабличнойЧастиПодбор 	= РеквизитыШаблона.ИмяТабличнойЧастиПодбор;
	ИмяТабличнойЧастиПриемка 	= РеквизитыШаблона.ИмяТабличнойЧастиПриемка;

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Упаковка.ЕдиницаИзмерения.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры.Упаковка.Числитель = 0
	|				ИЛИ ШтрихкодыНоменклатуры.Упаковка.Числитель ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Числитель
	|	КОНЕЦ / ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры.Упаковка.Знаменатель = 0
	|				ИЛИ ШтрихкодыНоменклатуры.Упаковка.Знаменатель ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Знаменатель
	|	КОНЕЦ КАК Коэффициент
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	,ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЛОЖЬ КАК ШтрихкодыССериями
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|ПОМЕСТИТЬ ДоступныеТовары
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	(ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|			ИЛИ ШтрихкодыНоменклатуры.Штрихкод = &ВесовойШтрихкод)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатаМобайл_НовыеШтрихкоды.Номенклатура,
	|	ДатаМобайл_НовыеШтрихкоды.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|	ДатаМобайл_НовыеШтрихкоды.ШтрихКод,
	|	ДатаМобайл_НовыеШтрихкоды.Наименование,
	|	ДатаМобайл_НовыеШтрихкоды.Коэффициент
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	,ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ЛОЖЬ
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|ИЗ
	|	РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
	|ГДЕ
	|	ДатаМобайл_НовыеШтрихкоды.ШтрихКод = &Штрихкод
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДСТ_ШтрихкодыСерий.Номенклатура КАК Номенклатура,
	|	ДСТ_ШтрихкодыСерий.Характеристика КАК Характеристика,
	|	ДСТ_ШтрихкодыСерий.Упаковка КАК Упаковка,
	|	ДСТ_ШтрихкодыСерий.Штрихкод КАК Штрихкод,
	|	ДСТ_ШтрихкодыСерий.Упаковка.ЕдиницаИзмерения.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ДСТ_ШтрихкодыСерий.Упаковка.Числитель = 0
	|				ИЛИ ДСТ_ШтрихкодыСерий.Упаковка.Числитель ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ДСТ_ШтрихкодыСерий.Упаковка.Числитель
	|	КОНЕЦ / ВЫБОР
	|		КОГДА ДСТ_ШтрихкодыСерий.Упаковка.Знаменатель = 0
	|				ИЛИ ДСТ_ШтрихкодыСерий.Упаковка.Знаменатель ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ДСТ_ШтрихкодыСерий.Упаковка.Знаменатель
	|	КОНЕЦ КАК Коэффициент,
	|	ДСТ_ШтрихкодыСерий.Серия КАК Серия,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ДСТ_ШтрихкодыСерий
	|ГДЕ
	|	(ДСТ_ШтрихкодыСерий.Штрихкод = &Штрихкод
	|			ИЛИ ДСТ_ШтрихкодыСерий.Штрихкод = &ВесовойШтрихкод)
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка,
	|	ВЫБОР КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.) ИНАЧЕ ХарактеристикиНоменклатуры.Ссылка Конец,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|	Номенклатура.Артикул,
	|	Номенклатура.ЕдиницаИзмерения.Наименование,
	|	1
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	,ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ЛОЖЬ
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец)
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыСРезервамиТСД
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ	
	|	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
	|		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД 
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.СерияСсылка КАК Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
	|ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
	|ИЗ
	|	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД 
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.СерияСсылка,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД 
	|	ДоступныеТовары.Серия КАК Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество * (ВЫБОР
	|							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель = 0
	|									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
	|								ТОГДА 1
	|							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель
	|						КОНЕЦ / ВЫБОР
	|							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель = 0
	|									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
	|								ТОГДА 1
	|							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель
	|						КОНЕЦ), 0)) КАК ВРезервеТСД
	|ПОМЕСТИТЬ ТоварыСРезервамиТСД
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|		ПО ДоступныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	|			И ДоступныеТовары.Упаковка = ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	|				И ДоступныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|				И ВЫБОР КОГДА ДоступныеТовары.ШтрихкодыССериями ТОГДА ДоступныеТовары.Серия = ДатаМобайл_ДокументыТСДСобранныеДанные.Серия ИНАЧЕ ИСТИНА КОНЕЦ			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки



	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Упаковка,
	|	ДоступныеТовары.Характеристика,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД 
	|	ДоступныеТовары.Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДоступныеТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД 
	|	ДоступныеТовары.Серия КАК Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДоступныеТовары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТоварыСОстатками1С
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(&ВсеСклады
	|					ИЛИ Склад В (&Склады))
	|				И (&ВсеПомещения
	|					ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
	|		ПО ДоступныеТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	|			И ДоступныеТовары.Характеристика = СвободныеОстаткиОстатки.Характеристика
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|				И ВЫБОР КОГДА ДоступныеТовары.ШтрихкодыССериями ТОГДА ДоступныеТовары.Серия = СвободныеОстаткиОстатки.Серия ИНАЧЕ ИСТИНА КОНЕЦ			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Характеристика,
	|	ДоступныеТовары.Номенклатура,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД 
	|	ДоступныеТовары.Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДоступныеТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ДоступныеТовары.Серия КАК Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ВЫБОР
	|				КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
	|			КОНЕЦ КАК ЧИСЛО(19, 2))) КАК Цена
	|ПОМЕСТИТЬ ТоварыСЦенами
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ДоступныеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Номенклатура,
	|	ДоступныеТовары.Характеристика,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ДоступныеТовары.Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ДоступныеТовары.Упаковка
	|;
	|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	Ячейки.Номенклатура КАК Номенклатура,
	//|	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
	//|ПОМЕСТИТЬ СписокЯчеек
	//|ИЗ
	//|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Ячейки.Номенклатура
	//|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ДоступныеТовары.Серия КАК Серия,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	0 КАК ВЗадании,
	|	ТоварыСОстатками1С.ВНаличии КАК ВНаличии,
	|	ТоварыСОстатками1С.ВРезерве КАК ВРезерве,
	|	ТоварыСРезервамиТСД.ВРезервеТСД КАК ВРезервеТСД,
	|	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена,
	//|	ЕСТЬNULL(СписокЯчеек.АдресХранения, """") КАК АдресХранения,
	|	ЕСТЬNULL(ДоступныеТовары.Наименование, ДоступныеТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
	|	ЕСТЬNULL(ДоступныеТовары.Коэффициент, 1) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА &ВключатьАртикул
	|				И ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ВЫБОР
	|					КОГДА ДоступныеТовары.Номенклатура.Артикул = """"
	|						ТОГДА """"
	|					ИНАЧЕ ДоступныеТовары.Номенклатура.Артикул + "" ""
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ + ДоступныеТовары.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ДоступныеТовары.Характеристика.Наименование, """") КАК НаименованиеТовара,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(справочник.номенклатура)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоНовыйТовар
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
	|		ПО ДоступныеТовары.Характеристика = ТоварыСРезервамиТСД.Характеристика
	|			И ДоступныеТовары.Номенклатура = ТоварыСРезервамиТСД.Номенклатура
	|			И ДоступныеТовары.Упаковка = ТоварыСРезервамиТСД.Упаковка
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|			И ДоступныеТовары.Серия = ТоварыСРезервамиТСД.Серия			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
	|		ПО ДоступныеТовары.Номенклатура = ТоварыСОстатками1С.Номенклатура
	|			И ДоступныеТовары.Характеристика = ТоварыСОстатками1С.Характеристика
	|			И ДоступныеТовары.Упаковка = ТоварыСОстатками1С.Упаковка
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|			И ДоступныеТовары.Серия = ТоварыСОстатками1С.Серия			
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
	|		ПО ДоступныеТовары.Номенклатура = ТоварыСЦенами.Номенклатура
	|			И ДоступныеТовары.Характеристика = ТоварыСЦенами.Характеристика
	|			И ДоступныеТовары.Упаковка = ТоварыСЦенами.Упаковка
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|			И ДоступныеТовары.Серия = ТоварыСЦенами.Серия
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
	//|		ПО ДоступныеТовары.Номенклатура = СписокЯчеек.Номенклатура
	|";

	СкорректироватьЗапросПоЦенообразованию25(Запрос.Текст, "OnArtScan_Select_Insert_Casual");

	Запрос.Текст=СтрЗаменить(Запрос.Текст,".ПриобретениеТоваровУслуг.","."+ВидДокумента+".");

	Если ВидДокумента = "ОприходованиеИзлишковТоваров" или ВидДокумента = "СписаниеНедостачТоваров" ИЛИ (ВидДокумента = "РасходныйОрдерНаТовары" И ИмяТабличнойЧастиПодбор = "ТоварыПоРаспоряжениям")  Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ДоступныеТовары.Упаковка = Документ1С.Упаковка", "ИСТИНА");	
	КонецЕсли;

	Если ВидДокумента = "ПеремаркировкаТоваровИСМП" Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ДоступныеТовары.Упаковка = Документ1С.Упаковка", "ИСТИНА");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Документ1С.Количество", 0);
	КонецЕсли; 

	Если Тип = "Select" Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК","."+ИмяТабличнойЧастиПодбор+" КАК");
	Иначе 
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК","."+ИмяТабличнойЧастиПриемка+" КАК");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор","Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка");	
	КонецЕсли;


КонецПроцедуры

#КонецОбласти

#Область SendArtToPrint

&ИзменениеИКонтроль("ВыполнитьПечатьОбычныхТоваров")
Процедура РСК_ВыполнитьПечатьОбычныхТоваров(УзелПО, лТовар, лХарактеристика, Barcode, Count, СтруктураParams, ОписаниеОшибки)

	СтруктураОтвета = Новый Структура;		

	//Если СтруктураParams.IsNeedPrintCopy = "Да" Тогда
	//КонецЕсли;

	СтруктураПоиска = Новый Структура("ТипОперации", "Печать этикетки");
	СтрокиРеквизитов = УзелПО.Печать.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРеквизитов.Количество() = 0 тогда
		ОписаниеОшибки = "В обработке АРМ для терминала не указан шаблон печати упак. листа. ";
		Возврат;
	КонецЕсли;	

	ЗаписьXML = Новый ЗаписьXML;

	Если НЕ УзелПО.ОнлайнСвязьСПринтсервером тогда
		КаталогСохранения = УзелПО.КаталогВыгрузкиФайлаПечати;
		ИмяФайла = ПолучитьНовоеИмяФайла();	
		Попытка
			ЗаписьXML.ОткрытьФайл(КаталогСохранения+ИмяФайла+".xml", "UTF-8");
		Исключение
			ОписаниеОшибки = "Не удалось сохранить файл печати в каталоге: "+КаталогСохранения+" по причине: " + ОписаниеОшибки();
			Возврат;
		КонецПопытки;
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;


	ЗаписьXML.ЗаписатьОбъявлениеXML();	

	ЗаписьXML.ЗаписатьНачалоЭлемента("PrintData");

	ЗаписатьЭлементXML(ЗаписьXML, "PrinterName", СтрокиРеквизитов[0].ИмяПринтера);
	ЗаписатьЭлементXML(ЗаписьXML, "TemplateName", СтрокиРеквизитов[0].ИмяШаблона);
	ЗаписатьЭлементXML(ЗаписьXML, "Count", СтрокиРеквизитов[0].КоличествоКопий*Count);		

	ЗаписьXML.ЗаписатьНачалоЭлемента("Head");


	ЗаписатьЭлементXML(ЗаписьXML, "ArtName", ЧистаяСтрока(лТовар.Наименование+ " " + лХарактеристика.Наименование));

	Если ЗначениеЗаполнено(СтруктураParams.GS1) и Лев(СтруктураParams.GS1,4) = "(01)" Тогда
		лШтрихкод=Сред(СтруктураParams.GS1,6,13);	
	Иначе	
		лШтрихкод=Barcode;
	КонецЕсли;

	Если стрДлина(Barcode) = 5 Тогда
		лШтрихкодВесовой = "";
		Попытка
			ПрефиксВесовогоТовара = Константы.ПрефиксВесовогоШтрихкода.Получить(); 
			ВесовойШкБезКС = "2" + ПрефиксВесовогоТовара + Barcode+"00000";
			лШтрихкодВесовой = ВесовойШкБезКС + КонтрольныйСимволEAN(ВесовойШкБезКС, 13);
		Исключение 
		КонецПопытки;
	КонецЕсли;

	ЗаписатьЭлементXML(ЗаписьXML, "Barcode", ЧистаяСтрока(лШтрихкод));


	BarcodeGS1 = Barcode;
	Если ЗначениеЗаполнено(СтруктураParams.GS1) Тогда
		//Barcode //[GS1_DMX]0104640057550637218HqXAdnjKK+Sb~d029910064~d02992IglIfyWPu4avVkl7Mm3+JLQ9JXgipBP9UCYHZeA3gdDF4VRvQ7Q1vUtrrmpfsPfF10f8SQbGSW41S39XxEoJeA==
		//GS1 //(01)04640057550637(21)8HqXAdnjKK+Sb(91)0064(92)IglIfyWPu4avVkl7Mm3+JLQ9JXgipBP9UCYHZeA3gdDF4VRvQ7Q1vUtrrmpfsPfF10f8SQbGSW41S39XxEoJeA==

		BarcodeGS1 = СтрЗаменить(BarcodeGS1, "[GS1_EAN]", "");
		BarcodeGS1 = СтрЗаменить(BarcodeGS1, "[GS1_DMX]", "");
	КонецЕсли;

	ЗаписатьЭлементXML(ЗаписьXML, "BarcodeGS1", BarcodeGS1);


	ЗапросШК = Новый Запрос;
	ЗапросШК.УстановитьПараметр("Номенклатура", лТовар);
	ЗапросШК.УстановитьПараметр("Штрихкод", лШтрихкод);

	ЗапросШК.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1) КАК КФ,
	|	Штрихкоды.Упаковка.Наименование КАК Наименование,
	|	Штрихкоды.Упаковка КАК УпаковкаСсылка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Номенклатура = &Номенклатура
	|	И Штрихкоды.Штрихкод = &Штрихкод";

	Выборка = ЗапросШк.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		лMeasure=Выборка.Наименование;
		лKf=Выборка.КФ;
		УпаковкаСсылка = Выборка.УпаковкаСсылка;
	Иначе
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		ЗапросШК.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
		|	         ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1) КАК КФ,
		|	Штрихкоды.Упаковка.Наименование КАК Наименование,
		|	Штрихкоды.Упаковка КАК УпаковкаСсылка
		|ИЗ
		|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Номенклатура = &Номенклатура
		|	И Штрихкоды.Штрихкод = &Штрихкод";
		Выборка = ЗапросШк.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			лMeasure=Выборка.Наименование;
			лKf=Выборка.КФ;
			УпаковкаСсылка = Выборка.УпаковкаСсылка;
		Иначе
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки
			лMeasure=лТовар.ЕдиницаИзмерения.Наименование;
			лKf=1;
			УпаковкаСсылка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	КонецЕсли;
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки

	ЗаписатьЭлементXML(ЗаписьXML, "Measure", ЧистаяСтрока(лMeasure));
	ЗаписатьЭлементXML(ЗаписьXML, "Kf", ЧистаяСтрока(лKf));


	ТекущаяЦена = ПолучитьЦенуТовара(лТовар, лХарактеристика, УзелПО.ТипЦен, УпаковкаСсылка);	
	ЗаписатьЭлементXML(ЗаписьXML, "Price", ЧистаяСтрока(ТекущаяЦена));

	//Штрихкод для проверки ценников
	//b,2000000052663,price,0100250,50
	Если ТекущаяЦена<0 Тогда
		ТекущаяЦена = 0;
	КонецЕсли;	
	ТекущаяЦенаРубли = Формат(Цел(ТекущаяЦена),"ЧЦ=7; ЧН=0000000; ЧВН=; ЧГ=");
	ТекущаяЦенаКопейки = Формат((ТекущаяЦена-ТекущаяЦенаРубли)*100,"ЧЦ=2; ЧН=00; ЧВН=; ЧГ=");
	ТекущийBarcode = лШтрихкод;
	Если СтрДлина(ТекущийBarcode)>13 Тогда
		ТекущийBarcode = Лев(ТекущийBarcode,13);
	ИначеЕсли СтрДлина(ТекущийBarcode)<13 Тогда
		ТекущийBarcode = ДобавитьЛидирующиеНули(ТекущийBarcode,13);
	КонецЕсли;	
	ЗаписатьЭлементXML(ЗаписьXML, "CheckBarcode", ЧистаяСтрока("b,"+ТекущийBarcode+",price,"+ТекущаяЦенаРубли+","+ТекущаяЦенаКопейки)); 		


	Атрибуты = ПолучитьАтрибуты(УзелПО);

	Для сч = 1 По 10 Цикл

		ИмяАтрибута = Атрибуты["ИмяАтрибута" + сч];
		Попытка
			ЗначениеАтрибута = ПолучитьЗначениеАтрибута(лТовар, ИмяАтрибута);
		Исключение
			ЗначениеАтрибута = "";
		КонецПопытки;	

		ЗаписатьЭлементXML(ЗаписьXML, "Attr" + сч, ЧистаяСтрока(ЗначениеАтрибута));

	КонецЦикла;


	ЗаписатьЭлементXML(ЗаписьXML, "QtyInt", ЧистаяСтрока(СтруктураParams.QtyInt));
	ЗаписатьЭлементXML(ЗаписьXML, "QtyFrac", ЧистаяСтрока(СтруктураParams.QtyFrac));
	ЗаписатьЭлементXML(ЗаписьXML, "ArtSN", ЧистаяСтрока(СтруктураParams.snValues));
	ЗаписатьЭлементXML(ЗаписьXML, "MeasureName", ЧистаяСтрока(СтруктураParams.MeasureName));



	ЗаписьXML.ЗаписатьКонецЭлемента();//Head

	ЗаписьXML.ЗаписатьНачалоЭлемента("Detail");		
	ЗаписьXML.ЗаписатьКонецЭлемента();//Detail

	ЗаписьXML.ЗаписатьНачалоЭлемента("Footer");
	ЗаписьXML.ЗаписатьКонецЭлемента();//Footer

	ЗаписьXML.ЗаписатьКонецЭлемента();//PrintData

	Если НЕ УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ЗаписьXML.Закрыть();
	Иначе
		СтрокаДляЗапроса = ЗаписьXML.Закрыть();
		ОтправитьДанныеНаПринтсервер(УзелПО,СтрокаДляЗапроса,ОписаниеОшибки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область FastAccess

&ИзменениеИКонтроль("ПолучитьИнфоJSON")
Функция РСК_ПолучитьИнфоJSON(УзелПО, Barcode)

	МассивОтвета = Новый Массив;
	СтруктураОтвета = Новый Структура;

	///////////////	
	//МАРКИ ЕГАИС//
	///////////////

	Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() и (СтрДлина(Barcode) = 68 или СтрДлина(Barcode) = 150) Тогда 

		СтруктураМарка = Новый Структура;
		СтруктураМарка.Вставить("title","Акцизная марка "+ Символы.ПС + Barcode);

		ИнфоПоМарке = "";
		ДанныеПомарке = ПолучитьСостояниеАкцизнойМарки(Barcode);
		Если ДанныеПомарке <>Неопределено  Тогда
			ИнфоПоМарке = ИнфоПоМарке+ДанныеПомарке.АлкогольнаяПродукция.Наименование;
			Если ЗначениеЗаполнено(ДанныеПомарке.СправкаБ) Тогда
				ИнфоПоМарке = ИнфоПоМарке+Символы.ПС+"СправкаБ: " + ДанныеПомарке.СправкаБ;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеПомарке.Статус) Тогда
				ИнфоПоМарке = ИнфоПоМарке+Символы.ПС+"Статус: " + ДанныеПомарке.Статус;
			КонецЕсли;

		Иначе
			ИнфоПоМарке = "НЕ ЧИСЛИТСЯ В СИСТЕМЕ!!!";
		КонецЕсли;




		СтруктураИнфоПоМарке = Новый Структура;
		СтруктураИнфоПоМарке.Вставить("title", ИнфоПоМарке);
		СтруктураИнфоПоМарке.Вставить("value", "");
		СтруктураИнфоПоМарке.Вставить("content", Новый Массив);

		СтруктураМарка.content.Добавить(СтруктураИнфоПоМарке);		


		МассивОтвета.Добавить(СтруктураМарка);

		Возврат ПодготовитьОтветJSON(МассивОтвета,,"application/json");

	КонецЕсли;	

	//////////	
	//ЯЧЕЙКИ//
	//////////

	ТекущаяЯчейка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Barcode);
	ВключатьАртикул = УзелПО.ДобавлятьАртикулВНаименование;
	ИспользоватьАртикулКакШтрихкодТовара = УзелПО.ИспользоватьАртикулКакШтрихкодТовара;

	ЗапросПоискЯчейки=Новый Запрос;
	ЗапросПоискЯчейки.УстановитьПараметр("ТекущаяЯчейка", ТекущаяЯчейка);	
	ЗапросПоискЯчейки.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СкладскиеЯчейки.Ссылка КАК Ячейка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Ссылка = &ТекущаяЯчейка";

	ВыборкаРезультатПоискаЯчейки=ЗапросПоискЯчейки.Выполнить().Выбрать();
	Если ЗначениеЗаполнено(ТекущаяЯчейка) и ВыборкаРезультатПоискаЯчейки.Следующий() Тогда

		НазваниеЯчейки = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ТекущаяЯчейка.Наименование), ТекущаяЯчейка.Код);
		НазваниеЯчейки = "Ячейка: " + ЧистаяСтрока(НазваниеЯчейки);

		НазваниеСклада = "Склад: "+ЧистаяСтрока(ТекущаяЯчейка.Владелец.Наименование);	
		Если ЗначениеЗаполнено(ТекущаяЯчейка.Помещение) тогда
			НазваниеПомещения = "Помещение: "+ЧистаяСтрока(ТекущаяЯчейка.Помещение.Наименование);
			НазваниеСклада = НазваниеСклада + Символы.ПС + НазваниеПомещения;
		КонецЕсли;

		СтруктураЯчейки = Новый Структура;
		СтруктураЯчейки.Вставить("title",НазваниеЯчейки);
		СтруктураЯчейки.Вставить("value",НазваниеСклада);
		СтруктураЯчейки.Вставить("content",Новый Массив);

		//Ищем остатки по ячейке
		ЗапросОстатков = Новый Запрос;
		ЗапросОстатков.УстановитьПараметр("ТекущаяЯчейка", ТекущаяЯчейка);
		ЗапросОстатков.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
		|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
		|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(, Ячейка = &ТекущаяЯчейка) КАК ТоварыВЯчейкахОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВЯчейкахОстатки.Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика,
		|	ТоварыВЯчейкахОстатки.Серия,
		|	ТоварыВЯчейкахОстатки.Упаковка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыВЯчейкахОстатки.Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика,
		|	ТоварыВЯчейкахОстатки.Серия,
		|	ТоварыВЯчейкахОстатки.Упаковка
		|ИТОГИ
		|	СУММА(КоличествоОстаток)
		|ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Упаковка";

		ВыборкаПоТоварам = ЗапросОстатков.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		Пока ВыборкаПоТоварам.Следующий() Цикл
			ВыборкаПоХарактеристикам = ВыборкаПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
			Пока ВыборкаПоХарактеристикам.Следующий() Цикл

				НазваниеТовара = "Товар: " + ?(ВключатьАртикул,ВыборкаПоТоварам.Номенклатура.Артикул + " ","")
				+ ЧистаяСтрока(ВыборкаПоТоварам.Номенклатура.Наименование) + " "
				+ ЧистаяСтрока(ВыборкаПоХарактеристикам.Характеристика.Наименование);

				СтруктураТовары = Новый Структура;
				СтруктураТовары.Вставить("title"  , НазваниеТовара);
				СтруктураТовары.Вставить("value"  , "");
				СтруктураТовары.Вставить("content", Новый Массив);

				ВыборкаПоСериям = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
				Пока ВыборкаПоСериям.Следующий() Цикл

					ВыборкаПоУпаковкам = ВыборкаПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
					Пока ВыборкаПоУпаковкам.Следующий() Цикл

						НазваниеСерии = "";
						Если ЗначениеЗаполнено(ВыборкаПоСериям.Серия) тогда
							НазваниеСерии = "Серия: "+ЧистаяСтрока(ВыборкаПоСериям.Серия.Наименование);
						КонецЕсли;
						СтрокаОстаток = "" + ВыборкаПоУпаковкам.КоличествоОстаток + " " + ЧистаяСтрока(ВыборкаПоУпаковкам.Упаковка.Наименование);

						СтруктураОстатки = Новый Структура;
						СтруктураОстатки.Вставить("title",НазваниеСерии);
						СтруктураОстатки.Вставить("value",СтрокаОстаток);

						СтруктураТовары.content.Добавить(СтруктураОстатки);
					КонецЦикла;
				КонецЦикла;

				//добавляем только если есть строки
				Если СтруктураТовары.content.Количество()>0 тогда
					//если одна строка и нет разбивки, то для красоты выводим данные на уровне выше
					Если СтруктураТовары.content.Количество()=1 и СтруктураТовары.content[0].title="" тогда	
						СтруктураТовары.value = СтруктураТовары.content[0].value;
						СтруктураТовары.content = Новый Массив;
					КонецЕсли;
					СтруктураЯчейки.content.Добавить(СтруктураТовары);
				КонецЕсли;

			КонецЦикла;					
		КонецЦикла;	

		Если СтруктураЯчейки.content.Количество()=0 тогда 
			СтруктураТовары = Новый Структура;
			СтруктураТовары.Вставить("title", "Остатков не числится...");
			СтруктураТовары.Вставить("value", "");
			СтруктураТовары.Вставить("content", Новый Массив);

			СтруктураЯчейки.content.Добавить(СтруктураТовары);		
		КонецЕсли;

		МассивОтвета.Добавить(СтруктураЯчейки);

		Возврат ПодготовитьОтветJSON(МассивОтвета,,"application/json");

	КонецЕсли;


	//////////	
	//ТОВАРЫ//
	//////////

	ЗапросПоискТовара = Новый Запрос;
	ЗапросПоискТовара.УстановитьПараметр("Barcode", Barcode);
	ЗапросПоискТовара.УстановитьПараметр("ИспользоватьАртикулКакШтрихкодТовара", ИспользоватьАртикулКакШтрихкодТовара);
	ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЛОЖЬ КАК ШтрихкодыССериями,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
	|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
	|	И НЕ ШтрихкодыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Серия КАК Серия,
	|	ИСТИНА КАК ШтрихкодыССериями,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
	|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
	|	И НЕ ШтрихкодыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	//ВЫБОРКА ССЫЛОК ТОВАРОВ И ХАРАКТЕРИСТИК ПО РАЗНЫМ УСЛОВИЯМ ВЕДЕНИЯ ХАРАКТЕРИСТИК ПРИ ИспользоватьАртикулКакШтрихкодТовара 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//БЕЗ ХАРАКТЕРИСТИК
	|	Номенклатура.Ссылка КАК Номенклатура,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЛОЖЬ КАК ШтрихкодыССериями,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка) КАК Характеристика
	|ИЗ
	| 	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	&ИспользоватьАртикулКакШтрихкодТовара
	|	И Номенклатура.Артикул = &Barcode
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//ИНДИВИДУАЛЬНЫЕ ХАРАКТЕРИСТИКИ
	|	Номенклатура.Ссылка КАК Номенклатура,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЛОЖЬ КАК ШтрихкодыССериями,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	| 	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|ГДЕ
	|	&ИспользоватьАртикулКакШтрихкодТовара
	|	И Номенклатура.Артикул = &Barcode
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//ОБЩИЕ ХАРАКТЕРИСТИКИ
	|	Номенклатура.Ссылка КАК Номенклатура, 
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЛОЖЬ КАК ШтрихкодыССериями,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|ГДЕ
	|	&ИспользоватьАртикулКакШтрихкодТовара
	|	И Номенклатура.Артикул = &Barcode
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления 
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//ОБЩИЕ С ДРУГИМ ВИДОМ ХАРАКТЕРИСТИКИ
	|	Номенклатура.Ссылка КАК Номенклатура,
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЛОЖЬ КАК ШтрихкодыССериями,
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВладелецХарактеристик
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|ГДЕ
	|	&ИспользоватьАртикулКакШтрихкодТовара
	|	И Номенклатура.Артикул = &Barcode
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL";

	ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();

	//Попробуем найти товар по КМ или GTIN КМ
	Если ВыборкаРезультатПоискаТовара.Количество()=0 и стрДлина(Barcode)>30 Тогда		
		Если ДатаМобайл_ОбщийМодуль.ЕстьМаркировка() тогда 

			КМ = Лев(Barcode,31);
			ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 13);
			ЗначениеШтрихкодаДляЗапроса = ""+ЗначениеШтрихкода;
			ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"_","$_");
			ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"%","$%");
			ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкодаДляЗапроса + "%";

			ЗапросПоискТовара = Новый Запрос;
			ЗапросПоискТовара.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", ЗначениеШтрихкодаДляЗапроса);
			ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|	ЛОЖЬ КАК ШтрихкодыССериями,
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки
			|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""
			|	И ШтрихкодыУпаковокТоваров.Номенклатура ССЫЛКА Справочник.Номенклатура
			|	И НЕ ШтрихкодыУпаковокТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";

			ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();
		КонецЕсли;	

		Если ВыборкаРезультатПоискаТовара.Количество()=0 Тогда

			ТекущийШтрихкод = Сред(Barcode, 3, 14);
			ТекущийШтрихкод = УдалитьЛидирующиеНули(ТекущийШтрихкод);

			ЗапросПоискТовара = Новый Запрос;
			ЗапросПоискТовара.УстановитьПараметр("Barcode", ТекущийШтрихкод);
			ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|	ЛОЖЬ КАК ШтрихкодыССериями,
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки
			|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
			|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
			#Удаление
			|	И НЕ ШтрихкодыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
			#КонецУдаления
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			|	И НЕ ШтрихкодыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
			|	ШтрихкодыНоменклатуры.Серия КАК Серия,
			|	ИСТИНА КАК ШтрихкодыССериями,
			|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
			|ИЗ
			|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
			|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
			|	И НЕ ШтрихкодыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки

			ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();

		КонецЕсли;		
	КонецЕсли;		


	Если ВыборкаРезультатПоискаТовара.Количество()>0 Тогда

		Пока ВыборкаРезультатПоискаТовара.Следующий() Цикл

			МассивАдресныхСкладов = Новый Массив;

			НазваниеТовара = "Товар: "   +   ?(ВключатьАртикул,ВыборкаРезультатПоискаТовара.Номенклатура.Артикул + " ","")
			+ ВыборкаРезультатПоискаТовара.Номенклатура + " " 
			+ ВыборкаРезультатПоискаТовара.Характеристика;

			ТекущаяЦена = ПолучитьЦенуТовара(ВыборкаРезультатПоискаТовара.Номенклатура, ВыборкаРезультатПоискаТовара.Характеристика, УзелПО.ТипЦен); 
			Если ЗначениеЗаполнено(ТекущаяЦена) тогда
				ТекущаяЦена="Цена: " + ТекущаяЦена;
			Иначе
				ТекущаяЦена="";
			КонецЕсли;

			СтруктураТовары = Новый Структура;
			СтруктураТовары.Вставить("title",НазваниеТовара);
			СтруктураТовары.Вставить("value",ТекущаяЦена);
			СтруктураТовары.Вставить("content",Новый Массив);

			//Сначала ищем остатки по товару по адресному регистру...
			ЗапросОстатковАдресный =Новый Запрос;
			ЗапросОстатковАдресный.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
			ЗапросОстатковАдресный.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			ЗапросОстатковАдресный.УстановитьПараметр("БезОтбораПоСерии", Не ВыборкаРезультатПоискаТовара.ШтрихкодыССериями);
			ЗапросОстатковАдресный.УстановитьПараметр("Серия", ВыборкаРезультатПоискаТовара.Серия);
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки

			СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
			ЗапросОстатковАдресный.УстановитьПараметр("Склады", СписокСкладов);
			ЗапросОстатковАдресный.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество()=0);

			СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
			ЗапросОстатковАдресный.УстановитьПараметр("Помещения",СписокПомещений);
			ЗапросОстатковАдресный.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество()=0);

			ЗапросОстатковАдресный.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыВЯчейкахОстатки.Ячейка.Владелец КАК Склад,
			|	ТоварыВЯчейкахОстатки.Ячейка.Помещение КАК Помещение,
			|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
			|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
			|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК КоличествоОстаток
			|ИЗ
			| 	РегистрНакопления.ТоварыВЯчейках.Остатки(
			|   	,
			|   	Номенклатура = &ТекущаяНоменклатура
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			|		 И (&БезОтбораПоСерии ИЛИ Серия = &Серия)
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки
			|   	 И Характеристика = &ТекущаяХарактеристика) КАК ТоварыВЯчейкахОстатки
			|ГДЕ
			|   (&ВсеСклады ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Владелец В (&Склады))
			| 		И (&ВсеПомещения ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Помещение В (&Помещения))   
			|СГРУППИРОВАТЬ ПО
			|	ТоварыВЯчейкахОстатки.Ячейка.Владелец,
			|	ТоварыВЯчейкахОстатки.Ячейка.Помещение,
			|	ТоварыВЯчейкахОстатки.Ячейка,
			|	ТоварыВЯчейкахОстатки.Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка
			|ИМЕЮЩИЕ
			| 	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) <> 0 
			|УПОРЯДОЧИТЬ ПО
			|	ТоварыВЯчейкахОстатки.Ячейка.Владелец,
			|	ТоварыВЯчейкахОстатки.Ячейка.Помещение,
			|	ТоварыВЯчейкахОстатки.Ячейка,
			|	ТоварыВЯчейкахОстатки.Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка
			|ИТОГИ
			|	СУММА(КоличествоОстаток)
			|ПО
			|	Склад,
			|	Помещение,
			|	Ячейка,
			|	Серия,
			|	Упаковка";

			ВыборкаПоСкладам=ЗапросОстатковАдресный.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСкладам.Следующий() Цикл

				ВыборкаПоПомещениям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоПомещениям.Следующий() Цикл

					НазваниеСклада = "Склад: "+ЧистаяСтрока(ВыборкаПоСкладам.Склад.Наименование);	
					Если ЗначениеЗаполнено(ВыборкаПоПомещениям.Помещение) тогда
						НазваниеПомещения = "Помещение: "+ЧистаяСтрока(ВыборкаПоПомещениям.Помещение.Наименование);
						НазваниеСклада = НазваниеСклада + Символы.ПС + НазваниеПомещения;
					КонецЕсли;

					СтруктураСклады = Новый Структура;
					СтруктураСклады.Вставить("title"  , НазваниеСклада);
					СтруктураСклады.Вставить("value"  , "");
					СтруктураСклады.Вставить("content", Новый Массив);

					ВыборкаПоЯчейкам = ВыборкаПоПомещениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаПоЯчейкам.Следующий() Цикл

						НазваниеЯчейки = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ВыборкаПоЯчейкам.Ячейка.Наименование), ВыборкаПоЯчейкам.Ячейка.Код);
						НазваниеЯчейки = "Ячейка: " + ЧистаяСтрока(НазваниеЯчейки);

						СтруктураЯчейки = Новый Структура;
						СтруктураЯчейки.Вставить("title"  , НазваниеЯчейки);
						СтруктураЯчейки.Вставить("value"  , "");
						СтруктураЯчейки.Вставить("content", Новый Массив);

						ВыборкаПоСериям = ВыборкаПоЯчейкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаПоСериям.Следующий() Цикл

							ВыборкаПоУпаковкам = ВыборкаПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаПоУпаковкам.Следующий() Цикл

								НазваниеСерии = "";
								Если ЗначениеЗаполнено(ВыборкаПоСериям.Серия) тогда
									НазваниеСерии = "Серия: "+ЧистаяСтрока(ВыборкаПоСериям.Серия.Наименование);
								КонецЕсли;
								СтрокаОстаток = "" + ВыборкаПоУпаковкам.КоличествоОстаток + " "+ ЧистаяСтрока(ВыборкаПоУпаковкам.Упаковка.Наименование); 

								СтруктураОстатки = Новый Структура;
								СтруктураОстатки.Вставить("title",НазваниеСерии);
								СтруктураОстатки.Вставить("value",СтрокаОстаток);

								СтруктураЯчейки.content.Добавить(СтруктураОстатки);									

							КонецЦикла;
						КонецЦикла;

						//добавляем только если есть строки
						Если СтруктураЯчейки.content.Количество()>0 тогда
							//если одна строка и нет разбивки, то для красоты выводим данные на уровне выше
							Если СтруктураЯчейки.content.Количество()=1 и СтруктураЯчейки.content[0].title="" тогда	
								СтруктураЯчейки.value = СтруктураЯчейки.content[0].value;
								СтруктураЯчейки.content = Новый Массив;
							КонецЕсли;
							СтруктураСклады.content.Добавить(СтруктураЯчейки);
						КонецЕсли;
					КонецЦикла;			

					//добавляем только если есть строки
					Если СтруктураСклады.content.Количество()>0 тогда

						СтруктураТовары.content.Добавить(СтруктураСклады);
						Если МассивАдресныхСкладов.Найти(ВыборкаПоСкладам.Склад)=Неопределено тогда
							МассивАдресныхСкладов.Добавить(ВыборкаПоСкладам.Склад);		
						КонецЕсли;

					КонецЕсли;

				КонецЦикла;					
			КонецЦикла;						

			//Затем ищем остатки по товару по обычному регистру на оставщихся складах, исключая адресные...
			ЗапросОстатков =Новый Запрос;
			ЗапросОстатков.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
			ЗапросОстатков.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			ЗапросОстатков.УстановитьПараметр("БезОтбораПоСерии", Не ВыборкаРезультатПоискаТовара.ШтрихкодыССериями);
			ЗапросОстатков.УстановитьПараметр("Серия", ВыборкаРезультатПоискаТовара.Серия);
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки

			СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
			ЗапросОстатков.УстановитьПараметр("Склады", СписокСкладов);
			ЗапросОстатков.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество()=0);

			СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
			ЗапросОстатков.УстановитьПараметр("Помещения",СписокПомещений);
			ЗапросОстатков.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество()=0);

			ЗапросОстатков.УстановитьПараметр("МассивАдресныхСкладов", МассивАдресныхСкладов);

			ЗапросОстатков.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыНаСкладахОстатки.Склад,
			|	ТоварыНаСкладахОстатки.Помещение КАК Помещение,
			|	ТоварыНаСкладахОстатки.Серия,
			|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) - СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(
			|			,
			|			Номенклатура = &ТекущаяНоменклатура
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			|				И (&БезОтбораПоСерии ИЛИ Серия = &Серия)
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки
			|				И Характеристика = &ТекущаяХарактеристика) КАК ТоварыНаСкладахОстатки
			|ГДЕ
			|	(&ВсеСклады ИЛИ ТоварыНаСкладахОстатки.Склад В (&Склады))
			|		И (НЕ ТоварыНаСкладахОстатки.Склад В (&МассивАдресныхСкладов))
			|		И (&ВсеПомещения ИЛИ ТоварыНаСкладахОстатки.Помещение В (&Помещения)) 
			|СГРУППИРОВАТЬ ПО
			|	ТоварыНаСкладахОстатки.Склад,
			|	ТоварыНаСкладахОстатки.Помещение,
			|	ТоварыНаСкладахОстатки.Серия
			|ИМЕЮЩИЕ
			| 	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток)  - СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) <> 0
			|УПОРЯДОЧИТЬ ПО
			|	ТоварыНаСкладахОстатки.Склад,
			|	ТоварыНаСкладахОстатки.Помещение,
			|	ТоварыНаСкладахОстатки.Серия
			|ИТОГИ
			|	СУММА(КоличествоОстаток)
			|ПО
			|	Склад,
			|	Помещение,
			|	Серия";

			ВыборкаПоСкладам=ЗапросОстатков.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСкладам.Следующий() Цикл

				ВыборкаПоПомещениям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоПомещениям.Следующий() Цикл

					НазваниеСклада = "Склад: "+ЧистаяСтрока(ВыборкаПоСкладам.Склад.Наименование);	
					Если ЗначениеЗаполнено(ВыборкаПоПомещениям.Помещение) тогда
						НазваниеПомещения = "Помещение: "+ЧистаяСтрока(ВыборкаПоПомещениям.Помещение.Наименование);
						НазваниеСклада = НазваниеСклада + Символы.ПС + НазваниеПомещения;
					КонецЕсли;

					СтруктураСклады = Новый Структура;
					СтруктураСклады.Вставить("title"  , НазваниеСклада);
					СтруктураСклады.Вставить("value"  , "");
					СтруктураСклады.Вставить("content", Новый Массив);

					ВыборкаПоСериям = ВыборкаПоПомещениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаПоСериям.Следующий() Цикл

						НазваниеСерии = "";
						Если ЗначениеЗаполнено(ВыборкаПоСериям.Серия) тогда
							НазваниеСерии = "Серия: "+ЧистаяСтрока(ВыборкаПоСериям.Серия.Наименование);
						КонецЕсли;
						СтрокаОстаток = "" + ВыборкаПоСериям.КоличествоОстаток + " "+ ЧистаяСтрока(ВыборкаРезультатПоискаТовара.Номенклатура.ЕдиницаИзмерения.Наименование);  

						СтруктураОстатки = Новый Структура;
						СтруктураОстатки.Вставить("title",НазваниеСерии);
						СтруктураОстатки.Вставить("value",СтрокаОстаток);

						СтруктураСклады.content.Добавить(СтруктураОстатки);									

					КонецЦикла;	

					//добавляем только если есть строки
					Если СтруктураСклады.content.Количество()>0 тогда
						//если одна строка и нет разбивки, то для красоты выводим данные на уровне выше
						Если СтруктураСклады.content.Количество()=1 и СтруктураСклады.content[0].title="" тогда	
							СтруктураСклады.value = СтруктураСклады.content[0].value;
							СтруктураСклады.content = Новый Массив;
						КонецЕсли;
						СтруктураТовары.content.Добавить(СтруктураСклады);
					КонецЕсли;

				КонецЦикла;					
			КонецЦикла;		

			Если СтруктураТовары.content.Количество()=0 тогда 
				СтруктураСклады = Новый Структура;
				СтруктураСклады.Вставить("title", "Остатков не числится...");
				СтруктураСклады.Вставить("value", "");
				СтруктураСклады.Вставить("content", Новый Массив);

				СтруктураТовары.content.Добавить(СтруктураСклады);		
			КонецЕсли;

			МассивОтвета.Добавить(СтруктураТовары);

		КонецЦикла;	

		Возврат ПодготовитьОтветJSON(МассивОтвета,,"application/json");

	Иначе 

		СтруктураТовары = Новый Структура;
		СтруктураТовары.Вставить("title","По штрихкоду данных не найдено...");
		СтруктураТовары.Вставить("value","");
		СтруктураТовары.Вставить("content", Новый Массив);

		МассивОтвета.Добавить(СтруктураТовары);

		Возврат ПодготовитьОтветJSON(МассивОтвета,,"application/json");

	КонецЕсли;

КонецФункции

&ИзменениеИКонтроль("ПолучитьИнфоTEXT")
Функция РСК_ПолучитьИнфоTEXT(УзелПО, Barcode)


	Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() и (СтрДлина(Barcode) = 68 или СтрДлина(Barcode) = 150) тогда // Инфо по марке ЕГАИС

		//есть\нет в системе
		//состояние товара - находится на основном складе или в карантине (брак)

		Марка = Barcode;
		ИнфоПоМарке = "";
		ДанныеПомарке = ПолучитьСостояниеАкцизнойМарки(Марка);
		Если ДанныеПомарке <>Неопределено  тогда
			ИнфоПоМарке = ИнфоПоМарке+ДанныеПомарке.АлкогольнаяПродукция.Наименование + Символы.ПС;
			Если ЗначениеЗаполнено(ДанныеПомарке.СправкаБ) тогда
				ИнфоПоМарке = ИнфоПоМарке+"СправкаБ: " + ДанныеПомарке.СправкаБ + Символы.ПС;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеПомарке.Статус) тогда
				ИнфоПоМарке = ИнфоПоМарке+"Статус: " + ДанныеПомарке.Статус + Символы.ПС;
			КонецЕсли;

		Иначе
			ИнфоПоМарке = "НЕ ЧИСЛИТСЯ В СИСТЕМЕ!!!";
		КонецЕсли;

		Возврат ПодготовитьОтветJSON("Акцизная марка"+ Символы.ПС + Марка + Символы.ПС + Символы.ПС + ИнфоПоМарке,,"text");

	ИНАЧЕ //ОБЫЧНЫЕ ТОВАРЫ

		СтрокаВозврата = "";
		ВключатьАртикул = УзелПО.ДобавлятьАртикулВНаименование;
		ИспользоватьАртикулКакШтрихкодТовара = УзелПО.ИспользоватьАртикулКакШтрихкодТовара;

		//Сначала ищем ячейку...	
		ТекущаяЯчейка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Barcode);
		ТекущаяЯчейкаНаименование = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ТекущаяЯчейка.Наименование), ТекущаяЯчейка.Код);

		ЗапросПоискЯчейки=Новый Запрос;
		ЗапросПоискЯчейки.УстановитьПараметр("ТекущаяЯчейка", ТекущаяЯчейка);	
		ЗапросПоискЯчейки.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СкладскиеЯчейки.Ссылка КАК Ячейка
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|ГДЕ
		|	СкладскиеЯчейки.Ссылка = &ТекущаяЯчейка";

		ВыборкаРезультатПоискаЯчейки=ЗапросПоискЯчейки.Выполнить().Выбрать();
		Если ВыборкаРезультатПоискаЯчейки.Следующий() Тогда
			ИмяЯчейки = "Ячейка: " + ТекущаяЯчейкаНаименование + Символы.ПС + Символы.ПС;

			ЗапросОстатков = Новый Запрос;
			ЗапросОстатков.УстановитьПараметр("ТекущаяЯчейка", ТекущаяЯчейка);
			ЗапросОстатков.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыВЯчейкахОстатки.Номенклатура,
			|	ТоварыВЯчейкахОстатки.Характеристика,
			|	ТоварыВЯчейкахОстатки.Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка,
			|	ТоварыВЯчейкахОстатки.Ячейка,
			|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток)- СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ТоварыВЯчейках.Остатки(,Ячейка=&ТекущаяЯчейка) КАК ТоварыВЯчейкахОстатки
			|СГРУППИРОВАТЬ ПО
			|	ТоварыВЯчейкахОстатки.Номенклатура,
			|	ТоварыВЯчейкахОстатки.Характеристика,
			|	ТоварыВЯчейкахОстатки.Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка,
			|	ТоварыВЯчейкахОстатки.Ячейка			
			|ИМЕЮЩИЕ
			| 	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) <> 0 
			|УПОРЯДОЧИТЬ ПО
			|	ТоварыВЯчейкахОстатки.Ячейка ВОЗР,
			|	ТоварыВЯчейкахОстатки.Номенклатура ВОЗР,
			|	ТоварыВЯчейкахОстатки.Характеристика ВОЗР,
			|	ТоварыВЯчейкахОстатки.Серия ВОЗР,
			|	ТоварыВЯчейкахОстатки.Упаковка ВОЗР";

			ВыборкаРезультатЗапросаОстатков=ЗапросОстатков.Выполнить().Выбрать();
			Если ВыборкаРезультатЗапросаОстатков.Количество()> 0 Тогда

				ТекущаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
				ТекущаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

				Пока ВыборкаРезультатЗапросаОстатков.Следующий() Цикл

					Если ВыборкаРезультатЗапросаОстатков.Номенклатура<>ТекущаяНоменклатура или ВыборкаРезультатЗапросаОстатков.Характеристика<>ТекущаяХарактеристика тогда 

						ТекущаяНоменклатура = ВыборкаРезультатЗапросаОстатков.Номенклатура;
						ТекущаяХарактеристика = ВыборкаРезультатЗапросаОстатков.Характеристика;

						СтрокаВозврата = СтрокаВозврата + Символы.ПС + "Товар: " + ?(ВключатьАртикул,ВыборкаРезультатЗапросаОстатков.Номенклатура.Артикул + " ","")
						+ ВыборкаРезультатЗапросаОстатков.Номенклатура + " "
						+ ВыборкаРезультатЗапросаОстатков.Характеристика + "; " + Символы.ПС;
					КонецЕсли;


					СтрокаВозврата = СтрокаВозврата + ВыборкаРезультатЗапросаОстатков.КоличествоОстаток + " "
					+ ВыборкаРезультатЗапросаОстатков.Упаковка + "; " 
					+ ВыборкаРезультатЗапросаОстатков.Серия + Символы.ПС;		
				КонецЦикла;
			Иначе 
				СтрокаВозврата =  "Товаров не числится...";
			КонецЕсли;

			Возврат ПодготовитьОтветJSON(ИмяЯчейки + СтрокаВозврата + Символы.ПС + Символы.ПС,,"text");

		КонецЕсли;

		//Если ячейки нет, то ищем товар...	
		ЗапросПоискТовара = Новый Запрос;
		ЗапросПоискТовара.УстановитьПараметр("Barcode", Barcode);
		ЗапросПоискТовара.УстановитьПараметр("ИспользоватьАртикулКакШтрихкодТовара", ИспользоватьАртикулКакШтрихкодТовара);

		ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЛОЖЬ КАК ШтрихкодыССериями,
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
		|	И ШтрихкодыНоменклатуры.Номенклатура Ссылка Справочник.Номенклатура
		|	И НЕ ШтрихкодыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		#Вставка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Серия КАК Серия,
		|	ИСТИНА КАК ШтрихкодыССериями,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
		|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
		|	И НЕ ШтрихкодыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		#КонецВставки
		//ВЫБОРКА ССЫЛОК ТОВАРОВ И ХАРАКТЕРИСТИК ПО РАЗНЫМ УСЛОВИЯМ ВЕДЕНИЯ ХАРАКТЕРИСТИК ПРИ ИспользоватьАртикулКакШтрихкодТовара 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//БЕЗ ХАРАКТЕРИСТИК
		|	Номенклатура.Ссылка КАК Номенклатура,
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЛОЖЬ КАК ШтрихкодыССериями,
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка) КАК Характеристика
		|ИЗ
		| 	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	&ИспользоватьАртикулКакШтрихкодТовара
		|	И Номенклатура.Артикул = &Barcode
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//ИНДИВИДУАЛЬНЫЕ ХАРАКТЕРИСТИКИ
		|	Номенклатура.Ссылка КАК Номенклатура,
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЛОЖЬ КАК ШтрихкодыССериями,
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
		|ИЗ
		| 	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
		|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|ГДЕ
		|	&ИспользоватьАртикулКакШтрихкодТовара
		|	И Номенклатура.Артикул = &Barcode
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//ОБЩИЕ ХАРАКТЕРИСТИКИ
		|	Номенклатура.Ссылка КАК Номенклатура,
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЛОЖЬ КАК ШтрихкодыССериями,
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры
		|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|ГДЕ
		|	&ИспользоватьАртикулКакШтрихкодТовара
		|	И Номенклатура.Артикул = &Barcode
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления 
		|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//ОБЩИЕ С ДРУГИМ ВИДОМ ХАРАКТЕРИСТИКИ
		|	Номенклатура.Ссылка КАК Номенклатура,
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЛОЖЬ КАК ШтрихкодыССериями,
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВладелецХарактеристик
		|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|ГДЕ
		|	&ИспользоватьАртикулКакШтрихкодТовара
		|	И Номенклатура.Артикул = &Barcode
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL";

		ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();

		Если ВыборкаРезультатПоискаТовара.Количество()=0 и ДатаМобайл_ОбщийМодуль.ЕстьМаркировка() и стрДлина(Barcode)>30 Тогда
			//Попробуем найти товар по КМ	
			КМ = Лев(Barcode,31);
			ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 13);
			ЗначениеШтрихкодаДляЗапроса = ""+ЗначениеШтрихкода;
			ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"_","$_");
			ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"%","$%");
			ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкодаДляЗапроса + "%";

			ЗапросПоискТовара = Новый Запрос;
			ЗапросПоискТовара.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", ЗначениеШтрихкодаДляЗапроса);
			ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|	ЛОЖЬ КАК ШтрихкодыССериями,
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки
			|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""
			|	И ШтрихкодыУпаковокТоваров.Номенклатура Ссылка Справочник.Номенклатура
			|	И НЕ ШтрихкодыУпаковокТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";

			ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();

			Если ВыборкаРезультатПоискаТовара.Количество()=0 тогда

				ТекущийШтрихкод = Сред(Barcode, 3, 14);
				ТекущийШтрихкод = УдалитьЛидирующиеНули(ТекущийШтрихкод);

				ЗапросПоискТовара = Новый Запрос;
				ЗапросПоискТовара.УстановитьПараметр("Barcode", ТекущийШтрихкод);
				ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
				|	ЛОЖЬ КАК ШтрихкодыССериями,
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки
				|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
				|ИЗ
				|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
				|ГДЕ
				|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
				#Удаление
				|	И ШтрихкодыНоменклатуры.Номенклатура Ссылка Справочник.Номенклатура";
				#КонецУдаления
				#Вставка
				|	И ШтрихкодыНоменклатуры.Номенклатура Ссылка Справочник.Номенклатура
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
				|	ШтрихкодыНоменклатуры.Серия КАК Серия,
				|	ИСТИНА КАК ШтрихкодыССериями,
				|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
				|ИЗ
				|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
				|ГДЕ
				|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
				|	И ШтрихкодыНоменклатуры.Номенклатура Ссылка Справочник.Номенклатура";
				#КонецВставки

				ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();

			КонецЕсли;		
		КонецЕсли;		


		Если ВыборкаРезультатПоискаТовара.Количество()>0 Тогда	
			Пока ВыборкаРезультатПоискаТовара.Следующий() Цикл

				НетНаОстатках = Истина;
				ИмяТовара = "Товар: "   +   ?(ВключатьАртикул,ВыборкаРезультатПоискаТовара.Номенклатура.Артикул + " ","")
				+ ВыборкаРезультатПоискаТовара.Номенклатура + " " 
				+ ВыборкаРезультатПоискаТовара.Характеристика + Символы.ПС + Символы.ПС;
				ИнфоТовар = "";

				//Сначала ищем остатки по адресному регистру...
				ЗапросОстатковАдресный =Новый Запрос;
				ЗапросОстатковАдресный.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
				ЗапросОстатковАдресный.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				ЗапросОстатковАдресный.УстановитьПараметр("БезОтбораПоСерии", Не ВыборкаРезультатПоискаТовара.ШтрихкодыССериями);
				ЗапросОстатковАдресный.УстановитьПараметр("Серия", ВыборкаРезультатПоискаТовара.Серия);
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки

				СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
				ЗапросОстатковАдресный.УстановитьПараметр("Склады", СписокСкладов);
				ЗапросОстатковАдресный.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество()=0);

				СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
				ЗапросОстатковАдресный.УстановитьПараметр("Помещения",СписокПомещений);
				ЗапросОстатковАдресный.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество()=0);

				ЗапросОстатковАдресный.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТоварыВЯчейкахОстатки.Ячейка.Владелец КАК Склад,
				|	ТоварыВЯчейкахОстатки.Ячейка.Помещение КАК Помещение,
				|	ТоварыВЯчейкахОстатки.Ячейка,
				|	ТоварыВЯчейкахОстатки.Номенклатура,
				|	ТоварыВЯчейкахОстатки.Характеристика,
				|	ТоварыВЯчейкахОстатки.Серия,
				|	ТоварыВЯчейкахОстатки.Упаковка,
				|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК КоличествоОстаток
				|ИЗ
				| 	РегистрНакопления.ТоварыВЯчейках.Остатки(
				|   	,
				|   	Номенклатура = &ТекущаяНоменклатура
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				|		 И (&БезОтбораПоСерии ИЛИ Серия = &Серия)
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки
				|   	 И Характеристика = &ТекущаяХарактеристика) КАК ТоварыВЯчейкахОстатки
				|ГДЕ
				| (&ВсеСклады ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Владелец В (&Склады))
				| И (&ВсеПомещения ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Помещение В (&Помещения))   
				|СГРУППИРОВАТЬ ПО
				|	ТоварыВЯчейкахОстатки.Ячейка.Владелец,
				|	ТоварыВЯчейкахОстатки.Ячейка.Помещение,
				|	ТоварыВЯчейкахОстатки.Ячейка,
				|	ТоварыВЯчейкахОстатки.Номенклатура,
				|	ТоварыВЯчейкахОстатки.Характеристика,
				|	ТоварыВЯчейкахОстатки.Серия,
				|	ТоварыВЯчейкахОстатки.Упаковка
				|ИМЕЮЩИЕ
				| 	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) <> 0 
				|УПОРЯДОЧИТЬ ПО
				|	ТоварыВЯчейкахОстатки.Ячейка.Владелец ВОЗР,
				|	ТоварыВЯчейкахОстатки.Ячейка ВОЗР,
				|	ТоварыВЯчейкахОстатки.Номенклатура ВОЗР,
				|	ТоварыВЯчейкахОстатки.Характеристика ВОЗР,
				|	ТоварыВЯчейкахОстатки.Серия ВОЗР,
				|	ТоварыВЯчейкахОстатки.Упаковка ВОЗР";

				ВыборкаРезультатЗапросаОстатковАдресный=ЗапросОстатковАдресный.Выполнить().Выбрать();
				Если ВыборкаРезультатЗапросаОстатковАдресный.Количество()> 0 Тогда

					ТекущийСклад = Справочники.Склады.ПустаяСсылка();
					ТекущееПомещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
					ТекущаяЯчейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();

					Пока ВыборкаРезультатЗапросаОстатковАдресный.Следующий() Цикл

						Если ВыборкаРезультатЗапросаОстатковАдресный.Склад<>ТекущийСклад тогда 
							ТекущийСклад = ВыборкаРезультатЗапросаОстатковАдресный.Склад;

							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатковАдресный.Склад + Символы.ПС;
						КонецЕсли;

						Если ВыборкаРезультатЗапросаОстатковАдресный.Помещение<>ТекущееПомещение и ЗначениеЗаполнено(ВыборкаРезультатЗапросаОстатковАдресный.Помещение) тогда 
							ТекущееПомещение = ВыборкаРезультатЗапросаОстатковАдресный.Помещение;

							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатковАдресный.Помещение + Символы.ПС;
						КонецЕсли;

						Если ВыборкаРезультатЗапросаОстатковАдресный.Ячейка<>ТекущаяЯчейка тогда 
							ТекущаяЯчейка = ВыборкаРезультатЗапросаОстатковАдресный.Ячейка;
							ТекущаяЯчейкаНаименование = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ВыборкаРезультатЗапросаОстатковАдресный.Ячейка.Наименование), ВыборкаРезультатЗапросаОстатковАдресный.Ячейка.Код);

							ИнфоТовар = ИнфоТовар + Символы.ПС + ТекущаяЯчейкаНаименование + Символы.ПС;
						КонецЕсли;


						ИнфоТовар = ИнфоТовар + ВыборкаРезультатЗапросаОстатковАдресный.КоличествоОстаток + " "
						+ ВыборкаРезультатЗапросаОстатковАдресный.Упаковка + "; " 
						+ ВыборкаРезультатЗапросаОстатковАдресный.Серия + Символы.ПС;

						НетНаОстатках = Ложь;					  
					КонецЦикла;

					ИнфоТовар = ИнфоТовар + Символы.ПС+ Символы.ПС+ Символы.ПС;
				КонецЕсли;	



				//Затем по обычному регистру на оставщихся складах...
				ЗапросОстатков =Новый Запрос;
				ЗапросОстатков.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
				ЗапросОстатков.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				ЗапросОстатков.УстановитьПараметр("БезОтбораПоСерии", Не ВыборкаРезультатПоискаТовара.ШтрихкодыССериями);
				ЗапросОстатков.УстановитьПараметр("Серия", ВыборкаРезультатПоискаТовара.Серия);
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки

				СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
				ЗапросОстатков.УстановитьПараметр("Склады", СписокСкладов);
				ЗапросОстатков.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество()=0);

				СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
				ЗапросОстатков.УстановитьПараметр("Помещения",СписокПомещений);
				ЗапросОстатков.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество()=0);

				ЗапросОстатков.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТоварыНаСкладахОстатки.Склад,
				|	ТоварыНаСкладахОстатки.Помещение КАК Помещение,
				|	ТоварыНаСкладахОстатки.Номенклатура,
				|	ТоварыНаСкладахОстатки.Характеристика,
				|	ТоварыНаСкладахОстатки.Серия КАК Серия,
				|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) - СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.ТоварыНаСкладах.Остатки(
				|			,
				|			Номенклатура = &ТекущаяНоменклатура
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				|		 		И (&БезОтбораПоСерии ИЛИ Серия = &Серия)
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки
				|				И Характеристика = &ТекущаяХарактеристика) КАК ТоварыНаСкладахОстатки
				|ГДЕ
				|	(&ВсеСклады ИЛИ ТоварыНаСкладахОстатки.Склад В (&Склады))
				|	И 1=1 
				|СГРУППИРОВАТЬ ПО
				|	ТоварыНаСкладахОстатки.Склад,
				|	ТоварыНаСкладахОстатки.Помещение,
				|	ТоварыНаСкладахОстатки.Номенклатура,
				|	ТоварыНаСкладахОстатки.Характеристика,
				|	ТоварыНаСкладахОстатки.Серия
				|ИМЕЮЩИЕ
				| 	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток)  - СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) <> 0
				|УПОРЯДОЧИТЬ ПО
				|	ТоварыНаСкладахОстатки.Склад ВОЗР,
				|	ТоварыНаСкладахОстатки.Номенклатура ВОЗР,
				|	ТоварыНаСкладахОстатки.Характеристика ВОЗР,
				|	ТоварыНаСкладахОстатки.Серия ВОЗР";

				Если УзелПО.УчитыватьОстаткиПоРегиструСвободныеОстатки Тогда
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "ТоварыНаСкладахОстатки.Помещение"			, "Значение(Справочник.СкладскиеПомещения.)");
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "ТоварыНаСкладахОстатки.Серия"				, "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.)");
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "ТоварыНаСкладах"							, "СвободныеОстатки");
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "СвободныеОстаткиОстатки.ВНаличииОстаток"	, "СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток");
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "КОтгрузкеОстаток"							, "ВРезервеСоСкладаОстаток");
				Иначе
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "1=1"										, "(&ВсеПомещения ИЛИ ТоварыНаСкладахОстатки.Помещение В (&Помещения))");
				КонецЕсли;

				ВыборкаРезультатЗапросаОстатков=ЗапросОстатков.Выполнить().Выбрать();
				Если ВыборкаРезультатЗапросаОстатков.Количество()> 0 Тогда   

					ТекущийСклад = Справочники.Склады.ПустаяСсылка();
					ТекущееПомещение = Справочники.СкладскиеПомещения.ПустаяСсылка();

					Пока ВыборкаРезультатЗапросаОстатков.Следующий() Цикл

						Если ВыборкаРезультатЗапросаОстатков.Склад<>ТекущийСклад тогда 
							ТекущийСклад = ВыборкаРезультатЗапросаОстатков.Склад;

							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатков.Склад + Символы.ПС;
						КонецЕсли;

						Если ВыборкаРезультатЗапросаОстатков.Помещение<>ТекущееПомещение и ЗначениеЗаполнено(ВыборкаРезультатЗапросаОстатков.Помещение) тогда 
							ТекущееПомещение = ВыборкаРезультатЗапросаОстатков.Помещение;

							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатков.Помещение + Символы.ПС;
						КонецЕсли;

						ИнфоТовар = ИнфоТовар + ВыборкаРезультатЗапросаОстатков.КоличествоОстаток + " "
						+ ВыборкаРезультатЗапросаОстатков.Номенклатура.ЕдиницаИзмерения + "; "
						+ ВыборкаРезультатЗапросаОстатков.Серия + Символы.ПС;

						НетНаОстатках = Ложь;
					КонецЦикла;
				КонецЕсли;	

				//Нет остатков...
				Если НетНаОстатках тогда
					ИнфоТовар =  "Остатков не числится...";
				КонецЕсли;				

				СтрокаВозврата = ИмяТовара + ИнфоТовар + Символы.ПС + Символы.ПС + Символы.ПС;
			КонецЦикла;

			Возврат ПодготовитьОтветJSON(СтрокаВозврата,,"text");

		Иначе 

			Возврат ПодготовитьОтветJSON("По штрихкоду данных не найдено...",,"text");

		КонецЕсли;

	КонецЕсли;	

КонецФункции

&ИзменениеИКонтроль("ПолучитьИнфо")
Функция РСК_ПолучитьИнфо(УзелПО, Barcode)

	СтруктураОтвета = Новый Структура;

	Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() и (СтрДлина(Barcode) = 68 или СтрДлина(Barcode) = 150) Тогда // Инфо по марке ЕГАИС

		//есть\нет в системе
		//состояние товара - находится на основном складе или в карантине (брак)

		Марка = Barcode;
		ИнфоПоМарке = "";
		ДанныеПомарке = ПолучитьСостояниеАкцизнойМарки(Марка);
		Если ДанныеПомарке <>Неопределено  Тогда
			ИнфоПоМарке = ИнфоПоМарке+ДанныеПомарке.АлкогольнаяПродукция.Наименование + Символы.ПС;
			Если ЗначениеЗаполнено(ДанныеПомарке.СправкаБ) Тогда
				ИнфоПоМарке = ИнфоПоМарке+"СправкаБ: " + ДанныеПомарке.СправкаБ + Символы.ПС;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеПомарке.Статус) Тогда
				ИнфоПоМарке = ИнфоПоМарке+"Статус: " + ДанныеПомарке.Статус + Символы.ПС;
			КонецЕсли;

		Иначе
			ИнфоПоМарке = "НЕ ЧИСЛИТСЯ В СИСТЕМЕ!!!";
		КонецЕсли;

		Возврат ПодготовитьОтветJSON(СтруктураОтвета.Вставить("data", "Акцизная марка"+ Символы.ПС + Марка + Символы.ПС + Символы.ПС + ИнфоПоМарке));


	ИНАЧЕ //ОБЫЧНЫЕ ТОВАРЫ

		СтрокаВозврата = "";
		ВключатьАртикул=УзелПО.ДобавлятьАртикулВНаименование;
		ИспользоватьАртикулКакШтрихкодТовара = УзелПО.ИспользоватьАртикулКакШтрихкодТовара;
		//Сначала ищем ячейку...	
		ТекущаяЯчейка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Barcode);
		ТекущаяЯчейкаНаименование = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ТекущаяЯчейка.Наименование), ТекущаяЯчейка.Код);

		ЗапросПоискЯчейки=Новый Запрос;
		ЗапросПоискЯчейки.УстановитьПараметр("ТекущаяЯчейка", ТекущаяЯчейка);	
		ЗапросПоискЯчейки.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СкладскиеЯчейки.Ссылка КАК Ячейка
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|ГДЕ
		|	СкладскиеЯчейки.Ссылка = &ТекущаяЯчейка";

		ВыборкаРезультатПоискаЯчейки=ЗапросПоискЯчейки.Выполнить().Выбрать();
		Если ВыборкаРезультатПоискаЯчейки.Следующий() Тогда
			ИмяЯчейки = "Ячейка: " + ТекущаяЯчейкаНаименование + Символы.ПС + Символы.ПС;

			ЗапросОстатков = Новый Запрос;
			ЗапросОстатков.УстановитьПараметр("ТекущаяЯчейка", ТекущаяЯчейка);
			ЗапросОстатков.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыВЯчейкахОстатки.Номенклатура,
			|	ТоварыВЯчейкахОстатки.Характеристика,
			|	ТоварыВЯчейкахОстатки.Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка,
			|	ТоварыВЯчейкахОстатки.Ячейка,
			|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток)- СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ТоварыВЯчейках.Остатки(,Ячейка=&ТекущаяЯчейка) КАК ТоварыВЯчейкахОстатки
			|СГРУППИРОВАТЬ ПО
			|	ТоварыВЯчейкахОстатки.Номенклатура,
			|	ТоварыВЯчейкахОстатки.Характеристика,
			|	ТоварыВЯчейкахОстатки.Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка,
			|	ТоварыВЯчейкахОстатки.Ячейка			
			|ИМЕЮЩИЕ
			| 	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) <> 0 
			|УПОРЯДОЧИТЬ ПО
			|	ТоварыВЯчейкахОстатки.Ячейка ВОЗР,
			|	ТоварыВЯчейкахОстатки.Номенклатура ВОЗР,
			|	ТоварыВЯчейкахОстатки.Характеристика ВОЗР,
			|	ТоварыВЯчейкахОстатки.Серия ВОЗР,
			|	ТоварыВЯчейкахОстатки.Упаковка ВОЗР";

			ВыборкаРезультатЗапросаОстатков=ЗапросОстатков.Выполнить().Выбрать();
			Если ВыборкаРезультатЗапросаОстатков.Количество()> 0 Тогда

				ТекущаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
				ТекущаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

				Пока ВыборкаРезультатЗапросаОстатков.Следующий() Цикл

					Если ВыборкаРезультатЗапросаОстатков.Номенклатура<>ТекущаяНоменклатура или ВыборкаРезультатЗапросаОстатков.Характеристика<>ТекущаяХарактеристика Тогда 

						ТекущаяНоменклатура = ВыборкаРезультатЗапросаОстатков.Номенклатура;
						ТекущаяХарактеристика = ВыборкаРезультатЗапросаОстатков.Характеристика;

						СтрокаВозврата = СтрокаВозврата + Символы.ПС + "Товар: " + ?(ВключатьАртикул,ВыборкаРезультатЗапросаОстатков.Номенклатура.Артикул + " ","")
						+ ВыборкаРезультатЗапросаОстатков.Номенклатура + " "
						+ ВыборкаРезультатЗапросаОстатков.Характеристика + "; " + Символы.ПС;
					КонецЕсли;


					СтрокаВозврата = СтрокаВозврата + ВыборкаРезультатЗапросаОстатков.КоличествоОстаток + " "
					+ ВыборкаРезультатЗапросаОстатков.Упаковка + "; " 
					+ ВыборкаРезультатЗапросаОстатков.Серия + Символы.ПС;		
				КонецЦикла;
			Иначе 
				СтрокаВозврата =  "Товаров не числится...";
			КонецЕсли;
			РезСтрока = ИмяЯчейки + СтрокаВозврата;

			СтруктураОтвета.Вставить("data", РезСтрока);
			Возврат ПодготовитьОтветJSON(СтруктураОтвета);

		КонецЕсли;

		//Если ячейки нет, то ищем товар...	

		ЗапросПоискТовара = Новый Запрос;
		ЗапросПоискТовара.УстановитьПараметр("Barcode", Barcode);
		ЗапросПоискТовара.УстановитьПараметр("ИспользоватьАртикулКакШтрихкодТовара", ИспользоватьАртикулКакШтрихкодТовара);
		ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЛОЖЬ КАК ШтрихкодыССериями,
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
		|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
		|	И НЕ ШтрихкодыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Серия,
		|	ИСТИНА,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
		|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
		|	И НЕ ШтрихкодыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		//ВЫБОРКА ССЫЛОК ТОВАРОВ И ХАРАКТЕРИСТИК ПО РАЗНЫМ УСЛОВИЯМ ВЕДЕНИЯ ХАРАКТЕРИСТИК ПРИ ИспользоватьАртикулКакШтрихкодТовара 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//БЕЗ ХАРАКТЕРИСТИК
		|	Номенклатура.Ссылка КАК Номенклатура,
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|	ЛОЖЬ,
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка) КАК Характеристика
		|ИЗ
		| 	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	&ИспользоватьАртикулКакШтрихкодТовара
		|	И Номенклатура.Артикул = &Barcode
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//ИНДИВИДУАЛЬНЫЕ ХАРАКТЕРИСТИКИ
		|	Номенклатура.Ссылка КАК Номенклатура,
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|	ЛОЖЬ,
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
		|ИЗ
		| 	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
		|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|ГДЕ
		|	&ИспользоватьАртикулКакШтрихкодТовара
		|	И Номенклатура.Артикул = &Barcode
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//ОБЩИЕ ХАРАКТЕРИСТИКИ
		|	Номенклатура.Ссылка КАК Номенклатура,
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|	ЛОЖЬ,
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры
		|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|ГДЕ
		|	&ИспользоватьАртикулКакШтрихкодТовара
		|	И Номенклатура.Артикул = &Barcode
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления 
		|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//ОБЩИЕ С ДРУГИМ ВИДОМ ХАРАКТЕРИСТИКИ
		|	Номенклатура.Ссылка КАК Номенклатура,
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|	ЛОЖЬ,
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВладелецХарактеристик
		|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|ГДЕ
		|	&ИспользоватьАртикулКакШтрихкодТовара
		|	И Номенклатура.Артикул = &Barcode
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL";

		ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();

		Если ВыборкаРезультатПоискаТовара.Количество()=0 и ДатаМобайл_ОбщийМодуль.ЕстьМаркировка() и стрДлина(Barcode)>30 Тогда
			//Попробуем найти товар по КМ	
			КМ = Лев(Barcode,31);
			ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 13);
			ЗначениеШтрихкодаДляЗапроса = ""+ЗначениеШтрихкода;
			ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"_","$_");
			ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"%","$%");
			ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкодаДляЗапроса + "%";

			ЗапросПоискТовара = Новый Запрос;
			ЗапросПоискТовара.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", ЗначениеШтрихкодаДляЗапроса);
			ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|	ЛОЖЬ КАК ШтрихкодыССериями,
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки
			|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""
			|	И ШтрихкодыУпаковокТоваров.Номенклатура Ссылка Справочник.Номенклатура
			|	И НЕ ШтрихкодыУпаковокТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";

			ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();

			Если ВыборкаРезультатПоискаТовара.Количество()=0 Тогда

				ТекущийШтрихкод = Сред(Barcode, 3, 14);
				ТекущийШтрихкод = УдалитьЛидирующиеНули(ТекущийШтрихкод);

				ЗапросПоискТовара = Новый Запрос;
				ЗапросПоискТовара.УстановитьПараметр("Barcode", ТекущийШтрихкод);
				ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
				|	ЛОЖЬ КАК ШтрихкодыССериями,
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки
				|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
				|ИЗ
				|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
				|ГДЕ
				|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
				#Удаление
				|	И ШтрихкодыНоменклатуры.Номенклатура Ссылка Справочник.Номенклатура";
				#КонецУдаления
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				|	И ШтрихкодыНоменклатуры.Номенклатура Ссылка Справочник.Номенклатура
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
				|	ШтрихкодыНоменклатуры.Серия КАК Серия,
				|	ИСТИНА КАК ШтрихкодыССериями,
				|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
				|ИЗ
				|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
				|ГДЕ
				|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
				|	И ШтрихкодыНоменклатуры.Номенклатура Ссылка Справочник.Номенклатура";
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки

				ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();

			КонецЕсли;		
		КонецЕсли;		


		Если ВыборкаРезультатПоискаТовара.Количество()>0 Тогда	
			Пока ВыборкаРезультатПоискаТовара.Следующий() Цикл

				НетНаОстатках = Истина;
				ИмяТовара = "Товар: "   +   ?(ВключатьАртикул,ВыборкаРезультатПоискаТовара.Номенклатура.Артикул + " ","")
				+ ВыборкаРезультатПоискаТовара.Номенклатура + " " 
				+ ВыборкаРезультатПоискаТовара.Характеристика + Символы.ПС + Символы.ПС;
				ИнфоТовар = "";

				//Сначала ищем остатки по адресному регистру...
				ЗапросОстатковАдресный =Новый Запрос;
				ЗапросОстатковАдресный.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
				ЗапросОстатковАдресный.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				ЗапросОстатковАдресный.УстановитьПараметр("БезОтбораПоСерии", Не ВыборкаРезультатПоискаТовара.ШтрихкодыССериями);
				ЗапросОстатковАдресный.УстановитьПараметр("Серия", ВыборкаРезультатПоискаТовара.Серия);
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки

				СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
				ЗапросОстатковАдресный.УстановитьПараметр("Склады", СписокСкладов);
				ЗапросОстатковАдресный.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество()=0);

				СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
				ЗапросОстатковАдресный.УстановитьПараметр("Помещения",СписокПомещений);
				ЗапросОстатковАдресный.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество()=0);

				ЗапросОстатковАдресный.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТоварыВЯчейкахОстатки.Ячейка.Владелец КАК Склад,
				|	ТоварыВЯчейкахОстатки.Ячейка.Помещение КАК Помещение,
				|	ТоварыВЯчейкахОстатки.Ячейка,
				|	ТоварыВЯчейкахОстатки.Номенклатура,
				|	ТоварыВЯчейкахОстатки.Характеристика,
				|	ТоварыВЯчейкахОстатки.Серия,
				|	ТоварыВЯчейкахОстатки.Упаковка,
				|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК КоличествоОстаток
				|ИЗ
				| 	РегистрНакопления.ТоварыВЯчейках.Остатки(
				|   	,
				|   	Номенклатура = &ТекущаяНоменклатура
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				|		И (&БезОтбораПоСерии ИЛИ Серия = &Серия)
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки
				|   	 И Характеристика = &ТекущаяХарактеристика) КАК ТоварыВЯчейкахОстатки
				|ГДЕ
				| (&ВсеСклады ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Владелец В (&Склады))
				| И (&ВсеПомещения ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Помещение В (&Помещения))   
				|СГРУППИРОВАТЬ ПО
				|	ТоварыВЯчейкахОстатки.Ячейка.Владелец,
				|	ТоварыВЯчейкахОстатки.Ячейка.Помещение,
				|	ТоварыВЯчейкахОстатки.Ячейка,
				|	ТоварыВЯчейкахОстатки.Номенклатура,
				|	ТоварыВЯчейкахОстатки.Характеристика,
				|	ТоварыВЯчейкахОстатки.Серия,
				|	ТоварыВЯчейкахОстатки.Упаковка
				|ИМЕЮЩИЕ
				| 	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) <> 0 
				|УПОРЯДОЧИТЬ ПО
				|	ТоварыВЯчейкахОстатки.Ячейка.Владелец ВОЗР,
				|	ТоварыВЯчейкахОстатки.Ячейка ВОЗР,
				|	ТоварыВЯчейкахОстатки.Номенклатура ВОЗР,
				|	ТоварыВЯчейкахОстатки.Характеристика ВОЗР,
				|	ТоварыВЯчейкахОстатки.Серия ВОЗР,
				|	ТоварыВЯчейкахОстатки.Упаковка ВОЗР";

				ВыборкаРезультатЗапросаОстатковАдресный=ЗапросОстатковАдресный.Выполнить().Выбрать();
				Если ВыборкаРезультатЗапросаОстатковАдресный.Количество()> 0 Тогда

					ТекущийСклад = Справочники.Склады.ПустаяСсылка();
					ТекущееПомещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
					ТекущаяЯчейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();

					Пока ВыборкаРезультатЗапросаОстатковАдресный.Следующий() Цикл

						Если ВыборкаРезультатЗапросаОстатковАдресный.Склад<>ТекущийСклад Тогда 
							ТекущийСклад = ВыборкаРезультатЗапросаОстатковАдресный.Склад;

							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатковАдресный.Склад + Символы.ПС;
						КонецЕсли;

						Если ВыборкаРезультатЗапросаОстатковАдресный.Помещение<>ТекущееПомещение и ЗначениеЗаполнено(ВыборкаРезультатЗапросаОстатковАдресный.Помещение) Тогда 
							ТекущееПомещение = ВыборкаРезультатЗапросаОстатковАдресный.Помещение;

							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатковАдресный.Помещение + Символы.ПС;
						КонецЕсли;

						Если ВыборкаРезультатЗапросаОстатковАдресный.Ячейка<>ТекущаяЯчейка Тогда 
							ТекущаяЯчейка = ВыборкаРезультатЗапросаОстатковАдресный.Ячейка;
							ТекущаяЯчейкаНаименование = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ВыборкаРезультатЗапросаОстатковАдресный.Ячейка.Наименование), ВыборкаРезультатЗапросаОстатковАдресный.Ячейка.Код);

							ИнфоТовар = ИнфоТовар + Символы.ПС + ТекущаяЯчейкаНаименование + Символы.ПС;
						КонецЕсли;


						ИнфоТовар = ИнфоТовар + ВыборкаРезультатЗапросаОстатковАдресный.КоличествоОстаток + " "
						+ ВыборкаРезультатЗапросаОстатковАдресный.Упаковка + "; " 
						+ ВыборкаРезультатЗапросаОстатковАдресный.Серия + Символы.ПС;

						НетНаОстатках = Ложь;					  
					КонецЦикла;

					ИнфоТовар = ИнфоТовар + Символы.ПС+ Символы.ПС+ Символы.ПС;
				КонецЕсли;	



				//Затем по обычному регистру на оставщихся складах...
				ЗапросОстатков =Новый Запрос;
				ЗапросОстатков.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
				ЗапросОстатков.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				ЗапросОстатков.УстановитьПараметр("БезОтбораПоСерии", Не ВыборкаРезультатПоискаТовара.ШтрихкодыССериями);
				ЗапросОстатков.УстановитьПараметр("Серия", ВыборкаРезультатПоискаТовара.Серия);
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки

				СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
				ЗапросОстатков.УстановитьПараметр("Склады", СписокСкладов);
				ЗапросОстатков.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество()=0);

				СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
				ЗапросОстатков.УстановитьПараметр("Помещения",СписокПомещений);
				ЗапросОстатков.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество()=0);

				ЗапросОстатков.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТоварыНаСкладахОстатки.Склад,
				|	ТоварыНаСкладахОстатки.Помещение КАК Помещение,
				|	ТоварыНаСкладахОстатки.Номенклатура,
				|	ТоварыНаСкладахОстатки.Характеристика,
				|	ТоварыНаСкладахОстатки.Серия,
				|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) - СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.ТоварыНаСкладах.Остатки(
				|			,
				|			Номенклатура = &ТекущаяНоменклатура
				#Вставка
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				|				И (&БезОтбораПоСерии ИЛИ Серия = &Серия)
				//++РС Консалт: Минаков А.С. ЗагрузкаТСД
				#КонецВставки
				|				И Характеристика = &ТекущаяХарактеристика) КАК ТоварыНаСкладахОстатки
				|ГДЕ
				|	(&ВсеСклады ИЛИ ТоварыНаСкладахОстатки.Склад В (&Склады))
				|	И (&ВсеПомещения ИЛИ ТоварыНаСкладахОстатки.Помещение В (&Помещения)) 
				|СГРУППИРОВАТЬ ПО
				|	ТоварыНаСкладахОстатки.Склад,
				|	ТоварыНаСкладахОстатки.Помещение,
				|	ТоварыНаСкладахОстатки.Номенклатура,
				|	ТоварыНаСкладахОстатки.Характеристика,
				|	ТоварыНаСкладахОстатки.Серия
				|ИМЕЮЩИЕ
				| 	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток)  - СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) <> 0
				|УПОРЯДОЧИТЬ ПО
				|	ТоварыНаСкладахОстатки.Склад ВОЗР,
				|	ТоварыНаСкладахОстатки.Номенклатура ВОЗР,
				|	ТоварыНаСкладахОстатки.Характеристика ВОЗР,
				|	ТоварыНаСкладахОстатки.Серия ВОЗР";

				ВыборкаРезультатЗапросаОстатков=ЗапросОстатков.Выполнить().Выбрать();
				Если ВыборкаРезультатЗапросаОстатков.Количество()> 0 Тогда   

					ТекущийСклад = Справочники.Склады.ПустаяСсылка();
					ТекущееПомещение = Справочники.СкладскиеПомещения.ПустаяСсылка();

					Пока ВыборкаРезультатЗапросаОстатков.Следующий() Цикл

						Если ВыборкаРезультатЗапросаОстатков.Склад<>ТекущийСклад Тогда 
							ТекущийСклад = ВыборкаРезультатЗапросаОстатков.Склад;

							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатков.Склад + Символы.ПС;
						КонецЕсли;

						Если ВыборкаРезультатЗапросаОстатков.Помещение<>ТекущееПомещение и ЗначениеЗаполнено(ВыборкаРезультатЗапросаОстатков.Помещение) Тогда 
							ТекущееПомещение = ВыборкаРезультатЗапросаОстатков.Помещение;

							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатков.Помещение + Символы.ПС;
						КонецЕсли;

						ИнфоТовар = ИнфоТовар + ВыборкаРезультатЗапросаОстатков.КоличествоОстаток + " "
						+ ВыборкаРезультатЗапросаОстатков.Номенклатура.ЕдиницаИзмерения + "; "
						+ ВыборкаРезультатЗапросаОстатков.Серия + Символы.ПС;

						НетНаОстатках = Ложь;
					КонецЦикла;
				КонецЕсли;	

				//Нет остатков...
				Если НетНаОстатках Тогда
					ИнфоТовар =  "Остатков не числится...";
				КонецЕсли;				

				СтрокаВозврата = ИмяТовара + ИнфоТовар;
			КонецЦикла;

			СтруктураОтвета.Вставить("data", СтрокаВозврата);

			Возврат ПодготовитьОтветJSON(СтруктураОтвета);

		Иначе 

			СтруктураОтвета.Вставить("data", "По штрихкоду данных не найдено...");
			Возврат ПодготовитьОтветJSON(СтруктураОтвета);
		КонецЕсли;

	КонецЕсли;	

КонецФункции

#КонецОбласти

#Область ЕдиницыИзмерения

&ИзменениеИКонтроль("УстановитьЕдиницу")
Функция РСК_УстановитьЕдиницу(СтрокаТЧ)

	Если СтрокаТЧ.Штрихкод <> "" Тогда

		зпр=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		//|	ВЫБОР
		//|		КОГДА Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)
		//|			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения
		//|		ИНАЧЕ Штрихкоды.Упаковка
		//|	КОНЕЦ КАК ЕИ,
		|	Штрихкоды.Упаковка КАК ЕИ,
		|	Штрихкоды.Номенклатура,
		|	Штрихкоды.Характеристика
		|ПОМЕСТИТЬ тШтрихкоды
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &код
		|	И (&ВсяНоменклатура
		|			ИЛИ Штрихкоды.Номенклатура = &Номенклатура)
		//|	И (&ВсеХарактеристики
		//|			ИЛИ Штрихкоды.Характеристика = &Характеристика)
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Штрихкоды.Упаковка КАК ЕИ,
		|	Штрихкоды.Номенклатура,
		|	Штрихкоды.Характеристика
		|ИЗ
		|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &код
		|	И (&ВсяНоменклатура
		|			ИЛИ Штрихкоды.Номенклатура = &Номенклатура)	
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тШтрихкоды.ЕИ,
		|	тШтрихкоды.Номенклатура,
		|	тШтрихкоды.Характеристика
		|ИЗ
		|	тШтрихкоды КАК тШтрихкоды");

		зпр.УстановитьПараметр("Код",СтрокаТЧ.Штрихкод);
		зпр.УстановитьПараметр("Номенклатура",СтрокаТЧ.Номенклатура);
		//зпр.УстановитьПараметр("Характеристика",СтрокаТЧ.ХарактеристикаНоменклатуры);
		зпр.УстановитьПараметр("ВсяНоменклатура",СтрокаТЧ.Номенклатура.Пустая());
		//зпр.УстановитьПараметр("ВсеХарактеристики",СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая());
		рез=зпр.Выполнить().Выгрузить();
		Если Рез.Количество()>0 Тогда
			СтрокаТЧ.ЕдиницаИзмерения=Рез[0].ЕИ;
			Если СтрокаТЧ.Номенклатура.Пустая() Тогда
				СтрокаТЧ.Номенклатура=Рез[0].Номенклатура;
			КонецЕсли;	
			Если СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая() Тогда
				СтрокаТЧ.ХарактеристикаНоменклатуры=Рез[0].Характеристика;
			КонецЕсли;	
		КонецЕсли;	

		Коэффициент = ?(СтрокаТЧ.ЕдиницаИзмерения.Числитель=0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель)/?(СтрокаТЧ.ЕдиницаИзмерения.Знаменатель=0,1,СтрокаТЧ.ЕдиницаИзмерения.Знаменатель);

		Пересчет = Ложь;

		//Пересчет единиц мерных товаров, учет которых ведется в штуках
		Попытка
			Если 
				НЕ Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения)
				И СтрокаТЧ.Номенклатура.ВесИспользовать 
				И НЕ СтрокаТЧ.Номенклатура.ВесЕдиницаИзмерения.Пустая()
				И СтрокаТЧ.Номенклатура.ВесЧислитель<>0 
				И СтрокаТЧ.ТСД.ПересчитыватьКоличество
				И СтрДлина(СтрокаТЧ.Штрихкод)=5  //только весовые, может не всем подойти, надо закомментировать Тогда
				И СтрокаТЧ.ЕдиницаИзмерения.Пустая() Тогда

				Коэффициент = СтрокаТЧ.Номенклатура.ВесЧислитель;
				Пересчет = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		//

		Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
		ВесЕдиницаИзмерения = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ВесЕдиницаИзмерения");

		Попытка
			Если СтрокаТЧ.ТСД.НеИспользоватьПересчетУпаковок Тогда
				СтрокаТЧ.Количество = СтрокаТЧ.Количество;
			Иначе
				СтрокаТЧ.Количество = ?(Пересчет, СтрокаТЧ.Количество/ВесЕдиницаИзмерения.Числитель/Коэффициент, СтрокаТЧ.Количество/Коэффициент);			
			КонецЕсли;
			СтрокаТЧ.КоэффициентЕдиницы = Коэффициент;
		Исключение
			СтрокаТЧ.Количество = СтрокаТЧ.Количество;
			СтрокаТЧ.КоэффициентЕдиницы = 1;
		КонецПопытки;

	КонецЕсли;

КонецФункции

&ИзменениеИКонтроль("ПолучитьШтрихкодУпаковки")
Функция РСК_ПолучитьШтрихкодУпаковки(лНоменклатура, лХарактеристика, лУпаковка)

	ТекущийШтрихкод = "";

	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &лНоменклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &лХарактеристика
	|	И ШтрихкодыНоменклатуры.Упаковка = &лУпаковка
	|");

	Запрос.УстановитьПараметр("лНоменклатура", лНоменклатура);
	Запрос.УстановитьПараметр("лХарактеристика", лХарактеристика);
	Запрос.УстановитьПараметр("лУпаковка", лУпаковка);

	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Если ЗначениеЗаполнено(Рез.Штрихкод) Тогда
			ТекущийШтрихкод = Рез.Штрихкод;
		КонецЕсли;	
	КонецЕсли;
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	Если ТекущийШтрихкод = "" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихкодыНоменклатуры.Штрихкод
		|ИЗ
		|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &лНоменклатура
		|	И ШтрихкодыНоменклатуры.Характеристика = &лХарактеристика
		|	И ШтрихкодыНоменклатуры.Упаковка = &лУпаковка";
		
		Рез = Запрос.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда
			Если ЗначениеЗаполнено(Рез.Штрихкод) Тогда
				ТекущийШтрихкод = Рез.Штрихкод;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки

	Возврат ТекущийШтрихкод;

КонецФункции

#КонецОбласти

#Область Товары

&ИзменениеИКонтроль("СобратьТовары")
Функция РСК_СобратьТовары(СписокТоваров, УзелПО, СписокХарактеристик, Шаблон, ПакетнаяВыгрузка)

	ОбъектСписка = Новый Массив();

	ТипЦен=УзелПО.ТипЦен;
	ВключатьАртикул=УзелПО.ДобавлятьАртикулВНаименование; 
	ВключатьАртикулВШК = УзелПО.ИспользоватьАртикулКакШтрихкодТовара;	

	ЗапросТоваров=Новый Запрос();

	ЗапросТоваров.УстановитьПараметр("Товар",СписокТоваров);
	ЗапросТоваров.УстановитьПараметр("ВсеТовары",Ложь);	
	Если СписокТоваров.Количество()=0 Тогда
		ЗапросТоваров.УстановитьПараметр("ВсеТовары",Истина);
	КонецЕсли;

	Если СписокХарактеристик = Неопределено Тогда
		ЗапросТоваров.УстановитьПараметр("ВсеХарактеристики",Истина);
		ЗапросТоваров.УстановитьПараметр("Характеристики",СписокХарактеристик);
	Иначе	
		ЗапросТоваров.УстановитьПараметр("Характеристики",СписокХарактеристик);
		ЗапросТоваров.УстановитьПараметр("ВсеХарактеристики",Ложь);	
		Если СписокТоваров.Количество()=0 Тогда
			ЗапросТоваров.УстановитьПараметр("ВсеХарактеристики",Истина);
		КонецЕсли;
	КонецЕсли;

	ЗапросТоваров.УстановитьПараметр("КаталогиТовара",УзелПО.ДоступныеГруппыТоваров.ВыгрузитьКолонку("Номенклатура"));
	ЗапросТоваров.УстановитьПараметр("ВсеКаталоги",Ложь);	
	Если УзелПО.ДоступныеГруппыТоваров.Количество()=0 Тогда
		ЗапросТоваров.УстановитьПараметр("ВсеКаталоги",Истина);
	КонецЕсли;

	СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
	ЗапросТоваров.УстановитьПараметр("Склады",СписокСкладов);
	ЗапросТоваров.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество()=0);

	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	ЗапросТоваров.УстановитьПараметр("Помещения",СписокПомещений);
	ЗапросТоваров.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество()=0);

	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 
	//ВЫБОРКА ССЫЛОК ТОВАРОВ И ХАРАКТЕРИСТИК ПО РАЗНЫМ УСЛОВИЯМ ВЕДЕНИЯ ХАРАКТЕРИСТИК 
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВесМожноУказыватьВДокументах КАК Весовой,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ПОМЕСТИТЬ СписокТоваровОбщий
	|ИЗ
	| 	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|			И (ХарактеристикиНоменклатуры.Ссылка В (&Характеристики) ИЛИ &ВсеХарактеристики)
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	//|	И НЕ Номенклатура.ПометкаУдаления
	|	И (Номенклатура.Ссылка В (&Товар) ИЛИ &ВсеТовары)
	|	И (Номенклатура.Ссылка В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВесМожноУказыватьВДокументах,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|			И (ХарактеристикиНоменклатуры.Ссылка В (&Характеристики) ИЛИ &ВсеХарактеристики)
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	//|	И НЕ Номенклатура.ПометкаУдаления
	|	И (Номенклатура.Ссылка В (&Товар)ИЛИ &ВсеТовары)
	|	И (Номенклатура.Ссылка В ИЕРАРХИИ (&КаталогиТовара)ИЛИ &ВсеКаталоги)
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL   
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВесМожноУказыватьВДокументах,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВладелецХарактеристик
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|			И (ХарактеристикиНоменклатуры.Ссылка В (&Характеристики) ИЛИ &ВсеХарактеристики)
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	//|	И НЕ Номенклатура.ПометкаУдаления
	|	И (Номенклатура.Ссылка В (&Товар) ИЛИ &ВсеТовары)
	|	И (Номенклатура.Ссылка В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL	
	|	
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыСОстатками1С
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(&ВсеСклады ИЛИ Склад В (&Склады)) 
	|				И (&ВсеПомещения ИЛИ Помещение В (&Помещения))
	|				И (Номенклатура.Ссылка В (&Товар) ИЛИ &ВсеТовары)
	|				И (Номенклатура.Ссылка В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|	) КАК СвободныеОстаткиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстаткиОстатки.Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика
	|;
	|
	|&ТекстЗапросаРаспределниеЗапросов
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 
	//ВЫБОРКА ЦЕН И ДОПОЛНИТЕЛЬНЫХ ДАННЫХ ПО ТОВАРАМ
	|	СписокТоваровОбщий.Номенклатура,
	|	СписокТоваровОбщий.Весовой,
	|	СписокТоваровОбщий.Характеристика,
	|	ЛОЖЬ КАК ЭтоНовыйТовар,
	|	ВЫБОР
	|		КОГДА СписокТоваровОбщий.Номенклатура.ПометкаУдаления ИЛИ СписокТоваровОбщий.Характеристика.ПометкаУдаления	             
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить,
	|	ВЫБОР
	|		КОГДА &ВключатьАртикул
	|			ТОГДА ВЫБОР КОГДА СписокТоваровОбщий.Номенклатура.Артикул = """" ТОГДА """" ИНАЧЕ СписокТоваровОбщий.Номенклатура.Артикул + "" "" КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ + СписокТоваровОбщий.Номенклатура.Наименование + "" "" + ЕстьNULL(СписокТоваровОбщий.Характеристика.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ВЫБОР
	|				КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
	|			КОНЕЦ КАК ЧИСЛО(19, 2)), 0) КАК Цена,
	|	ЕСТЬNULL(СписокТоваровОбщий.Номенклатура.ВидНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии,
	//|  СписокЯчеек.АдресХранения
	|	ЕСТЬNULL(ТоварыСОстатками1С.ВНаличии, 0) КАК ВНаличии,
	|	ЕСТЬNULL(ТоварыСОстатками1С.ВРезерве, 0) КАК ВРезерве		 
	|ПОМЕСТИТЬ СписокТоваров
	|ИЗ
	|	СписокТоваровОбщий КАК СписокТоваровОбщий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = СписокТоваровОбщий.Номенклатура 
	|				И ЦеныНоменклатурыСрезПоследних.Характеристика = СписокТоваровОбщий.Характеристика 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
	|			ПО ТоварыСОстатками1С.Номенклатура = СписокТоваровОбщий.Номенклатура
	|				И ТоварыСОстатками1С.Характеристика = СписокТоваровОбщий.Характеристика
	|		&РаспределениеЗапасов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДатаМобайл_НовыеТоварыИзменения.Ссылка,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка),
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА ДатаМобайл_НовыеТоварыИзменения.Ссылка.ПометкаУдаления	             
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДатаМобайл_НовыеТоварыИзменения.Ссылка.Наименование,
	|	0,
	|  ЛОЖЬ,
	//|	""""
	|	0,
	|	0
	|ИЗ
	|	Справочник.ДатаМобайл_НовыеТовары.Изменения КАК ДатаМобайл_НовыеТоварыИзменения
	|ГДЕ
	|	ДатаМобайл_НовыеТоварыИзменения.Узел = &Узел
	|	И (ДатаМобайл_НовыеТоварыИзменения.Ссылка В (&Товар) ИЛИ ДатаМобайл_НовыеТоварыИзменения.Ссылка.Номенклатура В (&Товар) ИЛИ &ВсеТовары)
	|	И НЕ ДатаМобайл_НовыеТоварыИзменения.НомерСообщения ЕСТЬ NULL 
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|  ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//ВЫБОРКА ШТРИХКОДОВ
	|	ВЫРАЗИТЬ(ШтрихкодыНоменклатуры.Штрихкод КАК СТРОКА(60)) КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель,1) =0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         ВЫБОР КОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Знаменатель,1) КОНЕЦ, 1) КАК КФ,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.ЕдиницаИзмерения.Наименование, ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения.Наименование) КАК ЕИ
	|ПОМЕСТИТЬ СписокШтрихкодов
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	(ШтрихкодыНоменклатуры.Номенклатура В ИЕРАРХИИ  (&Товар) ИЛИ &ВсеТовары)
	|	И (ШтрихкодыНоменклатуры.Номенклатура В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ДатаМобайл_НовыеШтрихкоды.ШтрихКод КАК Строка(60)),
	|	ДатаМобайл_НовыеШтрихкоды.Номенклатура,
	|	ДатаМобайл_НовыеШтрихкоды.Характеристика,
	|	ДатаМобайл_НовыеШтрихкоды.Коэффициент,
	|	ДатаМобайл_НовыеШтрихкоды.Наименование
	|ИЗ
	|	РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
	|ГДЕ
	|	(ДатаМобайл_НовыеШтрихкоды.Номенклатура В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
	|	И (ДатаМобайл_НовыеШтрихкоды.Номенклатура В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|	И ДатаМобайл_НовыеШтрихкоды.Номенклатура ССЫЛКА Справочник.Номенклатура
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ДСТ_ШтрихкодыСерий.Штрихкод КАК СТРОКА(60)) КАК Штрихкод,
	|	ДСТ_ШтрихкодыСерий.Номенклатура,
	|	ДСТ_ШтрихкодыСерий.Характеристика,
	|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(ДСТ_ШтрихкодыСерий.Упаковка.Числитель,1) =0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(ДСТ_ШтрихкодыСерий.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         ВЫБОР КОГДА ЕСТЬNULL(ДСТ_ШтрихкодыСерий.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(ДСТ_ШтрихкодыСерий.Упаковка.Знаменатель,1) КОНЕЦ, 1) КАК КФ,
	|	ЕСТЬNULL(ДСТ_ШтрихкодыСерий.Упаковка.ЕдиницаИзмерения.Наименование, ДСТ_ШтрихкодыСерий.Номенклатура.ЕдиницаИзмерения.Наименование) КАК ЕИ
	|ИЗ
	|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ДСТ_ШтрихкодыСерий
	|ГДЕ
	|	(ДСТ_ШтрихкодыСерий.Номенклатура В ИЕРАРХИИ  (&Товар) ИЛИ &ВсеТовары)
	|	И (ДСТ_ШтрихкодыСерий.Номенклатура В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ  
	//СОЕДИНЕНИЕ ТАБЛИЦ ТОВАРОВ И ШТРИХКОДОВ
	|	СписокТоваров.Номенклатура,
	|	СписокТоваров.Весовой,
	|	СписокТоваров.Характеристика,
	|	СписокТоваров.ЭтоНовыйТовар,
	|	СписокТоваров.Удалить,
	|	СписокТоваров.Наименование,
	|	СписокТоваров.Цена,
	|	СписокТоваров.ИспользоватьСерии,
	//|  СписокТоваров.АдресХранения,
	|  СписокТоваров.ВНаличии,
	|  СписокТоваров.ВРезерве,
	|	ЕСТЬNULL(СписокШтрихкодов.Штрихкод,"""") КАК Штрихкод,
	|	ЕСТЬNULL(СписокШтрихкодов.КФ, 1) КАК КФ,
	|  ЕСТЬNULL(СписокШтрихкодов.ЕИ,""шт."") КАК  ЕИ
	|ИЗ
	|	СписокТоваров КАК СписокТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокШтрихкодов КАК СписокШтрихкодов
	|			ПО СписокШтрихкодов.Номенклатура = СписокТоваров.Номенклатура 
	|				И СписокШтрихкодов.Характеристика = СписокТоваров.Характеристика 
	|ИТОГИ ПО 
	|   СписокТоваров.Номенклатура, СписокТоваров.Характеристика
	|   
	|;
	| УНИЧТОЖИТЬ  СписокТоваровОбщий
	|;
	| УНИЧТОЖИТЬ  СписокТоваров
	|;
	| УНИЧТОЖИТЬ  СписокШтрихкодов
	//|;
	//| УНИЧТОЖИТЬ  СписокЯчеек
	|";

	СкорректироватьЗапросПоЦенообразованию25(ТекстЗапроса, "СобратьТовары");
	СкорректироватьЗапросЕслиЕстьРегистрСведенийРаспределениеЗапасов(ТекстЗапроса, "СобратьТовары");

	ЗапросТоваров.Текст=ТекстЗапроса;
	лТипНеопределеннойДлины=Тип("Строка");

	ЗапросТоваров.УстановитьПараметр("Узел",УзелПО);
	ЗапросТоваров.УстановитьПараметр("ТипЦен",ТипЦен);
	ЗапросТоваров.УстановитьПараметр("ВключатьАртикул",ВключатьАртикул);					 
	ЗапросТоваров.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	Товары=ЗапросТоваров.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	

	СтруктураСпискаТоваров = Новый Структура;

	т = 0;
	х = 0;
	ш = 0;

	Пока Товары.Следующий() цикл
		т = т + 1;

		СтрХарактеристика = Товары.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока СтрХарактеристика.Следующий() цикл
			х = х + 1;

			СтрТовара=СтрХарактеристика.Выбрать();
			n = 0;

			Пока СтрТовара.Следующий() цикл
				ш=ш+1;

				Если n=0 Тогда

					ОбъектТовара = ПолучитьСтруктуруОбъектаДляHttp("art");

					ОбъектТовара.id = ?(СтрТовара.ЭтоНовыйТовар, "8n-" + XMLСтрока(СтрТовара.Номенклатура), "8U-" + XMLСтрока(СтрТовара.Номенклатура) + XMLСтрока(СтрТовара.Характеристика));	
					ОбъектТовара.name = ЛЕВ(ЧистаяСтрока(СтрТовара.Наименование), 150);	
					ОбъектТовара.price = СтрТовара.Цена;

					СформироватьЗаголовкиJSONParamsТовара(УзелПО,ОбъектТовара,СтрТовара.Номенклатура,СтрТовара.Характеристика,СтрТовара.ИспользоватьСерии,Шаблон);

					ОбъектТовара.is_deleted = СтрТовара.Удалить;

					ЭтоУслуга = Ложь;
					Попытка 
						Если СтрТовара.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
							ЭтоУслуга = Истина;
						КонецЕсли;
					Исключение
					КонецПопытки;

					Если УзелПО.НеОтображатьОстатки Тогда
						ОбъектТовара.rest = 0;
					ИначеЕсли ЭтоУслуга Тогда
						ОбъектТовара.rest = 999;	
					Иначе
						Итог = (СтрТовара.ВНаличии-СтрТовара.ВРезерве);
						ОбъектТовара.rest = Итог;
					КонецЕсли;

					Если ОбъектТовара.name = "" и СтрТовара.ЭтоНовыйТовар Тогда
						ОбъектТовара.name = "УдалитьНовыйТовар";
						ОбъектТовара.is_deleted = Истина;
					КонецЕсли;	

					Попытка 
						Если ВключатьАртикулВШК Тогда
							Если ЗначениеЗаполнено(СтрТовара.Номенклатура.Артикул) Тогда
								ОбъектШтрихкода = ПолучитьСтруктуруОбъектаДляHttp("barcode");
								ОбъектШтрихкода.value=ЧистаяСтрока(СтрТовара.Номенклатура.Артикул);
								ОбъектШтрихкода.unit_name=ЧистаяСтрока(СтрТовара.Номенклатура.ЕдиницаИзмерения.Наименование);
								ОбъектШтрихкода.unit_coef=1;

								ОбъектШтрихкода.use_sn_mode=2; //как у товара

								ОбъектТовара.barcodes.Добавить(ОбъектШтрихкода);
							КонецЕсли;	
						КонецЕсли;
					Исключение КонецПопытки;	

				КонецЕсли;

				n=n+1;

				Если ТипЗнч(СтрТовара.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					Штрихкод = СтрТовара.ШтрихКод;
				КонецЕсли;

				Если НЕ Штрихкод = "" Тогда

					ОбъектШтрихкода = ПолучитьСтруктуруОбъектаДляHttp("barcode");

					Если СтрДлина(ШтрихКод) = 13 // EAN13
						И Лев(ШтрихКод, 1) = "2" // Внутренний штрихкод
						И Сред(ШтрихКод, 2, 1) = "_" Тогда // Найден префикс весового товара
						Штрихкод =  Сред(ШтрихКод, 3, 5);
						ОбъектШтрихкода.value = ЧистаяСтрока(Штрихкод);
					Иначе	
						ОбъектШтрихкода.value = ЧистаяСтрока(ШтрихКод);
					КонецЕсли;	

					ОбъектШтрихкода.unit_name = ЧистаяСтрока(СтрТовара.ЕИ);

					Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
						ОбъектШтрихкода.unit_coef = 1;
					Иначе	
						ОбъектШтрихкода.unit_coef = СтрТовара.КФ;
					КонецЕсли;

					ОбъектШтрихкода.is_deleted = СтрТовара.Удалить;

					ОбъектТовара.barcodes.Добавить(ОбъектШтрихкода);
				КонецЕсли;			                                                                              
			КонецЦикла;

			Если ОбъектТовара.name = "" или ОбъектТовара.id = "" Тогда
				Продолжить;
			КонецЕсли;

			ОбъектСписка.Добавить(ОбъектТовара);
		КонецЦикла;
	КонецЦикла;

	Если ПакетнаяВыгрузка Тогда

		СтруктураОтвета = Новый Структура;

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НоменклатураИзменения.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
		|ГДЕ
		|	НоменклатураИзменения.Узел = &Узел
		|	И ISNULL(НоменклатураИзменения.НомерСообщения, ИСТИНА) = ИСТИНА";
		Запрос.УстановитьПараметр("Узел", УзелПО);
		Запрос.УстановитьПараметр("НомерСообщения", 0);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда       
			СтруктураОтвета.Вставить("is_finished", Ложь);
		Иначе
			СтруктураОтвета.Вставить("is_finished", Истина);
			Попытка ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.Номенклатура); Исключение КонецПопытки;
		КонецЕсли;	   		

		СтруктураОтвета.Вставить("data", ОбъектСписка);
		Возврат СтруктураОтвета; 
	Иначе
		Возврат ОбъектСписка;
	КонецЕсли;

КонецФункции

&ИзменениеИКонтроль("ОпределитьНоменклатуруПоGTIN")
Функция РСК_ОпределитьНоменклатуруПоGTIN(лНоменклатура, лХарактеристика, GTIN)


	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод");

	Запрос.УстановитьПараметр("Штрихкод",GTIN);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		лНоменклатура = Выборка.Номенклатура;
		лХарактеристика = Выборка.Характеристика;
		#Вставка
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихкодыНоменклатуры.Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика
		|ИЗ
		|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			лНоменклатура = Выборка.Номенклатура;
			лХарактеристика = Выборка.Характеристика;
		КонецЕсли
		//++РС Консалт: Минаков А.С. ЗагрузкаТСД
		#КонецВставки
	КонецЕсли;	 

КонецФункции

&ИзменениеИКонтроль("ПолучитьНоменклатуруПоШтрихкоду")
Функция РСК_ПолучитьНоменклатуруПоШтрихкоду(лШтрихкод)

	Результат = Справочники.Номенклатура.ПустаяСсылка(); 

	Если лШтрихкод = "" Тогда
		Возврат Результат;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	#Удаление
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод");
	#КонецУдаления
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод");
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	Запрос.УстановитьПараметр("Штрихкод", лШтрихкод);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.Номенклатура;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Ценообразование

&ИзменениеИКонтроль("СкорректироватьЗапросПоЦенообразованию25")
Процедура РСК_СкорректироватьЗапросПоЦенообразованию25(ТестЗапросаИсх, ИмяФункции)
	Если НЕ ДатаМобайл_ОбщийМодуль.Ценообразование25() Тогда Возврат; КонецЕсли;

	ТекстЗапроса = ТестЗапросаИсх;

	Если ИмяФункции = "GetCellContent" ИЛИ ИмяФункции = "OnArtScan_Select_Insert_Cells" ИЛИ ИмяФункции = "OnArtScan_Select_Insert_Casual" 
		ИЛИ ИмяФункции = "OnArtScan_Select_EGAIS" ИЛИ ИмяФункции = "ПолучитьСодержимоеУпаковки_НашУпаковочныйЛист" 
		ИЛИ ИмяФункции = "ПолучитьСодержимоеУпаковки_ТиповойУпаковочныйЛист" Тогда

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"РегистрСведений.ЦеныНоменклатуры.СрезПоследних", 
		"РегистрСведений.ЦеныНоменклатуры25.СрезПоследних");

		Если ИмяФункции = "OnArtScan_Select_Insert_Casual" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика",
			"			И (ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО В (ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка))
			|				ИЛИ ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО В
			|					(ВЫБРАТЬ
			|						Хар.ХарактеристикаНоменклатурыДляЦенообразования КАК ХарактеристикаЦО
			|					ИЗ
			|						Справочник.ХарактеристикиНоменклатуры КАК Хар
			|					ГДЕ
			|						Хар.Ссылка В
			|							(ВЫБРАТЬ
			|								ДоступныеТовары.Характеристика КАК Характеристика
			|							ИЗ
			#Удаление
			|								ДоступныеТовары КАК ДоступныеТовары)))");
			#КонецУдаления
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			|								ДоступныеТовары КАК ДоступныеТовары)))
			|			И (ВЫБОР КОГДА ДоступныеТовары.ШтрихкодыССериями 
			|			ТОГДА ЦеныНоменклатурыСрезПоследних.СерияЦО В (ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка))
			|				ИЛИ ЦеныНоменклатурыСрезПоследних.СерияЦО В
			|					(ВЫБРАТЬ
			|						Сер.СерияНоменклатурыДляЦенообразования КАК СерияЦО
			|					ИЗ
			|						Справочник.СерииНоменклатуры КАК Сер
			|					ГДЕ
			|						Сер.Ссылка В
			|							(ВЫБРАТЬ
			|								ДоступныеТовары.Серия КАК Серия
			|							ИЗ
			|								ДоступныеТовары КАК ДоступныеТовары 
			|							ГДЕ 
			|								ДоступныеТовары.ШтрихкодыССериями)) ИНАЧЕ ИСТИНА КОНЕЦ)");
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика",
			#Удаление
			"И ДоступныеТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО");
			#КонецУдаления
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			"И ДоступныеТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО
			|И ВЫБОР КОГДА ДоступныеТовары.ШтрихкодыССериями ТОГДА ДоступныеТовары.Серия.СерияНоменклатурыДляЦенообразования = ЦеныНоменклатурыСрезПоследних.СерияЦО ИНАЧЕ ИСТИНА КОНЕЦ");
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки
		КонецЕсли;

	ИначеЕсли ИмяФункции = "ПолучитьНоменклатуруУпаковкиМДЛП" ИЛИ ИмяФункции = "ПолучитьСодержимоеУпаковки_Маркировка" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"РегистрСведений.ЦеныНоменклатуры.СрезПоследних",                         
		"РегистрСведений.ЦеныНоменклатуры25.СрезПоследних");

	ИначеЕсли ИмяФункции = "СобратьТовары" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"РегистрСведений.ЦеныНоменклатуры.СрезПоследних",                         
		"РегистрСведений.ЦеныНоменклатуры25.СрезПоследних");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"И ЦеныНоменклатурыСрезПоследних.Характеристика = СписокТоваровОбщий.Характеристика", 
		"И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ISNULL(СписокТоваровОбщий.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка))");

	ИначеЕсли ИмяФункции = "ПолучитьЦенуТовара" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"РегистрСведений.ЦеныНоменклатуры.СрезПоследних",                         
		"РегистрСведений.ЦеныНоменклатуры25.СрезПоследних");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"И Характеристика = &ХарактеристикаНоменклатуры",
		"И (ХарактеристикаЦО = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка) ИЛИ ХарактеристикаЦО В (ВЫБРАТЬ ПЕРВЫЕ 1 Хар.ХарактеристикаНоменклатурыДляЦенообразования КАК ХарактеристикаЦО 
		| ИЗ Справочник.ХарактеристикиНоменклатуры КАК Хар ГДЕ Хар.Ссылка = &ХарактеристикаНоменклатуры))");

	ИначеЕсли ИмяФункции = "ПолучитьТоварыБезЗадания" Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЧИСЛО(19, 2))) КАК Цена
		|ПОМЕСТИТЬ ТоварыСЦенами
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|			&ТекущаяДата, 
		|			Номенклатура В (ВЫБРАТЬ
		|									НайденныеТовары.Номенклатура КАК Номенклатура
		|								ИЗ 
		|									НайденныеТовары КАК НайденныеТовары)
		|			И (ХарактеристикаЦО = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|			ИЛИ ХарактеристикаЦО В ( 
		|								ВЫБРАТЬ Хар.ХарактеристикаНоменклатурыДляЦенообразования КАК ХарактеристикаЦО 
		| 									ИЗ Справочник.ХарактеристикиНоменклатуры КАК Хар ГДЕ Хар.Ссылка В (ВЫБРАТЬ
		|									НайденныеТовары.Характеристика КАК Характеристика
		|									ИЗ 
		|									НайденныеТовары КАК НайденныеТовары)))
		|			И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;

	ТестЗапросаИсх = ТекстЗапроса;
КонецПроцедуры

#КонецОбласти

#КонецОбласти











