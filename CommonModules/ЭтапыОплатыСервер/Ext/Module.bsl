
&ИзменениеИКонтроль("ЗаполнитьЭтапыОплатыДокументаПоШаблону")
Процедура РСК_ЗаполнитьЭтапыОплатыДокументаПоШаблону(ЭтапыГрафикаОплаты, ПараметрыЗаполнения)

	РаспределеннаяСуммаОплаты = 0;
	РаспределеннаяСуммаЗалога = 0;
	ТекущийЭтап               = 0;

	ШаблонГрафика             = ПараметрыЗаполнения.ШаблонГрафика;
	Календарь                 = ПараметрыЗаполнения.Календарь;
	СуммаОплатыКРаспределению = ПараметрыЗаполнения.СуммаОплаты;
	СуммаЗалогаКРаспределению = ПараметрыЗаполнения.СуммаЗалогаЗаТару;

	ДатаЗаказа                     = ПараметрыЗаполнения.ДатаЗаказа;
	ДатаСогласования               = ПараметрыЗаполнения.ДатаСогласования;
	СрокПереходаПраваСобственности = ПараметрыЗаполнения.СрокПереходаПраваСобственности;
	#Вставка
	//++ РС Консалт: Трофимов Евгений 02.03.2023 Задача 23985
	//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
	ДатаРазмещения				   = ПараметрыЗаполнения.ДатаРазмещения;
	//-- КонецЗадачи 23985
	#КонецВставки

	ЕстьТара = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты.Добавить(),"СуммаЗалогаЗаТару");
	ЕстьСуммаВзаиморасчетов = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты.Добавить(),"СуммаВзаиморасчетов");
	ЭтапыГрафикаОплаты.Очистить();

	Если ВзаиморасчетыКлиентСервер.ЭтоТабличнаяЧасть(ЭтапыГрафикаОплаты) Тогда
		НовыеЭтапыГрафикаОплаты = ЭтапыГрафикаОплаты.Скопировать();
	Иначе
		НовыеЭтапыГрафикаОплаты = ЭтапыГрафикаОплаты.Выгрузить();
	КонецЕсли;

	Если ТипЗнч(ПараметрыЗаполнения.ДатаОтгрузки) = Тип("Дата") Тогда
		ТаблицаОтгрузок = Новый ТаблицаЗначений();
		ТаблицаОтгрузок.Колонки.Добавить("ДатаОтгрузки");
		ТаблицаОтгрузок.Колонки.Добавить("СуммаПлатежа");
		ТаблицаОтгрузок.Колонки.Добавить("СуммаЗалогаЗаТару");
		НовСтр = ТаблицаОтгрузок.Добавить();
		НовСтр.ДатаОтгрузки = ПараметрыЗаполнения.ДатаОтгрузки;
		НовСтр.СуммаПлатежа = ПараметрыЗаполнения.СуммаОплаты;
		НовСтр.СуммаЗалогаЗаТару = ПараметрыЗаполнения.СуммаЗалогаЗаТару;
	Иначе
		ТаблицаОтгрузок = ПараметрыЗаполнения.ДатаОтгрузки;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаСогласования) Тогда
		ДатаСогласования = ДатаЗаказа;
	КонецЕсли;

	КоличествоЭтапов = ШаблонГрафика.Количество();

	// Определим последний незалоговый этап
	ПоследнийНезалоговыйЭтап = КоличествоЭтапов;
	Пока ПоследнийНезалоговыйЭтап <> 0 И ШаблонГрафика[ПоследнийНезалоговыйЭтап-1].ПроцентПлатежа = 0 Цикл
		ПоследнийНезалоговыйЭтап = ПоследнийНезалоговыйЭтап - 1;
	КонецЦикла;

	// Определим последний залоговый этап
	ПоследнийЗалоговыйЭтап = КоличествоЭтапов;
	Пока ПоследнийЗалоговыйЭтап <> 0 И ШаблонГрафика[ПоследнийЗалоговыйЭтап-1].ПроцентЗалогаЗаТару = 0 Цикл
		ПоследнийЗалоговыйЭтап = ПоследнийЗалоговыйЭтап - 1;
	КонецЦикла;

	// Если накладная вводится по всей сумме заказа, то и суммы в этапах следует взять из закаказа.
	КопироватьСуммуПлатежа = Ложь;
	КопироватьСуммуЗалогаЗаТару = Ложь;
	Если КоличествоЭтапов > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШаблонГрафика[0],"СуммаПлатежа") Тогда
		Если ШаблонГрафика.Итог("СуммаПлатежа") = СуммаОплатыКРаспределению Тогда
			КопироватьСуммуПлатежа = Истина;
		КонецЕсли;
		Если ШаблонГрафика.Итог("СуммаЗалогаЗаТару") = СуммаЗалогаКРаспределению Тогда
			КопироватьСуммуЗалогаЗаТару = Истина;
		КонецЕсли;
	КонецЕсли;

	// Заполним этапы в соответствии с графиком оплаты
	Для Каждого Этап Из ШаблонГрафика Цикл

		ТекущийЭтап                     = ТекущийЭтап + 1;

		Если НЕ (СуммаОплатыКРаспределению <> 0 И Этап.ПроцентПлатежа <> 0
			ИЛИ СуммаЗалогаКРаспределению <> 0 И Этап.ПроцентЗалогаЗаТару <> 0) Тогда
			Продолжить;
		КонецЕсли;

		Если Этап.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа
			#Вставка
			//++ РС Консалт: Трофимов Евгений 02.03.2023 Задача 23985
			//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
			//В эту ветку заходим, если дата оплаты зависит от даты, указанной в шапке заказа (не нужно распределять по нескольким строкам товаров)
			ИЛИ Этап.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыРазмещения
			//-- КонецЗадачи 23985			
			#КонецВставки
			Или Этап.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования Тогда

			ЭтапГрафикаОплаты               = НовыеЭтапыГрафикаОплаты.Добавить();
			ЭтапГрафикаОплаты.ВариантОплаты  = Этап.ВариантОплаты;
			Если НЕ ПараметрыЗаполнения.ЭтоЗаказ 
				И (НЕ ПараметрыЗаполнения.НакладнаяПоЗаказам ИЛИ ПараметрыЗаполнения.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
				И (НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.ГрафикИсполненияДоговора) ИЛИ ПараметрыЗаполнения.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным) Тогда

				Если ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг
					ИЛИ ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитСдвиг
					ИЛИ ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки
					ИЛИ ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления Тогда
					ЭтапГрафикаОплаты.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки;
				Иначе
					ЭтапГрафикаОплаты.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки;
				КонецЕсли;
				ЭтапГрафикаОплаты.Сдвиг          = Этап.Сдвиг;

				Если ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения Тогда
					ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки;
				КонецЕсли;

				Если ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения Тогда
					ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления;
				КонецЕсли;

				СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
				СтруктураПараметров.ВариантОтсчета                 = ЭтапГрафикаОплаты.ВариантОтсчета;
				СтруктураПараметров.Сдвиг                          = ЭтапГрафикаОплаты.Сдвиг;
				СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
				СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
				СтруктураПараметров.ДатаОтгрузки                   = ПараметрыЗаполнения.ДатаОтгрузки;
				СтруктураПараметров.ДатаПереходаПраваСобственности = ПараметрыЗаполнения.ДатаПереходаПраваСобственности;
				СтруктураПараметров.СрокПереходаПраваСобственности = СрокПереходаПраваСобственности;
				СтруктураПараметров.Календарь                      = Календарь;

				Если ЗначениеЗаполнено(Календарь)  Тогда
					ЭтапГрафикаОплаты.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(СтруктураПараметров);
				Иначе
					ЭтапГрафикаОплаты.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(СтруктураПараметров);
				КонецЕсли;

			Иначе
				ЭтапГрафикаОплаты.Сдвиг          = Этап.Сдвиг;
				ЭтапГрафикаОплаты.ВариантОтсчета = Этап.ВариантОтсчета;

				СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
				СтруктураПараметров.ВариантОтсчета                 = ЭтапГрафикаОплаты.ВариантОтсчета;
				СтруктураПараметров.Сдвиг                          = ЭтапГрафикаОплаты.Сдвиг;
				СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
				СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
				СтруктураПараметров.ДатаОтгрузки                   = Дата(1,1,1);
				СтруктураПараметров.ДатаПереходаПраваСобственности = Дата(1,1,1);
				СтруктураПараметров.СрокПереходаПраваСобственности = 0;
				СтруктураПараметров.Календарь                      = Календарь;
				#Вставка
				//++ РС Консалт: Трофимов Евгений 02.03.2023 Задача 23985
				//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
				СтруктураПараметров.ДатаРазмещения				   = ДатаРазмещения; 
				//-- КонецЗадачи 23985				
				#КонецВставки

				Если ЗначениеЗаполнено(Календарь)  Тогда
					ЭтапГрафикаОплаты.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(СтруктураПараметров);
				Иначе
					ЭтапГрафикаОплаты.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(СтруктураПараметров);
				КонецЕсли;
			КонецЕсли;

			Если КопироватьСуммуПлатежа Тогда 
				СуммаЭтапаОплаты                      = Этап.СуммаПлатежа;
			Иначе
				СуммаЭтапаОплаты                      = Окр(СуммаОплатыКРаспределению * Этап.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
			ЭтапГрафикаОплаты.СуммаПлатежа        = ?(ТекущийЭтап = ПоследнийНезалоговыйЭтап, СуммаОплатыКРаспределению - РаспределеннаяСуммаОплаты, СуммаЭтапаОплаты);
			ЭтапГрафикаОплаты.ПроцентПлатежа      = ?(СуммаЭтапаОплаты <> 0, Этап.ПроцентПлатежа, 0);
			РаспределеннаяСуммаОплаты             = РаспределеннаяСуммаОплаты + ЭтапГрафикаОплаты.СуммаПлатежа;

			Если ЕстьТара Тогда

				Если КопироватьСуммуЗалогаЗаТару Тогда
					СуммаЭтапаЗалога                      = Этап.СуммаЗалогаЗаТару;
				Иначе
					СуммаЭтапаЗалога                      = Окр(СуммаЗалогаКРаспределению * Этап.ПроцентЗалогаЗаТару / 100, 2, РежимОкругления.Окр15как20);
				КонецЕсли;

				ЭтапГрафикаОплаты.СуммаЗалогаЗаТару   = ?(ТекущийЭтап = ПоследнийЗалоговыйЭтап, СуммаЗалогаКРаспределению - РаспределеннаяСуммаЗалога, СуммаЭтапаЗалога);
				ЭтапГрафикаОплаты.ПроцентЗалогаЗаТару = ?(Этап.ПроцентЗалогаЗаТару > 0,Этап.ПроцентЗалогаЗаТару, 
				?(СуммаЗалогаКРаспределению<>0 И ЭтапГрафикаОплаты.СуммаЗалогаЗаТару <> 0,
				(Окр(ЭтапГрафикаОплаты.СуммаЗалогаЗаТару/СуммаЗалогаКРаспределению,2,РежимОкругления.Окр15как20))*100,
				0));
				РаспределеннаяСуммаЗалога             = РаспределеннаяСуммаЗалога + ЭтапГрафикаОплаты.СуммаЗалогаЗаТару;
			КонецЕсли;
		Иначе

			Если КопироватьСуммуПлатежа Тогда
				СуммаЭтапаОплатыКРаспределению = Этап.СуммаПлатежа;
			Иначе
				СуммаЭтапаОплатыКРаспределению = ?(ТекущийЭтап = ПоследнийНезалоговыйЭтап, СуммаОплатыКРаспределению - РаспределеннаяСуммаОплаты,
				Окр(СуммаОплатыКРаспределению * Этап.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20));
			КонецЕсли;

			Если КопироватьСуммуЗалогаЗаТару Тогда
				СуммаЭтапаЗалогаКРаспределению = Этап.СуммаЗалогаЗаТару;
			Иначе
				СуммаЭтапаЗалогаКРаспределению = ?(ТекущийЭтап = ПоследнийЗалоговыйЭтап, СуммаЗалогаКРаспределению - РаспределеннаяСуммаЗалога, 
				Окр(СуммаЗалогаКРаспределению * Этап.ПроцентЗалогаЗаТару / 100, 2, РежимОкругления.Окр15как20));
			КонецЕсли;

			РаспределеннаяСуммаОплатыЭтапа = 0;
			РаспределеннаяСуммаЗалогаЭтапа = 0;
			Для Каждого СтрокаДатыОтгрузки Из ТаблицаОтгрузок Цикл

				Если НЕ ЗначениеЗаполнено(СтрокаДатыОтгрузки.ДатаОтгрузки) Тогда
					ДатаОтгрузки = ПараметрыЗаполнения.ДатаЗаказа;
				Иначе
					ДатаОтгрузки = СтрокаДатыОтгрузки.ДатаОтгрузки;
				КонецЕсли;

				СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
				Если Этап.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности
					И НЕ ПараметрыЗаполнения.ЕстьДатаПереходаПраваСобственности
					ИЛИ НЕ ЗначениеЗаполнено(Этап.ВариантОтсчета) Тогда
					СтруктураПараметров.ВариантОтсчета                 = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки;
				Иначе
					СтруктураПараметров.ВариантОтсчета                 = Этап.ВариантОтсчета;
				КонецЕсли;
				СтруктураПараметров.Сдвиг                          = Этап.Сдвиг;
				СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
				СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
				СтруктураПараметров.ДатаОтгрузки                   = ДатаОтгрузки;
				СтруктураПараметров.ДатаПереходаПраваСобственности = ПараметрыЗаполнения.ДатаПереходаПраваСобственности;
				СтруктураПараметров.СрокПереходаПраваСобственности = СрокПереходаПраваСобственности;
				СтруктураПараметров.Календарь                      = Календарь;
				#Вставка
				//++ РС Консалт: Трофимов Евгений 03.03.2023 Задача 23985
				//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДатыОтгрузки, "ДатаПрибытияВПорт") Тогда
					СтруктураПараметров.ДатаПрибытияВПорт			   = СтрокаДатыОтгрузки.ДатаПрибытияВПорт;
					СтруктураПараметров.ДатаОкончанияПроизводства	   = СтрокаДатыОтгрузки.ДатаОкончанияПроизводства;
				КонецЕсли;
				//-- КонецЗадачи 23985				
				#КонецВставки

				Если ЗначениеЗаполнено(Календарь)  Тогда
					ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(СтруктураПараметров);
				Иначе
					ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(СтруктураПараметров);
				КонецЕсли;

				Если (Этап.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения
					Или Этап.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления
					Или Этап.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения
					Или Этап.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки)
					И ЗначениеЗаполнено(ДатаОтгрузки)
					И ДатаПлатежа > ДатаОтгрузки Тогда
					ДатаПлатежа = ДатаОтгрузки;
				КонецЕсли;

				ЭтапГрафикаОплаты               = НовыеЭтапыГрафикаОплаты.Добавить();
				ЭтапГрафикаОплаты.ВариантОплаты = Этап.ВариантОплаты;
				ЭтапГрафикаОплаты.Сдвиг         = Этап.Сдвиг;
				ЭтапГрафикаОплаты.ВариантОтсчета = СтруктураПараметров.ВариантОтсчета;
				ЭтапГрафикаОплаты.ДатаПлатежа   = ДатаПлатежа;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапГрафикаОплаты,"ДатаОтгрузки") Тогда
					ЭтапГрафикаОплаты.ДатаОтгрузки  = СтрокаДатыОтгрузки.ДатаОтгрузки;
				КонецЕсли;

				ЭтапГрафикаОплаты.СуммаПлатежа        = ?(СтрокаДатыОтгрузки = ТаблицаОтгрузок[ТаблицаОтгрузок.Количество()-1] ИЛИ СуммаЭтапаОплатыКРаспределению = 0,
				СуммаЭтапаОплатыКРаспределению - РаспределеннаяСуммаОплатыЭтапа,
				СуммаЭтапаОплатыКРаспределению * (СтрокаДатыОтгрузки.СуммаПлатежа/СуммаОплатыКРаспределению));
				РаспределеннаяСуммаОплатыЭтапа         = РаспределеннаяСуммаОплатыЭтапа + ЭтапГрафикаОплаты.СуммаПлатежа;
				РаспределеннаяСуммаОплаты              = РаспределеннаяСуммаОплаты + ЭтапГрафикаОплаты.СуммаПлатежа;

				Если ЕстьТара Тогда
					ЭтапГрафикаОплаты.СуммаЗалогаЗаТару   = ?(СтрокаДатыОтгрузки = ТаблицаОтгрузок[ТаблицаОтгрузок.Количество()-1] ИЛИ СуммаЭтапаЗалогаКРаспределению = 0,
					СуммаЭтапаЗалогаКРаспределению-РаспределеннаяСуммаЗалогаЭтапа,
					СуммаЭтапаЗалогаКРаспределению * (СтрокаДатыОтгрузки.СуммаЗалогаЗаТару/СуммаЗалогаКРаспределению));
					РаспределеннаяСуммаЗалогаЭтапа        = РаспределеннаяСуммаЗалогаЭтапа + ЭтапГрафикаОплаты.СуммаЗалогаЗаТару;
					РаспределеннаяСуммаЗалога             = РаспределеннаяСуммаЗалога + ЭтапГрафикаОплаты.СуммаЗалогаЗаТару;
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;
	КонецЦикла;

	Если ЕстьСуммаВзаиморасчетов Тогда

		ПоследнийНезалоговыйЭтап = 0;
		ПоследнийЗалоговыйЭтап = 0;
		Для Каждого Стр Из НовыеЭтапыГрафикаОплаты Цикл
			Если Стр.СуммаПлатежа <> 0 Тогда
				ПоследнийНезалоговыйЭтап = Стр;
			КонецЕсли;
			Если ЕстьТара И Стр.СуммаЗалогаЗаТару <> 0 Тогда
				ПоследнийЗалоговыйЭтап = Стр;
			КонецЕсли;
		КонецЦикла;

		СуммаВзаиморасчетовКРаспределению = ПараметрыЗаполнения.СуммаВзаиморасчетов;
		СуммаВзаиморасчетовПоТареКРаспределению = ПараметрыЗаполнения.СуммаВзаиморасчетовПоТаре;
		Для Каждого Стр Из НовыеЭтапыГрафикаОплаты Цикл

			Если Стр <> ПоследнийНезалоговыйЭтап И ПараметрыЗаполнения.СуммаОплаты <> 0 Тогда
				Стр.СуммаВзаиморасчетов = Стр.СуммаПлатежа/ПараметрыЗаполнения.СуммаОплаты * ПараметрыЗаполнения.СуммаВзаиморасчетов
			Иначе
				Стр.СуммаВзаиморасчетов = СуммаВзаиморасчетовКРаспределению;
			КонецЕсли;
			СуммаВзаиморасчетовКРаспределению = СуммаВзаиморасчетовКРаспределению - Стр.СуммаВзаиморасчетов;

			Если ЕстьТара Тогда
				Если Стр <> ПоследнийЗалоговыйЭтап И ПараметрыЗаполнения.СуммаЗалогаЗаТару <> 0 Тогда
					Стр.СуммаВзаиморасчетовПоТаре = Стр.СуммаЗалогаЗаТару/ПараметрыЗаполнения.СуммаЗалогаЗаТару * ПараметрыЗаполнения.СуммаВзаиморасчетовПоТаре
				Иначе
					Стр.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТареКРаспределению;
				КонецЕсли;
				СуммаВзаиморасчетовПоТареКРаспределению = СуммаВзаиморасчетовПоТареКРаспределению - Стр.СуммаВзаиморасчетовПоТаре;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	КолонкиИзмерений = "ВариантОплаты, ДатаПлатежа, Сдвиг, ВариантОтсчета";
	КолонкиРесурсов = "СуммаПлатежа,ПроцентПлатежа"
	+ ?(ЕстьТара,",СуммаЗалогаЗаТару,ПроцентЗалогаЗаТару","")
	+ ?(ЕстьСуммаВзаиморасчетов,",СуммаВзаиморасчетов","")
	+ ?(ЕстьСуммаВзаиморасчетов И ЕстьТара,",СуммаВзаиморасчетовПоТаре","");
	НовыеЭтапыГрафикаОплаты.Свернуть(КолонкиИзмерений, КолонкиРесурсов);

	ЭтапыОплатыКлиентСервер.СортироватьТаблицуЭтапов(НовыеЭтапыГрафикаОплаты);
	ЗаполнитьПроцентыПоСуммам(НовыеЭтапыГрафикаОплаты);

	Для Каждого Стр Из НовыеЭтапыГрафикаОплаты Цикл
		ЗаполнитьЗначенияСвойств(ЭтапыГрафикаОплаты.Добавить(),Стр);
	КонецЦикла;

	Если ПараметрыЗаполнения.ЭтоРасчетыСклиентами И ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах")
		ИЛИ НЕ ПараметрыЗаполнения.ЭтоРасчетыСКлиентами И ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках") Тогда
		ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыГрафикаОплаты, ПараметрыЗаполнения.НетКонтроляПредоплаты);
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ПараметрыЗаполненияЭтаповОплаты")
Функция РСК_ПараметрыЗаполненияЭтаповОплаты()

	СтруктураПараметров = Новый Структура;

	СтруктураПараметров.Вставить("ДатаЗаказа",                        Дата(1,1,1));
	СтруктураПараметров.Вставить("ДатаСогласования",                  Дата(1,1,1));
	СтруктураПараметров.Вставить("ДатаОтгрузки",                      Дата(1,1,1));
	СтруктураПараметров.Вставить("ДатаПереходаПраваСобственности",    Дата(1,1,1));
	СтруктураПараметров.Вставить("СрокПереходаПраваСобственности",    0);
	СтруктураПараметров.Вставить("СуммаОплаты",                       0);
	СтруктураПараметров.Вставить("СуммаЗалогаЗаТару",                 0);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов",               0);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетовПоТаре",         0);

	СтруктураПараметров.Вставить("ГрафикСоглашенияЗаполнен",          Ложь);
	СтруктураПараметров.Вставить("Соглашение",                        Неопределено);
	СтруктураПараметров.Вставить("ГрафикИсполненияДоговора",          Неопределено);
	СтруктураПараметров.Вставить("ГрафикОплаты",                      Неопределено);

	СтруктураПараметров.Вставить("ПорядокРасчетов",                   Неопределено);
	СтруктураПараметров.Вставить("ЭтоРасчетыСКлиентами",              Неопределено);
	СтруктураПараметров.Вставить("ЭтоЗаказ",                          Неопределено);
	СтруктураПараметров.Вставить("НетКонтроляПредоплаты",             Ложь); 
	СтруктураПараметров.Вставить("НакладнаяПоЗаказам",                Неопределено);
	СтруктураПараметров.Вставить("ЕстьДатаПереходаПраваСобственности", Неопределено);

	СтруктураПараметров.Вставить("ШаблонГрафика",                     Неопределено);
	СтруктураПараметров.Вставить("Календарь",                         Неопределено);
	#Вставка
	//++ РС Консалт: Трофимов Евгений 02.03.2023 Задача 23985
	//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
	СтруктураПараметров.Вставить("ДатаРазмещения",                    Дата(1,1,1));
	//-- КонецЗадачи 23985	
	#КонецВставки

	Возврат СтруктураПараметров;

КонецФункции

&ИзменениеИКонтроль("ПроверитьКорректностьЭтаповГрафикаОплаты")
Процедура РСК_ПроверитьКорректностьЭтаповГрафикаОплаты(Знач ЭтапыГрафикаОплаты, Отказ, СтруктураПараметров, УпрощенныйРежимДиалога, ПривязыватьСообщенияКГиперссылке)

	Если ЗначениеЗаполнено(СтруктураПараметров.Дата) Тогда
		ДатаДокумента = НачалоДня(СтруктураПараметров.Дата);
	КонецЕсли;

	Если ТипЗнч(СтруктураПараметров.ДатаОтгрузки) = Тип("Дата") Тогда
		ДатаОтгрузки = СтруктураПараметров.ДатаОтгрузки;
	Иначе
		ДатаОтгрузки = Дата(3000,1,1);
		Для Каждого ДатаОтгрузкиСтроки Из СтруктураПараметров.ДатаОтгрузки Цикл
			ДатаОтгрузки = Мин(ДатаОтгрузки, ДатаОтгрузкиСтроки);
		КонецЦикла;
	КонецЕсли;

	СуммаОплатыВсего = Окр(СтруктураПараметров.СуммаОплатыПоДокументу, 2);
	СуммаЗалогаВсего = Окр(СтруктураПараметров.СуммаЗалогаПоДокументу, 2);

	Если ПривязыватьСообщенияКГиперссылке И ЗначениеЗаполнено(СтруктураПараметров.НадписьЭтапыОплаты) Тогда
		НадписьЭтапыОплаты = СтрЗаменить(СтруктураПараметров.НадписьЭтапыОплаты,"Форма.","");
	Иначе
		НадписьЭтапыОплаты = "";
	КонецЕсли;

	БылиОшибки = Ложь;

	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда

		Если СуммаОплатыВсего <> 0 Или СуммаЗалогаВсего <> 0 Тогда

			Если УпрощенныйРежимДиалога Тогда
				ТекстОшибки = НСтр("ru = 'Необходимо заполнить хотя бы один из этапов оплаты';
				|en = 'Fill in at least one payment step'");
				ПолеОшибки  = "ПроцентПлатежаКредит";
			Иначе
				ТекстОшибки = НСтр("ru = 'Необходимо заполнить этапы графика оплаты';
				|en = 'Payment milestones required'");
				ПолеОшибки  = "ЭтапыГрафикаОплаты";
			КонецЕсли;

			Если ПривязыватьСообщенияКГиперссылке Тогда
				ПолеОшибки = НадписьЭтапыОплаты;
			КонецЕсли;

			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
			БылиОшибки = Истина;

		КонецЕсли;

	Иначе

		УчитыватьВариантОплаты = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0],"ВариантОплаты");

		ИтогПроцентПлатежа = 0;
		ИтогПроцентЗалогаЗаТару = 0;
		ИтогСуммаПлатежа = 0;
		ИтогСуммаЗалогаЗаТару = 0;
		ИтогСуммаОтклонения = 0;
		Для ТекИндекс = 0 По ЭтапыГрафикаОплаты.Количество()-1 Цикл

			ДанныеЭтапа = Новый Структура();
			ДанныеЭтапа.Вставить("НомерСтроки",                  0);
			ДанныеЭтапа.Вставить("ВариантОплаты",     Неопределено);
			ДанныеЭтапа.Вставить("ДатаПлатежа",         '00010101');
			ДанныеЭтапа.Вставить("ПроцентПлатежа",               0);
			ДанныеЭтапа.Вставить("ПроцентЗалогаЗаТару",          0);
			ДанныеЭтапа.Вставить("СуммаПлатежа",                 0);
			ДанныеЭтапа.Вставить("СуммаЗалогаЗаТару",            0);
			ДанныеЭтапа.Вставить("СуммаОтклоненияМерныхТоваров", 0);
			ДанныеЭтапа.Вставить("ВариантОтсчета",    Неопределено);

			ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ЭтапыГрафикаОплаты[ТекИндекс]);
			ИтогПроцентПлатежа = ИтогПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
			ИтогПроцентЗалогаЗаТару = ИтогПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
			ИтогСуммаПлатежа = ИтогСуммаПлатежа + ДанныеЭтапа.СуммаПлатежа;
			ИтогСуммаЗалогаЗаТару = ИтогСуммаЗалогаЗаТару + ДанныеЭтапа.СуммаЗалогаЗаТару;
			ИтогСуммаОтклонения = ИтогСуммаОтклонения + ДанныеЭтапа.СуммаОтклоненияМерныхТоваров;

			АдресОшибки = НСтр("ru = 'в строке %НомерСтроки% списка ""Этапы графика оплаты""';
			|en = 'Line #%НомерСтроки%, tab Payment milestones'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ДанныеЭтапа.НомерСтроки);

			// Все реквизиты этапа оплаты должны быть заполнены

			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ВариантОплаты) И УчитыватьВариантОплаты Тогда

				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Вариант оплаты""';
				|en = 'Payment terms required'");

				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ВариантОплаты");
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				,
				ПолеОшибки,
				,
				Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ВариантОтсчета) И УчитыватьВариантОплаты Тогда

				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитСдвиг
						ИЛИ ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг Тогда
						ТекстОшибки = НСтр("ru = 'Не заполнен ""Вариант отсчета"" по постоплате';
						|en = '""Calculate from"" is not filled in for the postpayment'");
						ПолеОшибки  = "ВариантОтсчетаНеКонтролируемый";
					Иначе
						ТекстОшибки = НСтр("ru = 'Не заполнен ""Вариант отсчета"" по предоплате';
						|en = '""Calculate from"" is not filled in for the prepayment'");
						ПолеОшибки  = "ВариантОтсчетаКонтролируемый";
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Вариант отсчета""';
					|en = 'The ""Calculate from"" column is not filled in'");

					Если ПривязыватьСообщенияКГиперссылке Тогда
						ПолеОшибки = НадписьЭтапыОплаты;
					Иначе
						ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ВариантОтсчета");
					КонецЕсли;

				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				,
				ПолеОшибки,
				,
				Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) Тогда

				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитСдвиг
						ИЛИ ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг Тогда
						ТекстОшибки = НСтр("ru = 'Не заполнена ""Дата платежа"" по постоплате';
						|en = '""Payment date"" is not filled in for the postpayment'");
						ПолеОшибки  = "ДатаКредит";
					Иначе
						ТекстОшибки = НСтр("ru = 'Не заполнена ""Дата платежа"" по предоплате';
						|en = '""Payment date"" is not filled in for prepayment'");
						ПолеОшибки  = "ДатаПредоплата";
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Дата платежа""';
					|en = 'Column ""Payment date"" is not filled in'");
					ПолеОшибки  = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа");
				КонецЕсли;

				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа)
				И Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару)
				И СуммаЗалогаВсего + СуммаОплатыВсего > 0
				И ((ДанныеЭтапа.СуммаПлатежа + ДанныеЭтапа.СуммаЗалогаЗаТару) / (СуммаЗалогаВсего+СуммаОплатыВсего) >= 0.0001
				ИЛИ ДанныеЭтапа.СуммаПлатежа + ДанныеЭтапа.СуммаЗалогаЗаТару = 0) Тогда

				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Процент платежа""';
				|en = 'Payment percentage required'");

				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ПроцентПлатежа");
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				,
				ПолеОшибки,
				,
				Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаПлатежа)
				И ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа)
				И СуммаОплатыВсего <> 0 Тогда

				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Сумма платежа""';
				|en = 'Column ""Payment amount"" is not filled in'");

				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаПлатежа");
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				,
				ПолеОшибки,
				,
				Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаЗалогаЗаТару)
				И ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) 
				И СуммаЗалогаВсего > 0 Тогда

				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Сумма залога за тару""';
				|en = 'Column ""Packaging deposit value"" is not filled in'");

				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаЗалогаЗаТару");
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				,
				ПолеОшибки,
				,
				Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			#Вставка
			//++ РС Консалт: Трофимов Евгений 03.03.2023 Задача 23985
			//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
			НепроверяемыеВариантыОтсчета = Новый Массив;
			НепроверяемыеВариантыОтсчета.Добавить(Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыРазмещения);
			НепроверяемыеВариантыОтсчета.Добавить(Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОкончанияПроизводства);
			НепроверяемыеВариантыОтсчета.Добавить(Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОкончанияПроизводства);
			НепроверяемыеВариантыОтсчета.Добавить(Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыПрибытияВПорт);
			//-- КонецЗадачи 23985			
			#КонецВставки
			Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) 
				И ЗначениеЗаполнено(СтруктураПараметров.Дата) 
				И ДанныеЭтапа.ДатаПлатежа < ДатаДокумента
				#Вставка
				//++ РС Консалт: Трофимов Евгений 03.03.2023 Задача 23985
				//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
				И НепроверяемыеВариантыОтсчета.Найти(ДанныеЭтапа.ВариантОтсчета) = Неопределено
				//-- КонецЗадачи 23985			
				#КонецВставки
				И СтруктураПараметров.ЭтоЗаказ Тогда

				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитСдвиг
						ИЛИ ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг Тогда
						ПолеОшибки = "ДатаКредит";
					Иначе
						ПолеОшибки = "ДатаПредоплата";
					КонецЕсли;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа");
				КонецЕсли;

				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				КонецЕсли;

				ТекстОшибки = НСтр("ru = 'Дата платежа должна быть не меньше даты документа %ДатаДокумента%';
				|en = 'Payment date must be not earlier than document date %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(СтруктураПараметров.Дата, "ДЛФ=DD"));

				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

		КонецЦикла;

		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%

		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда

			Если ИтогПроцентПлатежа <> 100 И СуммаОплатыВсего - СуммаЗалогаВсего > 0 Тогда

				ТекстОшибки = НСтр("ru = 'Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';
				|en = 'Payment percent at all stages ""%ПроцентПоЭтапам%%"" should be equal to ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентПлатежа);

				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ?(УпрощенныйРежимДиалога, "ПроцентПлатежаКредит", "ЭтапыГрафикаОплаты[0].ПроцентПлатежа");
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				ПолеОшибки,
				,
				Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

			Если ИтогСуммаЗалогаЗаТару + ИтогСуммаОтклонения -(СуммаОплатыВсего - ИтогСуммаПлатежа) 
				<> СуммаЗалогаВсего И СуммаЗалогаВсего <> 0 Тогда

				ТекстОшибки = НСтр("ru = 'Процент залога за тару по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';
				|en = 'Percent of the packaging deposit for all steps ""%ПроцентПоЭтапам%%"" should be equal to ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентЗалогаЗаТару);

				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				Иначе
					ПолеОшибки = ?(УпрощенныйРежимДиалога, "ПроцентЗалогаЗаТаруКредит", "ЭтапыГрафикаОплаты[0].ПроцентЗалогаЗаТару");
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				ПолеОшибки,
				,
				Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

		КонецЕсли;

		// Сумма платежей в в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций.

		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда

			Если СуммаОплатыВсего <> 0 И ИтогСуммаПлатежа <> СуммаОплатыВсего Тогда

				ТекстОшибки = НСтр("ru = 'Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы документа ""%СуммаВсего% %Валюта%""';
				|en = 'Payment amount of all steps ""%СуммаПоЭтапам% %Валюта%"" should not differ from the document amount ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаПлатежа);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаОплатыВсего - СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);

				Если УпрощенныйРежимДиалога Тогда
					Если ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления Тогда
						ПолеОшибки = "СуммаПлатежаПредоплата";
					Иначе
						ПолеОшибки = "СуммаПлатежаКредит";
					КонецЕсли;
				Иначе
					ПолеОшибки = "ЭтапыГрафикаОплаты[0].СуммаПлатежа";
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

			Если СуммаЗалогаВсего <> 0 И ИтогСуммаЗалогаЗаТару <> СуммаЗалогаВсего Тогда

				ТекстОшибки = НСтр("ru = 'Сумма залога за тару по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы залога по документу ""%СуммаВсего% %Валюта%""';
				|en = 'Packaging deposit value by all steps ""%СуммаПоЭтапам% %Валюта%"" should not differ from a deposit value against document ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаЗалогаЗаТару);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);

				Если УпрощенныйРежимДиалога Тогда
					Если ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления Тогда
						ПолеОшибки = "СуммаЗалогаЗаТаруПредоплата";
					Иначе
						ПолеОшибки = "СуммаЗалогаЗаТаруКредит";
					КонецЕсли;
				Иначе
					ПолеОшибки = "ЭтапыГрафикаОплаты[0].СуммаЗалогаЗаТару";
				КонецЕсли;

				Если ПривязыватьСообщенияКГиперссылке Тогда
					ПолеОшибки = НадписьЭтапыОплаты;
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				БылиОшибки = Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьЭтапыОплатыДокументаПоЗаказам")
Процедура РСК_ЗаполнитьЭтапыОплатыДокументаПоЗаказам(ЭтапыГрафикаОплаты, Параметры)

	ДатаОтгрузки = ?(Параметры.ДатаОтгрузки=Дата(1,1,1), НачалоДня(ТекущаяДатаСеанса()), Параметры.ДатаОтгрузки);

	ТекстЗапроса = "
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ &ТаблицаТовары КАК ТаблицаТовары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Соглашение.ГрафикОплаты.Календарь, Соглашения.Календарь) КАК Календарь,
	|	Соглашения.СрокПереходаПраваСобственности КАК СрокПереходаПраваСобственности
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК Соглашения
	|ГДЕ
	|	Соглашения.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Соглашения.Календарь КАК Календарь,
	|	Соглашения.СрокПереходаПраваСобственности КАК СрокПереходаПраваСобственности
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК Соглашения
	|ГДЕ
	|	Соглашения.Ссылка = &Соглашение
	|;
	|ВЫБРАТЬ
	|	ДанныеДокумента.Заказ                    КАК Заказ,
	|	ДанныеДокумента.Заказ.Дата               КАК ДатаЗаказа,
	|	ДанныеДокумента.Заказ.ДатаСогласования   КАК ДатаСогласования,
	|	ВЫБОР КОГДА &ИспользоватьРасширенныеВозможностиЗаказа 
	|		ТОГДА ДанныеДокумента.СверхЗаказа
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                    КАК СверхЗаказа,
	|	СУММА(ДанныеДокумента.СуммаПлатежа)      КАК СуммаПлатежа,
	|	ВЫБОР КОГДА СУММА(ДанныеДокумента.СуммаВзаиморасчетов) = 0 
	|		ТОГДА СУММА(ДанныеДокумента.СуммаПлатежа) 
	|		ИНАЧЕ СУММА(ДанныеДокумента.СуммаВзаиморасчетов)
	|	КОНЕЦ                                    КАК СуммаВзаиморасчетов,
	|	СУММА(ДанныеДокумента.СуммаЗалогаЗаТару) КАК СуммаЗалогаЗаТару,
	|	ВЫБОР КОГДА СУММА(ДанныеДокумента.СуммаВзаиморасчетовПоТаре) = 0 
	|		ТОГДА СУММА(ДанныеДокумента.СуммаЗалогаЗаТару) 
	|		ИНАЧЕ СУММА(ДанныеДокумента.СуммаВзаиморасчетовПоТаре)
	|	КОНЕЦ                                    КАК СуммаВзаиморасчетовПоТаре
	|ИЗ
	|	ВтДанныеДокумента КАК ДанныеДокумента
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Заказ,
	|	ДанныеДокумента.СверхЗаказа
	|;";

	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Заказы.Заказ КАК Заказ,
	|	Заказы.Сдвиг КАК Сдвиг,
	|	Заказы.ВариантОплаты КАК ВариантОплаты,
	|	Заказы.ВариантОтсчета КАК ВариантОтсчета,
	|	Заказы.ДатаПлатежа КАК ДатаПлатежа,
	|	Заказы.СуммаПлатежа КАК СуммаПлатежа,
	|	Заказы.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|	Заказы.ПроцентПлатежа КАК ПроцентПлатежа,
	|	Заказы.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару
	|ИЗ ("; //@Query-part-1

	Если ВзаиморасчетыКлиентСервер.ЭтоТабличнаяЧасть(ЭтапыГрафикаОплаты) Тогда
		СписокТипов = ЭтапыГрафикаОплаты.Колонки.Заказ.ТипЗначения.Типы();
	Иначе
		ТаблицаЗначений = ЭтапыГрафикаОплаты.Выгрузить(); //ТаблицаЗначений
		СписокТипов = ТаблицаЗначений.Колонки.Заказ.ТипЗначения.Типы();
	КонецЕсли;

	Для Каждого Тип Из СписокТипов Цикл

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Заказы.Ссылка КАК Заказ,
		|	Заказы.Сдвиг КАК Сдвиг,
		|	Заказы.ВариантОплаты КАК ВариантОплаты,
		|	Заказы.ВариантОтсчета КАК ВариантОтсчета,
		|	Заказы.ДатаПлатежа КАК ДатаПлатежа,
		|	Заказы.СуммаПлатежа КАК СуммаПлатежа,
		|	Заказы.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
		|	Заказы.ПроцентПлатежа КАК ПроцентПлатежа,
		|	Заказы.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару
		|ИЗ
		|	&ЭтапыГрафикаОплаты КАК Заказы
		|ГДЕ
		|	Заказы.Ссылка В (&СписокЗаказов)
		|";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтапыГрафикаОплаты", Метаданные.НайтиПоТипу(Тип).ПолноеИмя()+".ЭтапыГрафикаОплаты");

		Если Тип <> СписокТипов[СписокТипов.Количество()-1] Тогда

			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|"

		КонецЕсли;

	КонецЦикла;

	ТекстЗапроса = ТекстЗапроса + ") КАК Заказы
	|
	|";

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаТовары", Параметры.ТабличнаяЧасть);
	Запрос.УстановитьПараметр("СписокЗаказов", Параметры.ТабличнаяЧасть.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Соглашение", Параметры.Соглашение);
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказа",
	НЕ Параметры.ЭтоРасчетыСКлиентами ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));

	УстановитьПривилегированныйРежим(Истина);
	Результаты = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);

	ДанныеСоглашения = Результаты[1].Выгрузить();
	Заказы           = Результаты[2].Выгрузить();
	СтрокиЭтапов     = Результаты[3].Выгрузить();
	СтрокиЭтапов.Индексы.Добавить("Заказ");

	ЭтапыГрафикаОплаты.Очистить();

	Если ДанныеСоглашения.Количество() > 0 Тогда
		Календарь = ДанныеСоглашения[0].Календарь;
		СрокПереходаПрава = ДанныеСоглашения[0].СрокПереходаПраваСобственности;
	Иначе
		Календарь = Справочники.ПроизводственныеКалендари.ПустаяСсылка();
		СрокПереходаПрава = 0;
	КонецЕсли;

	Если НЕ ВзаиморасчетыКлиентСервер.ЭтоТабличнаяЧасть(ЭтапыГрафикаОплаты) Тогда
		ЭтапыЗаказа = ЭтапыГрафикаОплаты.Выгрузить();
		ЭтапыГрафикаОплатыНовые = ЭтапыГрафикаОплаты.Выгрузить();
	Иначе
		ЭтапыЗаказа = ЭтапыГрафикаОплаты.Скопировать();
		ЭтапыГрафикаОплатыНовые = ЭтапыГрафикаОплаты.Скопировать();
	КонецЕсли;

	Для Каждого СтрокаЗаказа Из Заказы Цикл

		ПараметрыЗаполнения = ПараметрыЗаполненияЭтаповОплаты();
		ПараметрыЗаполнения.ДатаЗаказа = СтрокаЗаказа.ДатаЗаказа;
		ПараметрыЗаполнения.ДатаСогласования = СтрокаЗаказа.ДатаСогласования;
		ПараметрыЗаполнения.ДатаОтгрузки = ДатаОтгрузки;
		ПараметрыЗаполнения.ДатаПереходаПраваСобственности = Параметры.ДатаПереходаПраваСобственности;
		ПараметрыЗаполнения.ЕстьДатаПереходаПраваСобственности = Параметры.ЕстьДатаПереходаПраваСобственности;
		ПараметрыЗаполнения.Соглашение = Параметры.Соглашение;
		ПараметрыЗаполнения.СрокПереходаПраваСобственности = СрокПереходаПрава;
		ПараметрыЗаполнения.СуммаЗалогаЗаТару = СтрокаЗаказа.СуммаЗалогаЗаТару;
		ПараметрыЗаполнения.СуммаОплаты = СтрокаЗаказа.СуммаПлатежа;
		ПараметрыЗаполнения.Календарь = Календарь;
		ПараметрыЗаполнения.ШаблонГрафика = СтрокиЭтапов.Скопировать(Новый Структура("Заказ",СтрокаЗаказа.Заказ));
		ПараметрыЗаполнения.НакладнаяПоЗаказам = Истина;
		ПараметрыЗаполнения.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам;
		ПараметрыЗаполнения.ЭтоЗаказ = Ложь;
		ПараметрыЗаполнения.ЭтоРасчетыСКлиентами = Параметры.ЭтоРасчетыСКлиентами;
		#Вставка
		//++ РС Консалт: Трофимов Евгений 06.03.2023 Задача 23985
		//e1cib/data/Документ.Задание?ref=b37a5a78714d889647e1e0192b7e7134
		Если ТипЗнч(СтрокаЗаказа.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаДатЗаказа = Параметры.ТабличнаяЧасть.Найти(СтрокаЗаказа.Заказ, "Заказ");
			Если СтрокаДатЗаказа <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДатЗаказа, "ДатаПрибытияВПорт") Тогда
				ПараметрыЗаполнения.ДатаРазмещения = СтрокаДатЗаказа.ДатаРазмещения;
				ТаблицаОтгрузок = Новый ТаблицаЗначений();
				ТаблицаОтгрузок.Колонки.Добавить("ДатаОтгрузки");
				ТаблицаОтгрузок.Колонки.Добавить("СуммаПлатежа");
				ТаблицаОтгрузок.Колонки.Добавить("СуммаЗалогаЗаТару");
				ТаблицаОтгрузок.Колонки.Добавить("ДатаПрибытияВПорт");
				ТаблицаОтгрузок.Колонки.Добавить("ДатаОкончанияПроизводства");
				НовСтр = ТаблицаОтгрузок.Добавить();
				НовСтр.ДатаОтгрузки = ПараметрыЗаполнения.ДатаОтгрузки;
				НовСтр.СуммаПлатежа = ПараметрыЗаполнения.СуммаОплаты;
				НовСтр.СуммаЗалогаЗаТару = ПараметрыЗаполнения.СуммаЗалогаЗаТару;
				НовСтр.ДатаПрибытияВПорт = СтрокаДатЗаказа.ДатаПрибытияВПорт;
				НовСтр.ДатаОкончанияПроизводства = СтрокаДатЗаказа.ДатаОкончанияПроизводства;
				ПараметрыЗаполнения.ДатаОтгрузки = ТаблицаОтгрузок;
			КонецЕсли;
		КонецЕсли;
		//-- КонецЗадачи 23985		
		#КонецВставки

		ЗаполнитьЭтапыОплатыДокументаПоШаблону(ЭтапыЗаказа, ПараметрыЗаполнения);

		СуммаВзаиморасчетовКРаспределению = СтрокаЗаказа.СуммаВзаиморасчетов;
		СуммаВзаиморасчетовПоТареКРаспределению = СтрокаЗаказа.СуммаВзаиморасчетовПоТаре;

		Для Каждого Стр Из ЭтапыЗаказа Цикл
			НовСтр = ЭтапыГрафикаОплатыНовые.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			НовСтр.Заказ = СтрокаЗаказа.Заказ;
			НовСтр.СверхЗаказа = СтрокаЗаказа.СверхЗаказа;

			Если Стр = ЭтапыЗаказа[ЭтапыЗаказа.Количество()-1] Тогда
				НовСтр.СуммаВзаиморасчетов = СуммаВзаиморасчетовКРаспределению;
				НовСтр.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТареКРаспределению;
			Иначе
				Если СтрокаЗаказа.СуммаПлатежа > 0 Тогда
					НовСтр.СуммаВзаиморасчетов = СтрокаЗаказа.СуммаВзаиморасчетов * НовСтр.СуммаПлатежа / СтрокаЗаказа.СуммаПлатежа;
				КонецЕсли;
				Если СтрокаЗаказа.СуммаЗалогаЗаТару > 0 Тогда
					НовСтр.СуммаВзаиморасчетовПоТаре = СтрокаЗаказа.СуммаВзаиморасчетовПоТаре * НовСтр.СуммаЗалогаЗаТару / СтрокаЗаказа.СуммаЗалогаЗаТару;
				КонецЕсли;
			КонецЕсли;

			СуммаВзаиморасчетовКРаспределению = СуммаВзаиморасчетовКРаспределению - НовСтр.СуммаВзаиморасчетов;
			СуммаВзаиморасчетовПоТареКРаспределению = СуммаВзаиморасчетовПоТареКРаспределению - НовСтр.СуммаВзаиморасчетовПоТаре;

		КонецЦикла;

		ЭтапыЗаказа.Очистить();

	КонецЦикла;

	КолонкиИзмерений = "Заказ,СверхЗаказа,ВариантОплаты,ДатаПлатежа,Сдвиг,ВариантОтсчета";
	КолонкиРесурсов = "СуммаПлатежа,ПроцентПлатежа,СуммаЗалогаЗаТару,ПроцентЗалогаЗаТару,СуммаВзаиморасчетов,СуммаВзаиморасчетовПоТаре";

	ЭтапыГрафикаОплатыНовые.Свернуть(КолонкиИзмерений,КолонкиРесурсов);

	ЗаполнитьПроцентыПоСуммам(ЭтапыГрафикаОплатыНовые);
	ЭтапыОплатыКлиентСервер.СортироватьТаблицуЭтапов(ЭтапыГрафикаОплатыНовые);

	Для Каждого Стр Из ЭтапыГрафикаОплатыНовые Цикл
		ЗаполнитьЗначенияСвойств(ЭтапыГрафикаОплаты.Добавить(),Стр);
	КонецЦикла;

КонецПроцедуры
