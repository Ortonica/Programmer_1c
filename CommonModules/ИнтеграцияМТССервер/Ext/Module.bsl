
Функция ПолучитьАктивныеЗадачи() Экспорт
	ТекстЗапроса =	  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	  |	СостоянияВыполненияЗадачМТСКоординатор.IDЗадачи
	              	  |ИЗ
	              	  |	РегистрСведений.СостоянияВыполненияЗадачМТСКоординатор КАК СостоянияВыполненияЗадачМТСКоординатор
	              	  |ГДЕ
	              	  |	СостоянияВыполненияЗадачМТСКоординатор.Статус = &Статус";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗадачМТСКоординатор.Отправлена);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("IdЗадачи");
КонецФункции

Процедура ЗаписатьВРегистрСостоянияВыполненияЗадачМТСКоординатор(Документ, Статус, ID, Дата, Приоритет) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СостоянияВыполненияЗадачМТСКоординатор.СоздатьМенеджерЗаписи();
	Если Документ = "" Тогда // если задача обновляется регламентным заданием, то документ неизвестен, находим
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СостоянияВыполненияЗадачМТСКоординатор.Документ,
		               |	СостоянияВыполненияЗадачМТСКоординатор.Приоритет
		               |ИЗ
		               |	РегистрСведений.СостоянияВыполненияЗадачМТСКоординатор КАК СостоянияВыполненияЗадачМТСКоординатор
		               |ГДЕ
		               |	СостоянияВыполненияЗадачМТСКоординатор.IDЗадачи = &IDЗадачи";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("IdЗадачи", ID);
		Рез = Запрос.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда
			МенеджерЗаписи.Документ = Рез.Документ;
		Иначе
			Возврат;  // надо обновить статус задачи, а не нашёлся документ
		КонецЕсли;	
	Иначе	
		МенеджерЗаписи.Документ = Документ;
	КонецЕсли;
	МенеджерЗаписи.Статус   = Перечисления.СтатусыЗадачМТСКоординатор[Статус];
	МенеджерЗаписи.IDЗадачи = ID;
	МенеджерЗаписи.Период   = Дата;
	МенеджерЗаписи.Приоритет   = Приоритет;
	МенеджерЗаписи.Записать();	
КонецПроцедуры	


#Область АктыВыдачиТСР

Процедура ПерезаписатьАктНаСервере(Ссылка,СтатусАкта) Экспорт
	
	АктОбъект = Ссылка.ПолучитьОбъект();
	АктОбъект.Статус = СтатусАкта;
	Попытка
		АктОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьАктивныеЗадачиПоАктам() Экспорт
	ТекстЗапроса =	  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостоянияВыполненияЗадачМТСКоординатор.IDЗадачи
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияЗадачМТСКоординатор КАК СостоянияВыполненияЗадачМТСКоординатор
	|ГДЕ
	|	СостоянияВыполненияЗадачМТСКоординатор.Статус = &Статус
	|	И ТИПЗНАЧЕНИЯ(СостоянияВыполненияЗадачМТСКоординатор.Документ) = ТИП(Документ.АктВыдачиТСР)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗадачМТСКоординатор.Отправлена);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("IdЗадачи");
КонецФункции

Функция ПолучитьСтатусСсылкаАкта(IdЗадачи)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияВыполненияЗадачМТСКоординаторСрезПоследних.Документ.Статус КАК Статус,
	|	СостоянияВыполненияЗадачМТСКоординаторСрезПоследних.Документ.Ссылка КАК Ссылка,
	|	СостоянияВыполненияЗадачМТСКоординаторСрезПоследних.Статус КАК СтатусЗадачи
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияЗадачМТСКоординатор.СрезПоследних(, ) КАК СостоянияВыполненияЗадачМТСКоординаторСрезПоследних
	|ГДЕ
	|	СостоянияВыполненияЗадачМТСКоординаторСрезПоследних.IDЗадачи = &IDЗадачи";
	
	Запрос.УстановитьПараметр("IDЗадачи", IDЗадачи);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		ВозвращаемаяСтруктура = Новый Структура;
		ВозвращаемаяСтруктура.Вставить("Ссылка",РезультатЗапроса[0].Ссылка);
		ВозвращаемаяСтруктура.Вставить("Статус",РезультатЗапроса[0].Статус);
		ВозвращаемаяСтруктура.Вставить("СтатусЗадачи",РезультатЗапроса[0].СтатусЗадачи);

		Возврат ВозвращаемаяСтруктура;
	Иначе
		Возврат Неопределено
	КонецЕсли

КонецФункции

#КонецОбласти



#Область ОбновлениеЗадачПоАктам
Процедура ОбновитьСтатусыЗадачПоАктамВыдачиТСР () Экспорт
	
	МассивЗадач = ПолучитьАктивныеЗадачиПоАктам();	
	ЗаписатьИзмененияПоМассивуЗадач(МассивЗадач);
	ПереписатьСтатусыАктовВыдачи(МассивЗадач);
	
КонецПроцедуры

Процедура ПереписатьСтатусыАктовВыдачи(МассивЗадач);
	Для Каждого Строка ИЗ МассивЗадач Цикл	
		
		СтатусСсылкаАкта = ИнтеграцияМТССервер.ПолучитьСтатусССылкаАкта(Строка);	
		
		Если  СтатусСсылкаАкта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		АктСсылка           = СтатусСсылкаАкта.Ссылка;
		АктСтатус           = СтатусСсылкаАкта.Статус;
		ТекущийСтатусЗадачи = СтатусСсылкаАкта.СтатусЗадачи;
		
		Если АктСтатус = Перечисления.СтатусыВыполненияКонтрактов.Отгружен
			ИЛИ АктСтатус = Перечисления.СтатусыВыполненияКонтрактов.Доставлен Тогда
			Если ТекущийСтатусЗадачи = Перечисления.СтатусыЗадачМТСКоординатор.Выполнена 
				И АктСтатус = Перечисления.СтатусыВыполненияКонтрактов.Отгружен Тогда
				ПерезаписатьАктНаСервере(АктССылка,Перечисления.СтатусыВыполненияКонтрактов.Доставлен);			
			ИначеЕсли АктСтатус = Перечисления.СтатусыВыполненияКонтрактов.Выдан 
				И ТекущийСтатусЗадачи <>  Перечисления.СтатусыЗадачМТСКоординатор.Выполнена Тогда
				ПерезаписатьАктНаСервере(АктССылка,Перечисления.СтатусыВыполненияКонтрактов.Отгружен);	
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьИзмененияПоМассивуЗадач(МассивЗадач) Экспорт	
	
	//ТокенБезопасности = Авторизация("226@ortonica", "Kashirin777");
	ТокенБезопасности = Авторизация("79056161881", "Esl2n7_"); 
	
	//++РС Консалт Назаров М.Ю. 4 октября 2022 г. 6:02:37                  
	Если Не ЗначениеЗаполнено(ТокенБезопасности) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не прошла авторизация");
		Возврат Неопределено;
	КонецЕсли;
	//--РС Консалт Назаров М.Ю. 4 октября 2022 г. 6:02:37


	Запрос = ТекстЗапросаПолучитьИзмененияПоЗадачам();
	СтрокаЗадачи = "";
	сч = 0;
	Для каждого задача из МассивЗадач Цикл
		СтрокаЗадачи = СтрокаЗадачи + "<long>" + задача + "</long>";
		Если сч < МассивЗадач.Количество() - 1 Тогда
			СтрокаЗадачи = СтрокаЗадачи + Символы.ПС;
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;	
	Запрос = СтрЗаменить(Запрос, "#Tasks", СтрокаЗадачи);
	Запрос = СтрЗаменить(Запрос, "#SecurityToken", ТокенБезопасности);
	Запрос = СтрЗаменить(Запрос, "#EndDate", XMLДата(ТекущаяДата()));
	Запрос = СтрЗаменить(Запрос, "#BeginDate", XMLДата(ТекущаяДата() - 365*24*60*60));
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".txt");
	ВременныйФайл = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	ВременныйФайл.Записать(Запрос);
	ВременныйФайл.Закрыть();
	Чтение = Новый ЧтениеТекста(ИмяВременногоФайла);
	Запрос = Чтение.Прочитать();
	УдалитьФайлы(ВременныйФайл);
	
	MSXML = Новый COMОбъект("MSXML2.XMLHTTP");
	MSXML.open("POST", "https://b2b.locator.ru/mts/ws/me_b2b_54/task_api.asmx", 0);
	MSXML.setRequestHeader("Content-Type", "application/soap+xml; charset=utf-8");
	MSXML.setRequestHeader("Content-Length", СтрДлина(Запрос));
	MSXML.setRequestHeader("SOAPAction", "http://locator.ru/LBS/GetTasksCommentsByIDs");
	MSXML.send(Запрос);
	ОтветПолучен = Ложь;
	Для НомерЦикла = 1 по 100 Цикл
		Если MSXML.readyState >3 Тогда
			ОтветПолучен = Истина;
			Прервать;
		КонецЕсли;      
	КонецЦикла;  
	
	Если не ОтветПолучен Тогда
		Возврат неопределено;
	КонецЕсли;
	
	ТекстОтвета = MSXML.responseXML.xml;
	Ответ = 0;
	Если MSXML.status <> 200 Тогда 
		Ответ.Статус = MSXML.status;
		Возврат Ответ;		
	КонецЕсли;
	//Ответ.Статус = MSXML.status;
	ТекстОтвета = MSXML.responseText;
	// выделяем новый статус задачи
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстОтвета);
	Пока Чтение.Прочитать() Цикл
		Если Чтение.Имя = "TaskID" и Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Чтение.Прочитать();
			IdЗадачи = Чтение.Значение;
		КонецЕсли;
		Если Чтение.Имя = "ServerTimestamp" и Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Чтение.Прочитать();
			ДатаОбновленияСтатуса = Чтение.Значение;
			ДатаОбновленияСтатуса = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДатаОбновленияСтатуса,"T",""), "-",""),":",""),".","");
			ДатаОбновленияСтатуса = Лев(ДатаОбновленияСтатуса, 12);
			ДатаОбновленияСтатуса = Дата(ДатаОбновленияСтатуса);
		КонецЕсли;	
		Если Чтение.Имя = "NewStatus" и Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Чтение.Прочитать();
			НовыйСтатус = Чтение.Значение;
			Если НовыйСтатус = "0" Тогда
				Статус = "Новая";
			ИначеЕсли НовыйСтатус = "1" Тогда
				Статус = "Принята";
			ИначеЕсли НовыйСтатус = "2" Тогда
				Статус = "Отклонена";
			ИначеЕсли НовыйСтатус = "3" Тогда				
				Статус = "Выполнена";
			ИначеЕсли НовыйСтатус = "4" Тогда				
				Статус = "ВРаботе";				
			КонецЕсли;	
			ЗаписатьВРегистрСостоянияВыполненияЗадачМТСКоординатор("", Статус, IdЗадачи, ДатаОбновленияСтатуса, "");
		КонецЕсли;
	КонецЦикла;	
	//Ответ.Статус = MSXML.status;
	//Ответ.IdЗадачи = -1;
	Возврат Ответ;	
	
КонецФункции

#КонецОбласти
#Область ВспомогательныеПроцедуры

Функция ИнициализироватьПараметрыЗадачи() Экспорт
	Возврат Новый Структура("IdЗадачи, IdАбонента, Заголовок, Описание, Адрес, Клиент, Телефон");
КонецФункции	

Функция XMLДата(Дата)
	Возврат Формат(Дата,"ДФ=yyyy-MM-ddTHH:mm:ss");
КонецФункции

Функция Авторизация(Логин, Пароль)
	Запрос = ТекстЗапросаЛогин();
	Запрос = СтрЗаменить(Запрос, "#Логин", Логин);
	Запрос = СтрЗаменить(Запрос, "#Пароль", Пароль);
	MSXML = Новый COMОбъект("MSXML2.XMLHTTP");
	MSXML.open("POST", "https://b2b.locator.ru/mts/ws/me_b2b_54/security.asmx", 0);
	MSXML.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
	MSXML.setRequestHeader("Content-Length", СтрДлина(Запрос));
	MSXML.setRequestHeader("SOAPAction", "http://locator.ru/LBS/Login");
	MSXML.send(Запрос);
	ОтветПолучен = Ложь;
	Для НомерЦикла = 1 по 100 Цикл
		Если MSXML.readyState >3 Тогда
			ОтветПолучен = Истина;
			Прервать;                       
		КонецЕсли;      
	КонецЦикла;  
	
	Если не ОтветПолучен Тогда
		Возврат неопределено;
	КонецЕсли;	
	ТекстОтвета = MSXML.responseXML.xml;		
	// выделяем токен безопасности
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстОтвета);
	Токен = "";
	Пока Чтение.Прочитать() Цикл
		Если Чтение.Имя = "Token" Тогда
			Чтение.Прочитать();
			Токен = Чтение.Значение;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Если Токен = "" Тогда
		Возврат Неопределено;
	Иначе
		Возврат Токен;
	КонецЕсли;		
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаЛогин()
	Возврат "<?xml version=""1.0"" encoding=""utf-8""?>
	|<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	|xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
	|xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
	| <soap:Body>
	| <Login xmlns=""http://locator.ru/LBS"">
	| <login>#Логин</login>
	| <password>#Пароль</password>
	| </Login>
	| </soap:Body>
	|</soap:Envelope>";
КонецФункции

Функция ТекстЗапросаСохранитьЗадачу()
	Возврат "<?xml version=""1.0"" encoding=""utf-8""?>
	|<soap12:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap12=""http://www.w3.org/2003/05/soap-envelope"">
	|  <soap12:Header>
	|    <SecurityHeader xmlns=""http://locator.ru/LBS"">
	|      <SessionToken>#SecurityToken</SessionToken>
	|    </SecurityHeader>
	|  </soap12:Header>
	|  <soap12:Body>
	|    <SaveTask xmlns=""http://locator.ru/LBS"">
	|      <taskArg>
	|        <ReadDate>#ReadDate</ReadDate>
	|        <DeliveryDate>#DeliveryDate</DeliveryDate>
	|        <ID>#ID</ID>
	|        <SubscriberID>#SubscriberID</SubscriberID>
	|        <UserID>#UserID</UserID>
	|        <CreationDate>#CreationDate</CreationDate>
	|        <Deadline>#Deadline</Deadline>
	|        <Title>#Title</Title>
	|        <Description>#Description</Description>
	|        <Address>#Address</Address>
	//|        <Longitude>#Longitude</Longitude>
	//|        <Latitude>#Latitude</Latitude>
	//|        <ExternalID>#ExternalID</ExternalID>
	|        <ClientName>#ClientName</ClientName>
	|        <ClientPhone>#ClientPhone</ClientPhone>
	|        <Priority>#Priority</Priority>
	|        <StartDate>#StartDate</StartDate>
	|        <Status>#Status</Status>
	|        <SecondAddress>#SecondAddress</SecondAddress>
	|        <SecondLongitude>#SecondLongitude</SecondLongitude>
	|        <SecondLatitude>#SecondLatitude</SecondLatitude>
	//|        <ObjectID>#ObjectID</ObjectID>
	|        <CommentPolicy>#CommentPolicy</CommentPolicy>
	//|        <Competences>
	//|          <long>0</long>
	//|          <long>0</long>
	//|        </Competences>
	|        <ServiceTime>#ServiceTime</ServiceTime>
	|        <StartInterval>#StartInterval</StartInterval>
	|      </taskArg>
	|    </SaveTask>
	|  </soap12:Body>
	|</soap12:Envelope>";	
КонецФункции	

Функция ТекстЗапросаПолучитьВсехАбонентов()
	Возврат "<?xml version=""1.0"" encoding=""utf-8""?>
	|<soap12:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap12=""http://www.w3.org/2003/05/soap-envelope"">
	|<soap12:Header>
	|<SecurityHeader xmlns=""http://locator.ru/LBS"">
	|<SessionToken>#SecurityToken</SessionToken>
	|</SecurityHeader>
	|</soap12:Header>
	|<soap12:Body>
	|<GetSubscribers xmlns=""http://locator.ru/LBS"" />
	|</soap12:Body>
	|</soap12:Envelope>";
КонецФункции	

Функция ТекстЗапросаПолучитьВсехПользователей()
	Возврат "<?xml version=""1.0"" encoding=""utf-8""?>
	|<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
	|<soap:Header>
	|<SecurityHeader xmlns=""http://locator.ru/LBS"">
	|<SessionToken>#SecurityToken</SessionToken>
	|</SecurityHeader>
	|</soap:Header>
	|<soap:Body>
	|<GetUserList xmlns=""http://locator.ru/LBS"" />
	|</soap:Body>
	|</soap:Envelope>";

КонецФункции

Функция ТекстЗапросаПолучитьИзмененияПоЗадачам()
	Возврат "<?xml version=""1.0"" encoding=""utf-8""?>
	|<soap12:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap12=""http://www.w3.org/2003/05/soap-envelope"">
	|<soap12:Header>
	|<SecurityHeader xmlns=""http://locator.ru/LBS"">
	|<SessionToken>#SecurityToken</SessionToken>
	|</SecurityHeader>
	|</soap12:Header>
	|<soap12:Body>
	|<GetTasksCommentsByIDs xmlns=""http://locator.ru/LBS"">
	|<taskIDs>
	|#Tasks
	|</taskIDs>
	|<from>#BeginDate</from>
	|<to>#EndDate</to>
	|</GetTasksCommentsByIDs>
	|</soap12:Body>
	|</soap12:Envelope>";	
КонецФункции	

#КонецОбласти
