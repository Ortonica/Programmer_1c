
&ИзменениеИКонтроль("УстановитьЕдиницу")
Функция РСК_УстановитьЕдиницу(СтрокаТЧ, Док)
	зпр=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ВЫБОР
	//|		КОГДА Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)
	//|			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения
	//|		ИНАЧЕ Штрихкоды.Упаковка
	//|	КОНЕЦ КАК ЕИ,
	|	Штрихкоды.Упаковка КАК ЕИ,
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика
	|ПОМЕСТИТЬ тШтрихкоды
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &код
	|	И (&ВсяНоменклатура
	|			ИЛИ Штрихкоды.Номенклатура = &Номенклатура)
	//|	И (&ВсеХарактеристики
	//|			ИЛИ Штрихкоды.Характеристика = &Характеристика)
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Штрихкоды.Упаковка КАК ЕИ,
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика
	|ИЗ
	|	РегистрСведений.ДСТ_ШтрихкодыСерий КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &код
	|	И (&ВсяНоменклатура
	|			ИЛИ Штрихкоды.Номенклатура = &Номенклатура)	
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тШтрихкоды.ЕИ,
	|	тШтрихкоды.Номенклатура,
	|	тШтрихкоды.Характеристика
	|ИЗ
	|	тШтрихкоды КАК тШтрихкоды");


	зпр.УстановитьПараметр("Код",СтрокаТЧ.Штрихкод);
	зпр.УстановитьПараметр("Номенклатура",СтрокаТЧ.Номенклатура);
	//зпр.УстановитьПараметр("Характеристика",СтрокаТЧ.ХарактеристикаНоменклатуры);
	зпр.УстановитьПараметр("ВсяНоменклатура",СтрокаТЧ.Номенклатура.Пустая());
	//зпр.УстановитьПараметр("ВсеХарактеристики",СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая());
	рез=зпр.Выполнить().Выгрузить();
	Если Рез.Количество()>0 тогда
		СтрокаТЧ.ЕдиницаИзмерения=Рез[0].ЕИ;
		Если СтрокаТЧ.Номенклатура.Пустая() тогда
			СтрокаТЧ.Номенклатура=Рез[0].Номенклатура;
		КонецЕсли;	
		Если СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая() тогда
			СтрокаТЧ.ХарактеристикаНоменклатуры=Рез[0].Характеристика;
		КонецЕсли;	
	КонецЕсли;


	//УПАКОВКИ ДЛЯ АДРЕСНЫХ СКЛАДОВ И ВВОДА ТМЦ ВРУЧНУЮ
	Если СтрокаТЧ.ЕдиницаИзмерения.Пустая() и СтрокаТЧ.Штрихкод="" и (НЕ СтрокаТЧ.Номенклатура.Пустая())  и (НЕ Док = Неопределено) тогда
		АдресныйСклад = Ложь;
		Попытка
			Если Док.Склад.ИспользоватьАдресноеХранение или Док.Помещение.ИспользоватьАдресноеХранение тогда
				АдресныйСклад = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;

		Если АдресныйСклад тогда
			зпр=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			//|	ВЫБОР
			//|		КОГДА Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)
			//|			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения
			//|		ИНАЧЕ Штрихкоды.Упаковка
			//|	КОНЕЦ КАК ЕИ,
			|	Штрихкоды.Упаковка КАК ЕИ,
			|	Штрихкоды.Номенклатура,
			|	Штрихкоды.Характеристика,
			|	Минимум(ЕстьNull(Штрихкоды.Упаковка.Числитель,1)) КАК КФ
			|ПОМЕСТИТЬ тШтрихкоды
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
			|ГДЕ
			|	(Штрихкоды.Номенклатура = &Номенклатура)
			|	И (Штрихкоды.Характеристика = &Характеристика)
			|СГРУППИРОВАТЬ ПО
			//|	ВЫБОР
			//|		КОГДА Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)
			//|			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения
			//|		ИНАЧЕ Штрихкоды.Упаковка
			//|	КОНЕЦ,
			|	Штрихкоды.Упаковка,
			|	Штрихкоды.Номенклатура,
			|	Штрихкоды.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	тШтрихкоды.ЕИ,
			|	тШтрихкоды.КФ,
			|	тШтрихкоды.Номенклатура,
			|	тШтрихкоды.Характеристика
			|ИЗ
			|	тШтрихкоды КАК тШтрихкоды");


			зпр.УстановитьПараметр("Номенклатура",СтрокаТЧ.Номенклатура);
			зпр.УстановитьПараметр("Характеристика",СтрокаТЧ.ХарактеристикаНоменклатуры);
			рез=зпр.Выполнить().Выгрузить();
			Если Рез.Количество()>0 тогда
				СтрокаТЧ.ЕдиницаИзмерения=Рез[0].ЕИ;
				Попытка
					СтрокаТЧ.Количество=СтрокаТЧ.Количество/?(Рез[0].КФ=0,1,Рез[0].КФ);
				Исключение
				КонецПопытки;
			КонецЕсли;

		КонецЕсли;	
	КонецЕсли;
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	Если СтрокаТЧ.ЕдиницаИзмерения.Пустая() И НЕ СтрокаТЧ.Номенклатура.Пустая() Тогда
		СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения
	КонецЕсли 
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
КонецФункции

&ИзменениеИКонтроль("ВыполнитьДополнительнуюОбработкуИсходногоДокумента")
Процедура РСК_ВыполнитьДополнительнуюОбработкуИсходногоДокумента(Док, ПараметрыДокумента, УдалосьПровестиПеремещение)

	Об = ПараметрыДокумента.Об;
	Шаблон = Об.Шаблон; 

	Если Док.Метаданные().Имя="ОтборРазмещениеТоваров" Тогда
		Если НЕ ЗначениеЗаполнено(Док.Распоряжение) Тогда Возврат; КонецЕсли;
		Если НЕ ТипЗнч(Док.Распоряжение) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда Возврат; КонецЕсли;
		Если НЕ Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок
			#Удаление
			И НЕ Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
			#КонецУдаления
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			Тогда
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КОнецВставки
			Сообщить("Внимание. Документ в статусе ''" + Док.Статус + "''!");
			Возврат; 
		КонецЕсли; 
		
		НаборТоварыВЯчейках = Док.Движения.Найти("ТоварыВЯчейках");
		
		Если НаборТоварыВЯчейках <> Неопределено И НаборТоварыВЯчейках.ДополнительныеСвойства.Свойство("РассчитыватьИзменения") Тогда
			НаборТоварыВЯчейках.ДополнительныеСвойства.РассчитыватьИзменения = Ложь;	 	
		КонецЕсли;

		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение			
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки; 


		Если ТипЗнч(Док.Распоряжение) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда

			обРасходныйОрдер  = Док.Распоряжение.ПолучитьОбъект();		

			Попытка
				Если Шаблон.ПерезаполнятьРасходныйОрдерПоОтбору Тогда
					обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;

					// перезаполнение РО по отбору
					ПерезаполнениеТабЧастейРасхОрдераПоОтбору(обРасходныйОрдер, Док, об, "ОтгружаемыеТовары");
					// перезаполнение тч ТоварыПоРаспоряжениям
					Если Шаблон.ПерезаполнятьТЧТоварыПоРаспоряжениям Тогда
						ПерезаполнениеТабЧастейРасхОрдераПоОтбору(обРасходныйОрдер, Док, об, "ТоварыПоРаспоряжениям");
					КонецЕсли;

					// расширение работы с упаковочными листами (КСК)
					Если Шаблон.СоздаватьДокументыУпаковочныхЛистов и Шаблон.ИспользоватьТиповыеУпаковочныеЛисты Тогда
						ПерезаполнениеТабЧастиРООтгружаемыеТоварыУпакЛистами(обРасходныйОрдер, об, Шаблон);	
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;

			// статус
			Если ЗначениеЗаполнено(Шаблон.СтатусРасходногоОрдераПослеЗагрузкиОтбора) Тогда
				обРасходныйОрдер.Статус = Шаблон.СтатусРасходногоОрдераПослеЗагрузкиОтбора;
			Иначе	
				обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			КонецЕсли;
			
			Для каждого стр из обРасходныйОрдер.ОтгружаемыеТовары Цикл
				стр.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;	
			КонецЦикла;	
			
			обРасходныйОрдер.ДатаОтгрузки = ТекущаяДата();
			
			// запись РО
			Попытка
				обРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			
			//Приходный ордер не связан с размещением (не заполняется реквизит распоряжение), перезаполнение невозможно
			//ИначеЕсли ТипЗнч(Док.Распоряжение) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") тогда
			//	
			//			
			//	Если Шаблон.ПерезаполнятьПриходныйОрдерПоОтбору Тогда
			//		
			//		обПриходныйОрдер  = Док.Распоряжение.ПолучитьОбъект();
			//		
			//		// перезаполнение товаров ПО по отбору
			//		обПриходныйОрдер.Товары.Очистить();
			//		Для каждого СтрокаОтбора из Док.ТоварыРазмещение цикл
			//			НоваяСтрокаОрдера = обПриходныйОрдер.Товары.Добавить();
			//			ЗаполнитьЗначенияСвойств(НоваяСтрокаОрдера,СтрокаОтбора);
			//			НоваяСтрокаОрдера.ЭтоУпаковочныйЛист = Ложь;	  
			//		КонецЦикла;	
			//		
			//		// статус
			//		//обРасходныйОрдер.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			//		
			//		// запись ПО
			//		Попытка
			//			обПриходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
			//		Исключение
			//			Сообщить(ОписаниеОшибки());
			//			Возврат;
			//		КонецПопытки;
			//		
			//	КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли Шаблон.ВидДокумента = "РасходныйОрдерНаТовары" И Шаблон.ВидДокументаНового = "ПеремещениеТоваров" Тогда
		Если (Шаблон.ИспользоватьТиповыеУпаковочныеЛисты И Шаблон.ПодборУпаковочнымиЛистами) Тогда
			ПерезаполнениеТабЧастейРОсВыделениемНеподобранныхВНовыйРО(Док, об, Шаблон);
		КонецЕсли;		

	ИначеЕсли Док.Метаданные().Имя = "ПеремещениеТоваров" И Шаблон.БыстроеПеремещение Тогда
		Если НЕ Док.ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;

		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			УдалосьПровестиПеремещение = Истина;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

	ИначеЕсли (Шаблон.ВидДокумента = "РасходныйОрдерНаТовары" ИЛИ Шаблон.ВидДокументаНового = "РасходныйОрдерНаТовары") 
		И Шаблон.ПерезаполнятьТЧТоварыПоРаспоряжениям Тогда

		обРасходныйОрдер = Неопределено;
		Если ТипЗнч(Док) = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
			обРасходныйОрдер  = Док;
		КонецЕсли;

		Если НЕ обРасходныйОрдер = Неопределено Тогда
			ПерезаполнениеТабЧастейРасхОрдераПоОтбору(обРасходныйОрдер, Док, об, "ТоварыПоРаспоряжениям");
		КонецЕсли;

	ИначеЕсли Шаблон.ВидДокумента = "ОтборРазмещениеТоваров" И Док.Метаданные().Имя<>"ОтборРазмещениеТоваров" И Шаблон.ПроверкаОтборРазмещение Тогда

		СтатусОтбораРазмещенияТоваровПослеЗагрузки = ПараметрыДокумента.СтатусОтбораРазмещенияТоваровПослеЗагрузки;
		ИсходныйДок = Об.ИсходныйДокумент.ПолучитьОбъект();
		ИсходныйДок.Статус=СтатусОтбораРазмещенияТоваровПослеЗагрузки;
		Если СтатусОтбораРазмещенияТоваровПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками тогда
			ПерезаполнитьПодчиненныйДокументОтборРазмещениеПриПроверке(ИсходныйДок,Об);
		КонецЕсли;	
		ИсходныйДок.Записать();	
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ВнестиДокументВБазу")
Функция РСК_ВнестиДокументВБазу(Об, СтрокаОшибок)


	//ОБЩИЕ ПАРАМЕТРЫ
	Шаблон = Об.Шаблон;

	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ПараметрыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, ПолучитьСтруктуруРеквизитовШаблона());

	ВидДокумента 								= ПараметрыШаблона.ВидДокумента;
	ВидДокументаНового 							= ПараметрыШаблона.ВидДокументаНового;
	ИзменятьТипОбеспечения 						= ПараметрыШаблона.ИзменятьТипОбеспечения;
	ИспользоватьМаркировку 						= ПараметрыШаблона.ИспользоватьМаркировку;
	СоздаватьДокументИСМП   					= ПараметрыШаблона.СоздаватьДокументИСМП;
	МаркировкаПроверкаБезСертификатаИС 			= ПараметрыШаблона.МаркировкаПроверкаБезСертификатаИС;
	ИспользованиеУпаковочныхЛистовПодбор 		= ПараметрыШаблона.ИспользованиеУпаковочныхЛистовПодбор;

	ПроводитьРоботом							= ПараметрыШаблона.ПроводитьРоботом;
	ТабличнуюЧастьПриЗагрузкеПодбор         	= ПараметрыШаблона.ТабличнуюЧастьПриЗагрузкеПодбор;
	ГрупповойДокумент                       	= ПараметрыШаблона.ГрупповойДокумент;
	ГрупповаяРабота                         	= ПараметрыШаблона.ГрупповаяРабота;
	БыстроеСканирование                     	= ПараметрыШаблона.БыстроеСканирование;
	ПользовательДляАвтозаполнения     			= ПараметрыШаблона.ПользовательДляАвтозаполнения;

	ИмяТабличнойЧастиПодбор                 	= ПараметрыШаблона.ИмяТабличнойЧастиПодбор;
	ИмяТабличнойЧастиПриемка                	= ПараметрыШаблона.ИмяТабличнойЧастиПриемка;
	ИспользоватьПодбор                			= ПараметрыШаблона.ИспользоватьПодбор;
	ИспользоватьПриемку                         = ПараметрыШаблона.ИспользоватьПриемку;

	СоздаватьДокументыУпаковочныхЛистов     	= ПараметрыШаблона.СоздаватьДокументыУпаковочныхЛистов;
	МаркировкаСоздаватьСправочникКМЕслиНеНайден = ПараметрыШаблона.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	МаркировкаПривязыватьGTINКакШтрихкод     	= ПараметрыШаблона.МаркировкаПривязыватьGTINКакШтрихкод;
	МаркировкаЗавершатьПодборКМВДокументе     	= ПараметрыШаблона.МаркировкаЗавершатьПодборКМВДокументе;

	МножествоДокументовКакЗадание           	= ПараметрыШаблона.МножествоДокументовКакЗадание;
	Егаис                                   	= ПараметрыШаблона.Егаис;
	БыстраяПриемка                          	= ПараметрыШаблона.БыстраяПриемка;
	БыстраяОтгрузка                         	= ПараметрыШаблона.БыстраяОтгрузка;
	ПроверкаОтборРазмещение                 	= ПараметрыШаблона.ПроверкаОтборРазмещение;

	ТабличнуюЧастьПриЗагрузкеПриемка        	= ПараметрыШаблона.ТабличнуюЧастьПриЗагрузкеПриемка;
	ИмяТабличнойЧастиНовойПодбор                = ПараметрыШаблона.ИмяТабличнойЧастиНовойПодбор;
	ИмяТабличнойЧастиНовойПриемка               = ПараметрыШаблона.ИмяТабличнойЧастиНовойПриемка;
	ЗагружатьКомментарий                        = ПараметрыШаблона.ЗагружатьКомментарий;
	БыстроеПеремещение                          = ПараметрыШаблона.БыстроеПеремещение;

	АвтоматическийКомментарийИспользовать       = ПараметрыШаблона.АвтоматическийКомментарийИспользовать;
	АвтоматическийКомментарий                   = ПараметрыШаблона.АвтоматическийКомментарий;
	ИспользованиеЯчеекПодбор                    = ПараметрыШаблона.ИспользованиеЯчеекПодбор;
	ИспользованиеСерийниковПодбор               = ПараметрыШаблона.ИспользованиеСерийниковПодбор;
	СерииВОтдельнойТЧ                           = ПараметрыШаблона.СерииВОтдельнойТЧ;
	ИспользоватьТиповыеУпаковочныеЛисты         = ПараметрыШаблона.ИспользоватьТиповыеУпаковочныеЛисты;
	БазовыеЕдиницыПриЗагрузке                   = ПараметрыШаблона.БазовыеЕдиницыПриЗагрузке;
	ИспользованиеЯчеекПриемка                   = ПараметрыШаблона.ИспользованиеЯчеекПриемка;
	ИспользованиеСерийниковПриемка              = ПараметрыШаблона.ИспользованиеСерийниковПриемка;

	ОткрыватьДокументыПослеЗагрузкиБезЗаписи 	= ПараметрыШаблона.ОткрыватьДокументыПослеЗагрузкиБезЗаписи;
	ОбрабатыватьРоботом 						= ПараметрыШаблона.ОбрабатыватьРоботом;
	ИспользоватьГрупповойДокумент				= ПараметрыШаблона.ИспользоватьГрупповойДокумент;
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД 
	ИспользованиеСерийниковПриемка = ?(ИспользоватьПриемку, 1, 0);
	ИспользованиеСерийниковПодбор = ?(ИспользоватьПодбор, 1, 0);
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки


	ПараметрыДокументаТСД = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Об.Ссылка, "ИсходныйДокумент, Организация"); 
	ИсходныйДокумент 	= ПараметрыДокументаТСД.ИсходныйДокумент;
	Организация 		= ПараметрыДокументаТСД.Организация;

	ЕстьОшибки=Ложь;
	ЭтоНовыйДокумент = Ложь;

	ПараметрыДокумента=СобратьПараметры();
	ПараметрыДокумента.Вставить("Об",Об);
	ПараметрыДокумента.Вставить("Организация", Организация);
	Если НЕ ЗначениеЗаполнено(ПользовательДляАвтозаполнения) тогда
		ПараметрыДокумента.Вставить("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	Иначе	
		ПараметрыДокумента.Вставить("Пользователь",ПользовательДляАвтозаполнения);
	КонецЕсли;	


	//РАБОТА С ГРУППОВЫМИ И ДОЧЕРНИМИ ДОКУМЕНТАМИ (РАСПРЕДЕЛЕНИЕ НА ТСД)
	Если ГрупповойДокумент И НЕ ЗначениеЗаполнено(Об.РодительскийДокумент) тогда

		МассивДокументов = Новый Массив; 
		ВсеДокументыЗавершены = Истина;
		ГрПланРавноФакт = Истина;
		Для каждого СтрокаДочернийДокумент из Об.СписокДокументов цикл
			Если ЗначениеЗаполнено(СтрокаДочернийДокумент.ДокументТСД) тогда
				Если СтрокаДочернийДокумент.ДокументТСД.ДатаПриемкиОператором<>Дата(1,1,1) тогда
					Если СтрокаДочернийДокумент.ДокументТСД.ДатаЗавершения=Дата(1,1,1) тогда
						ДочернийДокументОбъект = СтрокаДочернийДокумент.ДокументТСД.ПолучитьОбъект();
						СтатусЗагрузкиДочернегоДокумента = ВнестиДокументВБазу(ДочернийДокументОбъект,СтрокаОшибок);
						Если СтатусЗагрузкиДочернегоДокумента<>Неопределено и СтатусЗагрузкиДочернегоДокумента<>"" тогда
							МассивДокументов.Добавить(СтатусЗагрузкиДочернегоДокумента);
						КонецЕсли;	
					КонецЕсли;
				Иначе
					ВсеДокументыЗаблокированы = Ложь;
				КонецЕсли;

				Если Не ПланРавноФакт(СтрокаДочернийДокумент.ДокументТСД, СтрокаДочернийДокумент.ИсходныйДокумент) Тогда
					ГрПланРавноФакт = Ложь;	
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;

		Если ВсеДокументыЗавершены тогда
			Об.ПланРавноФакт = ГрПланРавноФакт;
			Об.ДатаЗавершения=ТекущаяДата();
			Об.Записать();
		КонецЕсли;	
		Возврат МассивДокументов;
	КонецЕсли;


	//ГРУППОВОЙ ДОКУМЕНТ (ПЕРЕНОС ДАННЫХ ИЗ РЕГИСТРА В СПРАВОЧНИК ДОКУМЕНТЫ ТСД)
	Если ГрупповаяРабота или БыстроеСканирование тогда
		Если НЕ ПеренестиДанныеПоДокументуВСправочник(Об,СтрокаОшибок) тогда
			Возврат Неопределено; 
		КонецЕсли;	
	КонецЕсли;

	//ПОДСЧЕТ ПЛАН ФАКТ И ВРЕМЕНИ
	Попытка 
		Об.ВремяСборки = (Об.ДатаЗавершенияСбора - Об.ДатаНачалаСбора) / 60; //в минутах
		Об.ПланРавноФакт = ПланРавноФакт(Об, Об.ИсходныйДокумент);  //истина/ложь
		Об.Записать();
	Исключение 
	КонецПопытки;

	//ЗАПОЛНЕНИЕ ПОЛЬЗОВАТЕЛЕЙ ТСД
	Попытка ПеренестиДополнительныеДанныеПоДокументуВСправочник(Об,СтрокаОшибок); Исключение КонецПопытки;


	//РАБОТА С ГРУППОВЫМИ И ДОЧЕРНИМИ ДОКУМЕНТАМИ (РАСПРЕДЕЛЕНИЕ В 1С)
	Если МножествоДокументовКакЗадание Тогда
		МассивДокументв = Об.Задания.ВыгрузитьКолонку("Задание");
		Если МассивДокументв.Количество() > 0 тогда
			Возврат ВнестиВбазуНесколькоДокументов(МассивДокументв, Об, ПараметрыШаблона);
		КонецЕсли;
	КонецЕсли;


	//ПРЕДВАРИТЕЛЬНАЯ ОБРАБОТКА ПО ВИДАМ ДОКУМЕНТОВ (НАПРИМЕР ЕСЛИ ДАЛЬНЕЙШАЯ ЗАГРУЗКА НЕ ТРЕБУЕТСЯ)
	ДанныеДляВозврата = "";
	ВыполнитьПредварительнуюОбработкуДокументаТСД(ПараметрыДокумента,ЕстьОшибки,СтрокаОшибок,ДанныеДляВозврата);
	Если ЕстьОшибки тогда
		Возврат ДанныеДляВозврата;	
	КонецЕсли;


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//ЗАПОЛНЕНИЕ ДОКУМЕНТОВ ПО ТИПАМ (МАРКРОВКА-отдельный модуль,ЕГАИС-отдельные функции в текущем модуле,ОБЫЧНЫЕ-в текущей функции)

	//1.МАРКИРОВКА
	Если ИспользоватьМаркировку Тогда

		//МДЛП
		Если ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() И ДатаМобайл_МДЛП.ТребуетсяСпецОбработка(Об) Тогда
			Если СокрЛП(ВидДокументаНового)="" тогда
				ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
			Иначе
				ПолучитьСоздатьНовыйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
			КонецЕсли;	
			Возврат ДатаМобайл_МДЛП.ПолучитьДокументМаркировки(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент,СтрокаОшибок);
		КонецЕсли;

		Если Не МаркировкаПроверкаБезСертификатаИС И ТребуетсяОбновлениеКлючаСессииПоДокументу(ИсходныйДокумент, Организация, СтрокаОшибок) Тогда
			Возврат Неопределено;	
		КонецЕсли; 

		Если ДатаМобайл_Маркировка.ТребуетсяСпецОбработка(Об) Тогда	
			Если СокрЛП(ВидДокументаНового)="" тогда
				ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
				Возврат ДатаМобайл_Маркировка.ПолучитьДокументМаркировки(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент,СтрокаОшибок);
			Иначе
				Если СокрЛП(ВидДокумента)="ПриобретениеТоваровУслуг" и СокрЛП(ВидДокументаНового)="ПриходныйОрдерНаТовары" тогда  //Приходный ордер по приобретению, в приобретении только коды маркировки
					ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
					ДатаМобайл_Маркировка.ПолучитьДокументМаркировки(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент,СтрокаОшибок);
				ИначеЕсли ВидДокумента = "ПриобретениеТоваровУслуг" И ВидДокументаНового = "АктОРасхожденияхПослеПриемки" Тогда
					ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
				Иначе

					Если ВидДокумента = "РеализацияТоваровУслуг" И ВидДокументаНового = "ВыводИзОборотаИСМП" Тогда
						Возврат СоздатьДокументыРеализацияТоваровУслугВыводИзОборотаИСМП(ИсходныйДокумент, Об, СтрокаОшибок);
					КонецЕсли; 

					ПолучитьСоздатьНовыйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
					СсылкаНаДокумент = ДатаМобайл_Маркировка.ПолучитьДокументМаркировки(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент,СтрокаОшибок);

					//Обработка реализации, созданной на основании заказа, с параметрами маркировки и СоздаватьДокументИСМП((
					Если ВидДокументаНового = "РеализацияТоваровУслуг" И ВидДокумента = "ЗаказКлиента" И СоздаватьДокументИСМП И ИспользоватьМаркировку Тогда
						ОбработкаРеализацииСозданнойНаОснованииЗаказа(Об, ПараметрыДокумента.Док, СтрокаОшибок);
					КонецЕсли;
					//Обработка реализации, созданной на основании заказа, с параметрами маркировки и СоздаватьДокументИСМП))

					Возврат СсылкаНаДокумент;
				КонецЕсли;	
			КонецЕсли;		
		КонецЕсли; 

	КонецЕсли;

	//2.ЕГАИС
	Если Егаис Тогда	
		Если СокрЛП(ВидДокументаНового)="" тогда
			ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
		Иначе
			ПолучитьСоздатьНовыйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
		КонецЕсли;	

		Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() тогда
			Возврат АСТ_ПолучитьДокументЕГАИС(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент);
		ИначеЕсли ДатаМобайл_ОбщийМодуль.ЕстьКТ2000() тогда
			Возврат КТ2000_ПолучитьДокументЕГАИС(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент);
		Иначе
			Возврат ПолучитьДокументЕГАИС(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент);
		КонецЕсли;	
	КонецЕсли;


	//3.ОБЫЧНЫЕ ДОКУМЕНТЫ
	ЭтоБыстроеПеремещение = Ложь;	
	ОпределитьЭтоБыстроеПеремещение(Шаблон, ЭтоБыстроеПеремещение);
	ИсходныеДанныеПодбор = Неопределено;
	ИсходныеДанныеПриемка = Неопределено; 
	НазначениеЗаполненоВТЧПодбор = Ложь;
	НазначениеЗаполненоВТЧПриемка = Ложь;
	СтатусОтбораРазмещенияТоваровПослеЗагрузки = Неопределено;
	ОшибокЗаполненияНеОбнаружено = Истина;

	Если ЗначениеЗаполнено(Об.НовыйДокумент) И ТипЗнч(Об.НовыйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		ТЧ_ТоварыПоРаспоряжениям_ИсходныеДанные = Об.НовыйДокумент.ТоварыПоРаспоряжениям.Выгрузить();	
	ИначеЕсли НЕ ЗначениеЗаполнено(Об.НовыйДокумент) И ТипЗнч(Об.ИсходныйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		ТЧ_ТоварыПоРаспоряжениям_ИсходныеДанные = Об.ИсходныйДокумент.ТоварыПоРаспоряжениям.Выгрузить();	
	КонецЕсли;


	//РАБОТА С ИСХОДНЫМ ДОКУМЕНТОМ (СОЗДАНИЕ,ЗАПОЛНЕНИЕ ШАПКИ,ПРЕДВАРИТЕЛЬНОЕ ДЕЙСТВИЕ С ТЧ)
	Если СокрЛП(ВидДокументаНового)="" или БыстраяПриемка или БыстраяОтгрузка тогда

		ЭтоОтборРазмещениеТоваров = Ложь; 
		Попытка
			Док=Об.ИсходныйДокумент.ПолучитьОбъект();
			Если Док.Метаданные().Имя="ОтборРазмещениеТоваров" и ПроверкаОтборРазмещение тогда
				СтатусПослеЗагрузки = ПолучитьСтатусОтбораРазмещенияТоваровПослеЗагрузки(Об,Док);
				ЭтоОтборРазмещениеТоваров = Истина;
			КонецЕсли;
		Исключение
			СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		КонецПопытки;

		ПараметрыДокумента.Вставить("ИмяТЧПодбор",ИмяТабличнойЧастиПодбор);
		ПараметрыДокумента.Вставить("ИмяТЧПриемка",ИмяТабличнойЧастиПриемка);
		ПараметрыДокумента.Вставить("ИсходныйДокумент",Об.ИсходныйДокумент);

		ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
		Док = ПараметрыДокумента.Док;

		Если Док.Метаданные().Имя="РасходныйОрдерНаТовары" и ИмяТабличнойЧастиПодбор = "ТоварыПоРаспоряжениям" тогда
			ПараметрыДокумента.Вставить("ИмяТЧПодбор","ОтгружаемыеТовары");
		КонецЕсли;

		Попытка
			Если ИспользоватьПодбор тогда

				Попытка
					НазначениеЗаполненоВТЧПодбор = ПолучитьНазначениеЗаполненоВТЧ(Док[ПараметрыДокумента.ИмяТЧПодбор]);
				Исключение
					НазначениеЗаполненоВТЧПодбор = Ложь;
				КонецПопытки;

				Если НазначениеЗаполненоВТЧПодбор Тогда
					ИсходныеДанныеПодбор = Док[ПараметрыДокумента.ИмяТЧПодбор].Выгрузить();	
				КонецЕсли;

				Если ТабличнуюЧастьПриЗагрузкеПодбор=1 тогда   //дополнять
				ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор=2 И (НЕ ПроверкаОтборРазмещение ИЛИ НЕ ЭтоОтборРазмещениеТоваров ИЛИ СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок) тогда //заменять	
					ИсходныеДанныеПодбор=Док[ПараметрыДокумента.ИмяТЧПодбор].Выгрузить();
					ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПодбор]);
					Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки; 
				ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор=3 тогда  // изменять
					Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки; 
					Для каждого стр из Док[ПараметрыДокумента.ИмяТЧПодбор] цикл
						Если Док.Метаданные().Имя="ПересчетТоваров" тогда
							Попытка стр.КоличествоФакт = 0; Исключение КонецПопытки;
							Попытка стр.КоличествоУпаковокФакт = 0; Исключение КонецПопытки;
						Иначе
							Если Док.Метаданные().Имя="ОтборРазмещениеТоваров" тогда
								Попытка стр.КоличествоУпаковокОтобрано = 0; Исключение КонецПопытки;
								Попытка стр.КоличествоОтобрано = 0; Исключение КонецПопытки;
							КонецЕсли;	
							Если НЕ ПроверкаОтборРазмещение ИЛИ СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок тогда
								Попытка стр.Количество = 0; Исключение КонецПопытки;
								Попытка стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
								Попытка стр.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка(); Исключение КонецПопытки;
							КонецЕсли;
						КонецЕсли;
						Попытка стр.КоличествоШт = 0; Исключение КонецПопытки;
					КонецЦикла;
				ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор=4 тогда  //долько серии
					Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки; 
				КонецЕсли;	
			КонецЕсли;	

			Если ИспользоватьПриемку тогда

				Попытка
					НазначениеЗаполненоВТЧПриемка = ПолучитьНазначениеЗаполненоВТЧ(Док[ПараметрыДокумента.ИмяТЧПриемка]);
				Исключение
					НазначениеЗаполненоВТЧПриемка = Ложь;
				КонецПопытки;

				Если НазначениеЗаполненоВТЧПриемка Тогда
					ИсходныеДанныеПриемка = Док[ПараметрыДокумента.ИмяТЧПриемка].Выгрузить();	
				КонецЕсли;

				Если ТабличнуюЧастьПриЗагрузкеПриемка=1 тогда  //дополнять
				ИначеЕсли ТабличнуюЧастьПриЗагрузкеПриемка=2 И (НЕ ПроверкаОтборРазмещение ИЛИ СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок) тогда //заменять
					ИсходныеДанныеПриемка=Док[ПараметрыДокумента.ИмяТЧПриемка].Выгрузить();
					ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПриемка]);
				ИначеЕсли ТабличнуюЧастьПриЗагрузкеПриемка=3 тогда // изменять	
					Для каждого стр из Док[ПараметрыДокумента.ИмяТЧПриемка] цикл
						Если Док.Метаданные().Имя="ОтборРазмещениеТоваров" тогда
							Попытка стр.КоличествоУпаковокРазмещено = 0; Исключение КонецПопытки;
							Попытка стр.КоличествоРазмещено = 0; Исключение КонецПопытки;
						КонецЕсли;	

						Если НЕ ПроверкаОтборРазмещение ИЛИ СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок тогда
							Попытка стр.Количество = 0; Исключение КонецПопытки;
							Попытка стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
							Попытка стр.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка(); Исключение КонецПопытки;
						КонецЕсли;	
						Попытка стр.КоличествоШт = 0; Исключение КонецПопытки;
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;	
		Исключение
			СтрокаОшибок="Ошибка начального заполнения документа: "+ОписаниеОшибки();
			Возврат Неопределено;
		КонецПопытки;

		//РАБОТА С НОВЫМ ДОКУМЕНТОМ (СОЗДАНИЕ,ЗАПОЛНЕНИЕ ШАПКИ,ПРЕДВАРИТЕЛЬНОЕ ДЕЙСТВИЕ С ТЧ)	
	Иначе

		ЭтоОтборРазмещениеТоваров = Ложь; 
		Попытка
			Док=Об.НовыйДокумент.ПолучитьОбъект();
			Если Док.Метаданные().Имя="ОтборРазмещениеТоваров" и ПроверкаОтборРазмещение тогда
				СтатусПослеЗагрузки = ПолучитьСтатусОтбораРазмещенияТоваровПослеЗагрузки(Об,Док);
				ЭтоОтборРазмещениеТоваров = Истина;
			КонецЕсли;
		Исключение
			СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		КонецПопытки;

		Попытка
			Если СокрЛП(ВидДокумента)="ОтборРазмещениеТоваров" и ПроверкаОтборРазмещение тогда
				ДокИсходный=Об.ИсходныйДокумент.ПолучитьОбъект();
				СтатусОтбораРазмещенияТоваровПослеЗагрузки = ПолучитьСтатусОтбораРазмещенияТоваровПослеЗагрузки(Об,ДокИсходный);
			КонецЕсли;
		Исключение
		КонецПопытки;

		ПараметрыДокумента.Вставить("ИмяТЧПодбор",ИмяТабличнойЧастиНовойПодбор);
		ПараметрыДокумента.Вставить("ИмяТЧПриемка",ИмяТабличнойЧастиНовойПриемка);
		ПараметрыДокумента.Вставить("ИсходныйДокумент",Об.ИсходныйДокумент);

		ПолучитьСоздатьНовыйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
		Док = ПараметрыДокумента.Док;

		Попытка		
			ВыполнитьПроверкуПоТипуДокумента(ПараметрыДокумента);
			ЗаполнитьНаОсновании(ПараметрыДокумента);	
		Исключение
			Если Док.Метаданные().Имя<>"ПриходныйОрдерНаТовары" и Док.Метаданные().Имя<>"РасходныйОрдерНаТовары"  Тогда
				Попытка Док.Заполнить(Об.ИсходныйДокумент); Исключение КонецПопытки;
			КонецЕсли;	
		КонецПопытки;

		Если ЭтоНовыйДокумент тогда
			Док.Дата = ТекущаяДата();
		КонецЕсли;

		Если ИспользоватьПодбор тогда

			Попытка
				НазначениеЗаполненоВТЧПодбор = ПолучитьНазначениеЗаполненоВТЧ(Об.ИсходныйДокумент[ИмяТабличнойЧастиПодбор]);
			Исключение
				НазначениеЗаполненоВТЧПодбор = Ложь;
			КонецПопытки;

			Если НазначениеЗаполненоВТЧПодбор Тогда
				ИсходныеДанныеПодбор = Об.ИсходныйДокумент[ИмяТабличнойЧастиПодбор].Выгрузить();	
			КонецЕсли;

			Если ТабличнуюЧастьПриЗагрузкеПодбор=2 тогда
				ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПодбор]);	
			ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор=1 тогда
			ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор=3 тогда	
				Для каждого стр из Док[ПараметрыДокумента.ИмяТЧПодбор] цикл
					Попытка стр.Количество = 0; Исключение КонецПопытки;
					Попытка стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
					Попытка стр.КоличествоУпаковокОтобрано = 0; Исключение КонецПопытки;
					Попытка стр.КоличествоОтобрано = 0; Исключение КонецПопытки;
					Попытка стр.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка(); Исключение КонецПопытки;
					Попытка стр.КоличествоШт = 0; Исключение КонецПопытки;
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
		Если ИспользоватьПриемку тогда

			Попытка
				НазначениеЗаполненоВТЧПриемка = ПолучитьНазначениеЗаполненоВТЧ(Об.ИсходныйДокумент[ИмяТабличнойЧастиПриемка]);
			Исключение
				НазначениеЗаполненоВТЧПриемка = Ложь;
			КонецПопытки;

			Если НазначениеЗаполненоВТЧПриемка Тогда
				ИсходныеДанныеПриемка = Об.ИсходныйДокумент[ИмяТабличнойЧастиПриемка].Выгрузить();	
			КонецЕсли;

			Если ТабличнуюЧастьПриЗагрузкеПриемка=2 тогда
				ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПриемка]);	
			ИначеЕсли ТабличнуюЧастьПриЗагрузкеПриемка=1 тогда
			ИначеЕсли ТабличнуюЧастьПриЗагрузкеПриемка=3 тогда	
				Для каждого стр из Док[ПараметрыДокумента.ИмяТЧПриемка] цикл
					Попытка стр.Количество = 0; Исключение КонецПопытки;
					Попытка стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
					Попытка стр.КоличествоУпаковокОтобрано = 0; Исключение КонецПопытки;
					Попытка стр.КоличествоОтобрано = 0; Исключение КонецПопытки;
					Попытка стр.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка(); Исключение КонецПопытки;
					Попытка стр.КоличествоШт = 0; Исключение КонецПопытки;
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	

	ПараметрыДокумента.Вставить("СтатусОтбораРазмещенияТоваровПослеЗагрузки",СтатусОтбораРазмещенияТоваровПослеЗагрузки);

	ЗаполнитьШапку(ПараметрыДокумента,ЭтоНовыйДокумент);


	//РАБОТА С УПАКОВОЧНЫМИ ЛИСТАМИ СОЗДАННЫМИ ПРИ ОБРАБОТКЕ ДРУГИХ ДОКУМЕНТОВ
	Если СоздаватьДокументыУпаковочныхЛистов  тогда
		Попытка ЗаполнитьУпаковочныеЛисты(Об); Исключение КонецПопытки;	
	КонецЕсли;	


	//РАБОТА С КОММЕНТАРИЕМ ДОКУМЕНТА
	Попытка
		КомментДока=Об.Комментарий;
		КомментДока=СокрЛП(СтрЗаменить(КомментДока,СокрЛП(Док.Комментарий),""));

		КомментарийБезСимволаПереносаСтроки = СтрЗаменить(СокрЛП(Док.Комментарий), Символы.ПС, "-");
		ДлинаКомментария = СтрДлина(СокрЛП(КомментарийБезСимволаПереносаСтроки));

		КомментарииРавны = Ложь;

		Если КомментарийБезСимволаПереносаСтроки = КомментДока Тогда
			КомментарииРавны = Истина;	
		КонецЕсли; 

		СпередиВвели = Лев(КомментДока, ДлинаКомментария);
		СзадиВвели	 = Прав(КомментДока, ДлинаКомментария);

		Если НЕ АвтоматическийКомментарийИспользовать тогда
			КомментДМ = "";
		Иначе
			КомментДМ = "" + СокрЛП(АвтоматическийКомментарий) + " ("+ТекущаяДата()+"). " + Символы.ПС;
		КонецЕсли; 

		Если ЗагружатьКомментарий = 1 Тогда // До комментария документа 
			Если КомментарийБезСимволаПереносаСтроки = СпередиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СпередиВвели, ""));
				Док.Комментарий=КомментДМ + КомментарийОператора + Символы.ПС + Док.Комментарий;
			ИначеЕсли КомментарийБезСимволаПереносаСтроки = СзадиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СзадиВвели, ""));
				Док.Комментарий=КомментДМ + КомментарийОператора + Символы.ПС + Док.Комментарий;	
			Иначе	
				Док.Комментарий=КомментДМ + Символы.ПС + ?(КомментарииРавны, "", КомментДока) + Символы.ПС + Док.Комментарий;
			КонецЕсли;

		ИначеЕсли ЗагружатьКомментарий = 2 Тогда // После комментария документа
			Если КомментарийБезСимволаПереносаСтроки = СпередиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СпередиВвели, ""));
				Док.Комментарий = Док.Комментарий + КомментДМ + КомментарийОператора;
			ИначеЕсли КомментарийБезСимволаПереносаСтроки = СзадиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СзадиВвели, ""));
				Док.Комментарий = Док.Комментарий + КомментДМ + КомментарийОператора;	
			Иначе	
				Док.Комментарий =  ?(КомментарииРавны, "", Док.Комментарий) + Символы.ПС + КомментДока  + Символы.ПС + КомментДМ;
			КонецЕсли;	
		КонецЕсли;

		//Автокомментарий
		Если АвтоматическийКомментарийИспользовать Тогда
			АвтоКомментарий = АвтоматическийКомментарий;
			Если НЕ ЗначениеЗаполнено(Док.Комментарий) И ЗначениеЗаполнено(АвтоКомментарий) Тогда
				Док.Комментарий = СокрЛП(АвтоКомментарий);	
			КонецЕсли;	
		КонецЕсли;	

	Исключение
	КонецПопытки;


	//ОТБОР РАЗМЕЩЕНИЕ ДЛЯ ПРОВЕРКИ СТАТУСА
	Если Док.Метаданные().Имя="ОтборРазмещениеТоваров"  И СтатусПослеЗагрузки<>Неопределено тогда
		Док.Статус = СтатусПослеЗагрузки;
	КонецЕсли;

	//ПЕРЕСЧЕТ ДЛЯ ЗАПОЛНЕНИЯ ДАННЫХ ПО УЧЕТУ
	Если Док.Метаданные().Имя="ПересчетТоваров" тогда
		Если ТабличнуюЧастьПриЗагрузкеПодбор=2 тогда	
			ЗаполнитьПересчетТоваров(Док,Шаблон,Об.СобранныеДанныеПодбор.ВыгрузитьКолонку("Номенклатура"),Об.СобранныеДанныеПодбор.ВыгрузитьКолонку("ЯчейкаСсылка"));
		ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор=1 или ТабличнуюЧастьПриЗагрузкеПодбор=3 тогда
			Если Док[ПараметрыДокумента.ИмяТЧПодбор].Количество()=0 тогда
				ЗаполнитьПересчетТоваров(Док,Шаблон,Об.СобранныеДанныеПодбор.ВыгрузитьКолонку("Номенклатура"),Об.СобранныеДанныеПодбор.ВыгрузитьКолонку("ЯчейкаСсылка"));
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	


	//РАБОТА С ТАБЛИЧНОЙ ЧАСТЬЮ ПОДБОР
	Если ИспользоватьПодбор тогда

		Если ВидДокумента = "ЗаказКлиента" И ВидДокументаНового = "РеализацияТоваровУслуг" Тогда
			Док.Менеджер = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныйДокумент, "Менеджер");
		КонецЕсли;

		Если ВидДокумента  = "ПроизводствоБезЗаказа" И ВидДокументаНового = "ПриходныйОрдерНаТовары" Тогда
			Док.Ответственный = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныйДокумент, "Ответственный");
		КонецЕсли;

		ТаблицаДопФорм = Новый ТаблицаЗначений;
		ЕстьДополнительныеФормыДляПоискаСтрок = ЕстьДополнительныеФормыДляПоискаСтрок(Шаблон,0,ТаблицаДопФорм);

		Если ЕстьДополнительныеФормыДляПоискаСтрок тогда
			ТабТСД = ПолучитьТабТСДСУчетомДополнительныхФорм(Об.ссылка,0,ТаблицаДопФорм);
			НазначениеЗаполненоВТЧПодбор = Ложь;
		ИначеЕсли БазовыеЕдиницыПриЗагрузке И Не Док.Метаданные().Имя = "ДатаМобайл_УпаковочныйЛист" Тогда
			ТабТСД = ПолучитьТабТСДПриБазовыеЕдиницыПриЗагрузке(Об.ссылка);	
		Иначе	
			ТабТСД=Об.СобранныеДанныеПодбор.Выгрузить();
			ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист,УпаковочныйЛистАтрибуты","Количество,КоличествоМест");

			Если НазначениеЗаполненоВТЧПодбор Тогда
				ТабТСД = ДополнитьНазначениемТабТСД(ТабТСД, ИсходныеДанныеПодбор);
			КонецЕсли;
		КонецЕсли;

		Для Каждого СтрТЧ из Об.СобранныеДанныеПодбор цикл
			Если СтрТЧ.Количество > 0 тогда
				Попытка УстановитьАвтора(Док,СтрТЧ.Пользователь,ЭтоНовыйДокумент); 	Исключение КонецПопытки;
				Попытка УстановитьСкладПоЯчейке(Док,СтрТЧ.ЯчейкаСсылка); 	Исключение КонецПопытки;
				Прервать;
			КонецЕсли;
		КонецЦикла;	

		Если ТабличнуюЧастьПриЗагрузкеПодбор<>0 тогда

			Если ЭтоОтборРазмещениеТоваров и ПроверкаОтборРазмещение тогда
				Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками тогда

					Для каждого СтрокаОчисткиПодбор из док[ПараметрыДокумента.ИмяТЧПодбор] цикл
						СтрокаОчисткиПодбор.КоличествоУпаковокОтобрано = 0;
						СтрокаОчисткиПодбор.КоличествоОтобрано = 0;
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;	

			Для Каждого СтрТЧ из ТабТСД цикл

				Если СтрТЧ.Количество = 0 и НЕ Док.Метаданные().Имя="ПересчетТоваров" Тогда
					Продолжить;
				КонецЕсли;	

				Если СтрТЧ.Номенклатура.Пустая() Тогда
					СтрокаОшибок="Не выбрана номенклатура!!!";
					Возврат Неопределено;
				КонецЕсли;

				//Проверка на заполненность упаковок
				Если СтрТЧ.Номенклатура.ИспользоватьУпаковки И НЕ СтрТЧ.Номенклатура.ВесИспользовать И НЕ ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения) и Док.Метаданные().Имя="ОтборРазмещениеТоваров" Тогда
					СтрокаОшибок="Не выбрана упаковка, для документа обязательно указание упаковок!!!";
					Возврат Неопределено;
				КонецЕсли;

				Попытка 
					КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель/СтрТЧ.ЕдиницаИзмерения.Знаменатель;
					КоэффициентУпаковки = ?(КоэффициентУпаковки=0,1,КоэффициентУпаковки);
				Исключение
					КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель=0,1,СтрТЧ.ЕдиницаИзмерения.Числитель);
				Конецпопытки;


				лСтруктураПоиска=Новый Структура("Номенклатура,Характеристика",СтрТЧ.Номенклатура,СтрТЧ.ХарактеристикаНоменклатуры);

				лЕстьЯчейка=(ИспользованиеЯчеекПодбор>0 и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Ячейка")<>Неопределено));
				лЕстьСерия=(ИспользованиеСерийниковПодбор>0 и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Серия")<>Неопределено) и НЕ СерииВОтдельнойТЧ);
				лЕстьУпаковка=(Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка")<>Неопределено);
				лЕстьНазначение = Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Назначение") <> Неопределено;
				лЕстьУпаковочныйЛистРодитель=(ИспользоватьТиповыеУпаковочныеЛисты и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("УпаковочныйЛистРодитель")<>Неопределено));
				лЕстьКоличество = Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Количество") <> Неопределено;

				Если лЕстьЯчейка тогда
					лСтруктураПоиска.Вставить("Ячейка",СтрТЧ.ЯчейкаСсылка);
				КонецЕсли;

				Если лЕстьСерия тогда
					лСтруктураПоиска.Вставить("Серия",СтрТЧ.СерияСсылка);
				КонецЕсли;

				Если лЕстьУпаковка и НЕ БазовыеЕдиницыПриЗагрузке тогда
					Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
						Если Док.Склад.ИспользоватьАдресноеХранение  или Док.Помещение.ИспользоватьАдресноеХранение тогда
							лСтруктураПоиска.Вставить("Упаковка",СтрТЧ.ЕдиницаИзмерения);
						КонецЕсли;	
					Иначе
						лСтруктураПоиска.Вставить("Упаковка",СтрТЧ.ЕдиницаИзмерения);
					КонецЕсли;
				ИначеЕсли лЕстьУпаковка и БазовыеЕдиницыПриЗагрузке тогда		
					БазоваяУпаковка = ПолучитьБазовуюУпаковкуНоменклатуры(СтрТЧ.Номенклатура);
				КонецЕсли;	

				Если лЕстьУпаковочныйЛистРодитель тогда
					НомерУпакЛиста= СтрЗаменить(СтрТЧ.УпаковочныйЛист,"/////","");
					КоличествоМестВУпакЛисте = ПолучитьКоличествоМестВУпакЛисте(СтрТЧ.УпаковочныйЛистАтрибуты);

					Если ЗначениеЗаполнено(НомерУпакЛиста) тогда
						Если Лев(НомерУпакЛиста,3)="UPL" тогда 	
							НомерУпакЛиста = Прав(НомерУпакЛиста,СтрДлина(НомерУпакЛиста)-3);
							ДокументУпакЛиста = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоНомеру(НомерУпакЛиста);
						Иначе
							ДокументУпакЛиста = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоРеквизиту("Код",НомерУпакЛиста);
						КонецЕсли;
						ДокументТиповогоУпакЛиста = ДокументУпакЛиста.ТиповойУпаковочныйЛист;
					Иначе
						ДокументТиповогоУпакЛиста = Документы.УпаковочныйЛист.ПустаяСсылка();
					КонецЕсли;

					лСтруктураПоиска.Вставить("УпаковочныйЛистРодитель",ДокументТиповогоУпакЛиста);
				КонецЕсли;

				Если НазначениеЗаполненоВТЧПодбор Тогда
					Попытка лСтруктураПоиска.Вставить("Назначение", СтрТЧ.Назначение); Исключение КонецПопытки;
				КонецЕсли;

				Если ЕстьДополнительныеФормыДляПоискаСтрок Тогда
					ОбработатьСтруктуруПоискаСУчетомДополнительныхФорм(лСтруктураПоиска,ТаблицаДопФорм,СтрТЧ);				
				КонецЕсли;

				СтрокиПоиска=док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);

				Если СтрокиПоиска.Количество()=0 тогда
					Если ТабличнуюЧастьПриЗагрузкеПодбор=4 тогда
						продолжить;
					КонецЕсли;

					Если ВидДокументаНового = "РасходныйОрдерНаТовары" Тогда
						СтрокаТабличнойЧасти=док.ОтгружаемыеТовары.Добавить();
					Иначе
						СтрокаТабличнойЧасти=док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
					КонецЕсли;
					
					Если лЕстьСерия тогда
						лСтруктураПоиска.Удалить("Серия");
						СтрокиПоиска=док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
						
						Если СтрокиПоиска.Количество() <> 0 Тогда
							СтрокаТабличнойЧасти = СтрокиПоиска[0];		
						КонецЕсли; 
					КонецЕсли;

					СтрокаТабличнойЧасти.Номенклатура=СтрТЧ.Номенклатура;
					СтрокаТабличнойЧасти.Характеристика=СтрТЧ.ХарактеристикаНоменклатуры;

					Если лЕстьЯчейка тогда
						СтрокаТабличнойЧасти.Ячейка=СтрТЧ.ЯчейкаСсылка;
					КонецЕсли;
					Если лЕстьСерия тогда
						СтрокаТабличнойЧасти.Серия=СтрТЧ.СерияСсылка;			
					КонецЕсли;

					Если лЕстьУпаковка и НЕ БазовыеЕдиницыПриЗагрузке тогда
						Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
							Если Док.Склад.ИспользоватьАдресноеХранение или Док.Помещение.ИспользоватьАдресноеХранение тогда
								СтрокаТабличнойЧасти.Упаковка=СтрТЧ.ЕдиницаИзмерения;
							КонецЕсли;	
						Иначе
							СтрокаТабличнойЧасти.Упаковка=СтрТЧ.ЕдиницаИзмерения;
						КонецЕсли;
					ИначеЕсли лЕстьУпаковка и БазовыеЕдиницыПриЗагрузке тогда	
						СтрокаТабличнойЧасти.Упаковка=БазоваяУпаковка;	
					КонецЕсли;

					Если Док.Метаданные().Имя="ДатаМобайл_УпаковочныйЛист" ТОгда
						СтрокаТабличнойЧасти.Штрихкод = СтрТЧ.ШтрихКод;	
					КонецЕсли;

					Если НазначениеЗаполненоВТЧПодбор Тогда
						Попытка СтрокаТабличнойЧасти.Назначение = СтрТЧ.Назначение;  Исключение КонецПопытки;
					КонецЕсли;
					
					Если ЕстьДополнительныеФормыДляПоискаСтрок Тогда
						ОбработатьСтрокуСУчетомДополнительныхФорм(СтрокаТабличнойЧасти,ТаблицаДопФорм,СтрТЧ)
					КонецЕсли;

					Если лЕстьУпаковочныйЛистРодитель и ЗначениеЗаполнено(ДокументТиповогоУпакЛиста) тогда
						СтрокаТабличнойЧасти.УпаковочныйЛистРодитель = ДокументТиповогоУпакЛиста;

						лСтруктураПоискаУпакЛистов = Новый Структура("УпаковочныйЛист",ДокументТиповогоУпакЛиста);
						СтрокиПоискаУпаковочныхЛистов = док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоискаУпакЛистов);
						Если СтрокиПоискаУпаковочныхЛистов.Количество()=0 и ЗначениеЗаполнено(ДокументТиповогоУпакЛиста) тогда
							СтрокаТабличнойЧастиУпакЛиста = док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
							СтрокаТабличнойЧастиУпакЛиста.УпаковочныйЛист = ДокументТиповогоУпакЛиста;
							СтрокаТабличнойЧастиУпакЛиста.ЭтоУпаковочныйЛист = Истина;

							Если КоличествоМестВУпакЛисте > 0 Тогда
								СтрокаТабличнойЧастиУпакЛиста.Количество  =  КоличествоМестВУпакЛисте;
								СтрокаТабличнойЧастиУпакЛиста.КоличествоУпаковок = КоличествоМестВУпакЛисте;	
							Иначе
								СтрокаТабличнойЧастиУпакЛиста.Количество  =  1;
								СтрокаТабличнойЧастиУпакЛиста.КоличествоУпаковок = 1;
							КонецЕсли;

							ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента,Док,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧастиУпакЛиста,ИсходныеДанныеПодбор);
							ОбработатьСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧастиУпакЛиста, Шаблон);
						КонецЕсли;	
					КонецЕсли;

					ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента,Док,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧасти,ИсходныеДанныеПодбор);
					Попытка
						СтрокаТабличнойЧасти.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
					Исключение
					КонецПопытки;

				Иначе	
					СтрокаТабличнойЧасти=СтрокиПоиска[0];

				КонецЕсли;

				Если лЕстьНазначение Тогда
					Попытка ЗаполнитьНазначениеВСтрокеТЧ(ПараметрыДокумента, лСтруктураПоиска, СтрокаТабличнойЧасти); Исключение КонецПопытки;
				КонецЕсли;

				Если ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда	
					Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
						СтрокаТабличнойЧасти.КоличествоУпаковокФакт=СтрТЧ.Количество;
						СтрокаТабличнойЧасти.КоличествоФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт*КоэффициентУпаковки;
					Иначе	
						СтрокаТабличнойЧасти.КоличествоУпаковок = СтрТЧ.Количество;
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
					КонецЕсли;
				КонецЕсли;

				Если НЕ ТабличнуюЧастьПриЗагрузкеПодбор = 4 и НЕ ТабличнуюЧастьПриЗагрузкеПодбор = 5 тогда

					Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
						Если Док.Склад.ИспользоватьАдресноеХранение или Док.Помещение.ИспользоватьАдресноеХранение и НЕ БазовыеЕдиницыПриЗагрузке тогда
							СтрокаТабличнойЧасти.КоличествоУпаковокФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт+СтрТЧ.Количество;
							СтрокаТабличнойЧасти.КоличествоФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт*КоэффициентУпаковки;
						Иначе
							СтрокаТабличнойЧасти.КоличествоУпаковокФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт+СтрТЧ.Количество*КоэффициентУпаковки;
							СтрокаТабличнойЧасти.КоличествоФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт;
						КонецЕсли;
					ИначеЕсли ЭтоОтборРазмещениеТоваров и ПроверкаОтборРазмещение Тогда
						Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками тогда
							Если БазовыеЕдиницыПриЗагрузке Тогда
								СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано+СтрТЧ.Количество*КоэффициентУпаковки;
								СтрокаТабличнойЧасти.КоличествоОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано;
							Иначе
								СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано+СтрТЧ.Количество;
								СтрокаТабличнойЧасти.КоличествоОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано*КоэффициентУпаковки;	
							КонецЕсли; 
						Иначе
							Если БазовыеЕдиницыПриЗагрузке Тогда
								СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество*КоэффициентУпаковки;  
								СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок;
								СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковок;
								СтрокаТабличнойЧасти.КоличествоОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковок;
							Иначе	
								СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество;
								СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
								СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковок;
								СтрокаТабличнойЧасти.КоличествоОтобрано=СтрокаТабличнойЧасти.Количество;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если НЕ БазовыеЕдиницыПриЗагрузке тогда
							Попытка
								СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество;  
								СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
							Исключение
								Если лЕстьКоличество тогда
									СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество+СтрТЧ.Количество;
								КонецЕсли;	
							КонецПопытки;
						Иначе
							Попытка
								СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество*КоэффициентУпаковки;  
								СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок;
							Исключение
								Если лЕстьКоличество тогда
									СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество+СтрТЧ.Количество*КоэффициентУпаковки;
								КонецЕсли;	
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;

					Попытка СтрокаТабличнойЧасти.КоличествоШт=СтрокаТабличнойЧасти.КоличествоШт+СтрТЧ.КоличествоМест; Исключение КонецПопытки;

				КонецЕсли;

				Если СтрокаТабличнойЧасти <> Неопределено  тогда

					Если НЕ ТабличнуюЧастьПриЗагрузкеПодбор=4 тогда
						ОбработатьСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧасти, Шаблон);
					КонецЕсли;

					//Серии в отдельной ТЧ
					Если Док.метаданные().ТабличныеЧасти.Найти("Серии")<>Неопределено и НЕ СтрТЧ.СерияСсылка.Пустая() тогда
						Если Док.Метаданные().Имя="ПоступлениеТоваровУслуг" или Док.Метаданные().Имя="ПриобретениеТоваровУслуг" или (СтрокаТабличнойЧасти.СтатусУказанияСерий<>13 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>14 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>9 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>10  и СтрокаТабличнойЧасти.СтатусУказанияСерий<>0) тогда
							лСтруктураПоискаСерий=Новый Структура("Номенклатура,Характеристика,Серия",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика,СтрТЧ.СерияСсылка);
							СтрокиПоискаСерий=док["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
							Если СтрокиПоискаСерий.Количество()=0 тогда
								СтрокаТабличнойЧастиСерии=док["Серии"].Добавить();
								СтрокаТабличнойЧастиСерии.Номенклатура=СтрокаТабличнойЧасти.Номенклатура;
								СтрокаТабличнойЧастиСерии.Характеристика=СтрокаТабличнойЧасти.Характеристика;
								СтрокаТабличнойЧастиСерии.Серия=СтрТЧ.СерияСсылка;
								Попытка СтрокаТабличнойЧастиСерии.Склад=СтрокаТабличнойЧасти.Склад; Исключение КонецПопытки;
								Попытка СтрокаТабличнойЧастиСерии.Назначение=СтрокаТабличнойЧасти.Назначение; Исключение КонецПопытки;
							Иначе	
								СтрокаТабличнойЧастиСерии=СтрокиПоискаСерий[0];
							КонецЕсли;

							СтрокаТабличнойЧастиСерии.Количество=СтрокаТабличнойЧастиСерии.Количество+СтрТЧ.Количество*КоэффициентУпаковки;
						КонецЕсли;
					КонецЕсли;	
					//Серии в отдельной ТЧ

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

		Если ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(Док, ПараметрыДокумента.ИмяТЧПодбор,"",Шаблон, Об.Ссылка);	
		КонецЕсли; 

	КонецЕсли;




	//РАБОТА С ТАБЛИЧНОЙ ЧАСТЬЮ РАЗМЕЩЕНИЕ
	Если ИспользоватьПриемку тогда

		ТаблицаДопФорм = Новый ТаблицаЗначений;
		ЕстьДополнительныеФормыДляПоискаСтрок = ЕстьДополнительныеФормыДляПоискаСтрок(Шаблон,1,ТаблицаДопФорм);


		Если ЕстьДополнительныеФормыДляПоискаСтрок тогда
			ТабТСД = ПолучитьТабТСДСУчетомДополнительныхФорм(Об.ссылка,1,ТаблицаДопФорм);
			НазначениеЗаполненоВТЧПриемка = Ложь;
		Иначе		
			ТабТСД=Об.СобранныеДанныеПриемка.Выгрузить();
			ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ЯчейкаСсылка,СерияСсылка,ШтрихКод","Количество,КоличествоМест");

			Если НазначениеЗаполненоВТЧПриемка Тогда
				ТабТСД = ДополнитьНазначениемТабТСД(ТабТСД, ИсходныеДанныеПриемка);
			КонецЕсли;
		КонецЕсли;


		Для Каждого СтрТЧ из Об.СобранныеДанныеПриемка цикл
			Если СтрТЧ.Количество > 0 тогда
				Попытка УстановитьАвтора(Док,СтрТЧ.Пользователь,ЭтоНовыйДокумент); Исключение КонецПопытки;
				Попытка УстановитьСкладПоЯчейке(Док,СтрТЧ.ЯчейкаСсылка); Исключение КонецПопытки;
				Прервать;
			КонецЕсли;
		КонецЦИкла;	

		Если ТабличнуюЧастьПриЗагрузкеПриемка<>0 тогда

			Если ЭтоОтборРазмещениеТоваров и ПроверкаОтборРазмещение тогда
				Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками тогда

					Для каждого СтрокаОчисткиРазмещение из док[ПараметрыДокумента.ИмяТЧПриемка] цикл
						СтрокаОчисткиРазмещение.КоличествоУпаковокРазмещено = 0;
						СтрокаОчисткиРазмещение.КоличествоРазмещено = 0;
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;	


			Для Каждого СтрТЧ из ТабТСД цикл

				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;	

				Если СтрТЧ.Номенклатура.Пустая() Тогда
					СтрокаОшибок="Не выбрана номенклатура!!!";
					Возврат Неопределено;
				КонецЕсли;	

				лСтруктураПоиска=Новый Структура("Номенклатура,Характеристика",СтрТЧ.Номенклатура,СтрТЧ.ХарактеристикаНоменклатуры);

				Если Док.Метаданные().Имя="ОтборРазмещениеТоваров" И Не ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения) И ВидДокументаНового = "ОтборРазмещениеТоваров" Тогда
					ПоискСтрокПоИсх = ИсходныйДокумент.Товары.НайтиСтроки(лСтруктураПоиска);

					Если ПоискСтрокПоИсх.Количество() > 0 Тогда
						СтрТЧ.ЕдиницаИзмерения = ПоискСтрокПоИсх[0].Упаковка;	
					КонецЕсли; 					
				КонецЕсли; 

				//Проверка на заполненность упаковок
				Если СтрТЧ.Номенклатура.ИспользоватьУпаковки И НЕ СтрТЧ.Номенклатура.ВесИспользовать И НЕ ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения) и Док.Метаданные().Имя="ОтборРазмещениеТоваров" Тогда
					СтрокаОшибок="Не выбрана упаковка, для документа обязательно указание упаковок!!!";
					Возврат Неопределено;
				КонецЕсли;

				Попытка 
					КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель/СтрТЧ.ЕдиницаИзмерения.Знаменатель;
					КоэффициентУпаковки = ?(КоэффициентУпаковки=0,1,КоэффициентУпаковки);
				Исключение
					КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель=0,1,СтрТЧ.ЕдиницаИзмерения.Числитель);
				Конецпопытки;				

				лЕстьЯчейка=(ИспользованиеЯчеекПриемка>0 и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Ячейка")<>Неопределено));
				лЕстьСерия=(ИспользованиеСерийниковПриемка>0 и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Серия")<>Неопределено) и НЕ СерииВОтдельнойТЧ);
				лЕстьУпаковка=(Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Упаковка")<>Неопределено);
				лЕстьНазначение = Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Назначение") <> Неопределено;
				лЕстьКоличество = Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Количество") <> Неопределено;

				Если лЕстьЯчейка тогда
					лСтруктураПоиска.Вставить("Ячейка",СтрТЧ.ЯчейкаСсылка);
				КонецЕсли;

				Если лЕстьСерия тогда
					лСтруктураПоиска.Вставить("Серия",СтрТЧ.СерияСсылка);
				КонецЕсли;

				Если лЕстьУпаковка тогда
					лСтруктураПоиска.Вставить("Упаковка",СтрТЧ.ЕдиницаИзмерения);
				КонецЕсли;

				Если лЕстьУпаковка и не БазовыеЕдиницыПриЗагрузке тогда
					лСтруктураПоиска.Вставить("Упаковка",СтрТЧ.ЕдиницаИзмерения);
				ИначеЕсли лЕстьУпаковка и БазовыеЕдиницыПриЗагрузке тогда		
					БазоваяУпаковка = ПолучитьБазовуюУпаковкуНоменклатуры(СтрТЧ.Номенклатура);
				КонецЕсли;	

				Если НазначениеЗаполненоВТЧПриемка Тогда
					Попытка лСтруктураПоиска.Вставить("Назначение", СтрТЧ.Назначение); Исключение КонецПопытки;
				КонецЕсли;

				Если ЕстьДополнительныеФормыДляПоискаСтрок Тогда
					ОбработатьСтруктуруПоискаСУчетомДополнительныхФорм(лСтруктураПоиска,ТаблицаДопФорм,СтрТЧ);				
				КонецЕсли;

				Если Док.Метаданные().Имя="СборкаТоваров" Тогда
					Док.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
					Док.Номенклатура = СтрТЧ.Номенклатура;
					Док.Упаковка = СтрТЧ.ЕдиницаИзмерения;
					Док.КоличествоУпаковок = СтрТЧ.Количество;

					Попытка
						Если НЕ Об.Организация.Пустая() Тогда
							Док.Организация = Об.Организация;
						КонецЕсли;
					Исключение 
					КонецПопытки;

					Действия = Новый Структура;
					Действия.Вставить("ПроверитьХарактеристикуПоВладельцу", Док.Характеристика);
					Действия.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", Док.Упаковка);
					Действия.Вставить("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу", Док.ВариантКомплектации);
					Действия.Вставить("ПересчитатьКоличествоЕдиниц");
					Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));

					Шапка = Новый Структура("Номенклатура, Характеристика, Назначение, ВариантКомплектации, Упаковка,
					|Количество, КоличествоУпаковок, ХарактеристикиИспользуются, ТипНоменклатуры");
					ЗаполнитьЗначенияСвойств(Шапка, Док);
					КэшЗначений = Неопределено;
					Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
					Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Шапка, Действия, КэшЗначений);
					ЗаполнитьЗначенияСвойств(Док, Шапка);

					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Док, СтруктураДействий, Неопределено);

					Если НЕ ТабличнуюЧастьПриЗагрузкеПодбор=4 тогда
						ОбработатьСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧасти, Шаблон);
					КонецЕсли;

					//Серии в отдельной ТЧ
					Если Док.метаданные().ТабличныеЧасти.Найти("Серии")<>Неопределено и НЕ СтрТЧ.СерияСсылка.Пустая() тогда
						Если Док.Метаданные().Имя="СборкаТоваров" или  Док.Метаданные().Имя="ПоступлениеТоваровУслуг" или Док.Метаданные().Имя="ПриобретениеТоваровУслуг" или (СтрокаТабличнойЧасти.СтатусУказанияСерий<>13 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>14 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>9 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>10  и СтрокаТабличнойЧасти.СтатусУказанияСерий<>0) тогда
							лСтруктураПоискаСерий=Новый Структура("Номенклатура,Характеристика,Серия",СтрТЧ.Номенклатура,СтрТЧ.ХарактеристикаНоменклатуры,СтрТЧ.СерияСсылка);
							СтрокиПоискаСерий=док["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
							Если СтрокиПоискаСерий.Количество()=0 тогда
								СтрокаТабличнойЧастиСерии=док["Серии"].Добавить();
								СтрокаТабличнойЧастиСерии.Номенклатура=СтрТЧ.Номенклатура;
								СтрокаТабличнойЧастиСерии.Характеристика=СтрТЧ.ХарактеристикаНоменклатуры;
								СтрокаТабличнойЧастиСерии.Серия=СтрТЧ.СерияСсылка;
								Попытка СтрокаТабличнойЧастиСерии.Склад=СтрокаТабличнойЧасти.Склад; Исключение КонецПопытки;
								Попытка СтрокаТабличнойЧастиСерии.Назначение=СтрокаТабличнойЧасти.Назначение; Исключение КонецПопытки;
							Иначе	
								СтрокаТабличнойЧастиСерии=СтрокиПоискаСерий[0];
							КонецЕсли;

							СтрокаТабличнойЧастиСерии.Количество=СтрокаТабличнойЧастиСерии.Количество+СтрТЧ.Количество*КоэффициентУпаковки;
						КонецЕсли;
					КонецЕсли;	
					Если ИспользованиеСерийниковПодбор <> 0 ИЛИ ИспользованиеСерийниковПриемка <> 0 Тогда
						УстановитьСерииВдокументе(Док);
					КонецЕсли;

					Прервать;
				КонецЕсли;

				СтрокиПоиска=док[ПараметрыДокумента.ИмяТЧПриемка].НайтиСтроки(лСтруктураПоиска);
				Если СтрокиПоиска.Количество()=0 тогда
					СтрокаТабличнойЧасти=док[ПараметрыДокумента.ИмяТЧПриемка].Добавить();
					СтрокаТабличнойЧасти.Номенклатура=СтрТЧ.Номенклатура;
					СтрокаТабличнойЧасти.Характеристика=СтрТЧ.ХарактеристикаНоменклатуры;

					Если лЕстьЯчейка тогда
						СтрокаТабличнойЧасти.Ячейка=СтрТЧ.ЯчейкаСсылка;
					КонецЕсли;

					Если лЕстьСерия тогда
						СтрокаТабличнойЧасти.Серия=СтрТЧ.СерияСсылка;
					КонецЕсли;

					Если лЕстьУпаковка и НЕ БазовыеЕдиницыПриЗагрузке тогда
						СтрокаТабличнойЧасти.Упаковка=СтрТЧ.ЕдиницаИзмерения;
					ИначеЕсли лЕстьУпаковка и БазовыеЕдиницыПриЗагрузке тогда	
						СтрокаТабличнойЧасти.Упаковка=БазоваяУпаковка;	
					КонецЕсли;

					Если Док.Метаданные().Имя="ДатаМобайл_УпаковочныйЛист" ТОгда
						СтрокаТабличнойЧасти.Штрихкод = СтрТЧ.ШтрихКод;	
					КонецЕсли;
					
					Если НазначениеЗаполненоВТЧПриемка Тогда
						Попытка СтрокаТабличнойЧасти.Назначение = СтрТЧ.Назначение; Исключение КонецПопытки;
					КонецЕсли;

					Если ЕстьДополнительныеФормыДляПоискаСтрок Тогда
						ОбработатьСтрокуСУчетомДополнительныхФорм(СтрокаТабличнойЧасти,ТаблицаДопФорм,СтрТЧ)
					КонецЕсли;

					ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента,Док,ПараметрыДокумента.ИмяТЧПриемка,СтрокаТабличнойЧасти);
				Иначе	
					СтрокаТабличнойЧасти=СтрокиПоиска[0];
				КонецЕсли;

				Если лЕстьНазначение Тогда
					Попытка ЗаполнитьНазначениеВСтрокеТЧ(ПараметрыДокумента, лСтруктураПоиска, СтрокаТабличнойЧасти); Исключение КонецПопытки;
				КонецЕсли;	

				Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
					СтрокаТабличнойЧасти.КоличествоУпаковокФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт+СтрТЧ.Количество;
					СтрокаТабличнойЧасти.КоличествоФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт*КоэффициентУпаковки;
				ИначеЕсли ЭтоОтборРазмещениеТоваров и ПроверкаОтборРазмещение Тогда
					Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками тогда
						СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено=СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено+СтрТЧ.Количество;
						СтрокаТабличнойЧасти.КоличествоРазмещено=СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено*КоэффициентУпаковки;
					Иначе
						СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество;
						СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
						СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено=СтрокаТабличнойЧасти.КоличествоУпаковок;
						СтрокаТабличнойЧасти.КоличествоРазмещено=СтрокаТабличнойЧасти.Количество;	
					КонецЕсли;
				Иначе 											
					Если НЕ БазовыеЕдиницыПриЗагрузке тогда
						Попытка
							СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество;  
							СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
						Исключение
							Если лЕстьКоличество тогда
								СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество+СтрТЧ.Количество;
							КонецЕсли;	
						КонецПопытки;
					Иначе
						Попытка
							СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество*КоэффициентУпаковки;  
							СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок;
						Исключение
							Если лЕстьКоличество тогда
								СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество+СтрТЧ.Количество*КоэффициентУпаковки;
							КонецЕсли;	
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;

				Попытка СтрокаТабличнойЧасти.КоличествоШт=СтрокаТабличнойЧасти.КоличествоШт+СтрТЧ.КоличествоМест; Исключение КонецПопытки;

				Если СтрокаТабличнойЧасти <> Неопределено  тогда
					ОбработатьСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПриемка,СтрокаТабличнойЧасти, Шаблон);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(Док,"",ПараметрыДокумента.ИмяТЧПриемка, Шаблон, Об.Ссылка);
	КонецЕсли;


	//НОВЫЕ РЕКВИЗИТЫ АВТОЗАГРУЗКИ
	Попытка ЗаполнитьРеквизитыАвтозагрузки(Об,Шаблон,Док); Исключение КонецПопытки;


	//УСТАНОВКА СТАТУСОВ УКАЗАНИЯ СЕРИЙ В ДОКУМЕНТЕ
	Если ИспользованиеСерийниковПодбор<>0 или ИспользованиеСерийниковПриемка<> 0 Тогда
		Попытка УстановитьСерииВдокументе(Док); Исключение КонецПопытки; 
	КонецЕсли;

	//УСТАНОВКА РЕКВИЗИТОВ ШАПКИ ИЗ ДОПОЛНИТЕЛЬНЫХ ФОРМ
	Попытка ИзменитьРеквизитыШапкиИзДополнительныхФорм(Док, Шаблон, Об); Исключение КонецПопытки;	
	#Вставка
	//++РС Консалт: Минаков А.С. Задача 25317
	ЗаполнитьНазначение(Док);
	//++РС Консалт: Минаков А.С. Задача 25317
	#КонецВставки
	

	//ДОПОЛНИТЕЛЬНАЯ ОБРАБОТКА ПО ВИДАМ ДОКУМЕНТОВ
	Попытка ВыполнитьДополнительнуюОбработкуДокумента(Док,ПараметрыДокумента,ЕстьОшибки,СтрокаОшибок); Исключение КонецПопытки;
	Если ЕстьОшибки тогда
		Возврат Неопределено;
	КонецЕсли;


	//КОРРЕКТИРОВКА РЕАЛИЗАЦИИ
	Если Док.Метаданные().Имя="КорректировкаРеализации" Тогда
		Если НЕ Об.ПланРавноФакт Тогда
			Док = ЗаполнитьКорректировкуРеализации(Об, Док);
			Об.НовыйДокумент = Док;
		Иначе
			СтрокаОшибок = "создание корректировки не требуется!";
			Возврат Неопределено;
		КонецЕсли;	
		//АКТ РАСХОЖДЕНИЙ ПРИ ПРИЕМКЕ	
	ИначеЕсли Док.Метаданные().Имя="АктОРасхожденияхПослеПриемки" Тогда
		Если НЕ Об.ПланРавноФакт Тогда
			Док = ЗаполнитьАктОРасхожденияхПослеПриемки(Об, Док);
			Об.НовыйДокумент = Док;
		Иначе
			СтрокаОшибок = "создание акта о расхождении не требуется!";
			Об.ДатаЗавершения = ТекущаяДата();
			Об.Записать();
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;


	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ссылка",Неопределено);
	СтруктураВозврата.Вставить("СерилизованноеЗначениеОбъекта",Неопределено);


	//ПРОВЕДЕНИЕ ОБРАБОТАННЫХ ДОКУМЕНТОВ
	Если Док.Метаданные().Имя="КорректировкаРеализации" Тогда
		Если Док.Товары.Количество() Тогда
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;

		Если ПроводитьРоботом Тогда
			ПроведениеИсходногоДокумента(ВидДокументаНового, ИсходныйДокумент);

			Попытка 
				ВыполнитьДополнительноеПроведениеДокумента(Об,Док,ПараметрыДокумента); 
			Исключение 
				Если НЕ ЗначениеЗаполнено(Док.Ссылка) тогда
					Док.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;		
			КонецПопытки;
		КонецЕсли; 		
	ИначеЕсли Док.Метаданные().Имя="АктОРасхожденияхПослеПриемки" Тогда
		Если Док.Товары.Количество() Тогда
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;

		Если ПроводитьРоботом Тогда
			ПроведениеИсходногоДокумента(ВидДокументаНового, ИсходныйДокумент);

			Попытка 
				ВыполнитьДополнительноеПроведениеДокумента(Об,Док,ПараметрыДокумента); 
			Исключение 
				Если НЕ ЗначениеЗаполнено(Док.Ссылка) тогда
					Док.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;		
			КонецПопытки;
		КонецЕсли;
	Иначе
		Если ПроводитьРоботом тогда

			ПроведениеИсходногоДокумента(ВидДокументаНового, ИсходныйДокумент);	

			//ПРОВЕДЕНИЕ ТЕКУЩЕГО
			Попытка 
				ВыполнитьДополнительноеПроведениеДокумента(Об,Док,ПараметрыДокумента); 
			Исключение 
				Если Док.Метаданные().Имя="ОтборРазмещениеТоваров"  И СтатусПослеЗагрузки<>Неопределено тогда
					Док.Статус = СтатусПослеЗагрузки;
				КонецЕсли;

				Если Док.Метаданные().Имя="ОтборРазмещениеТоваров" Тогда
					ОшибокЗаполненияНеОбнаружено = Док.ПроверитьЗаполнение();
				КонецЕсли;	

				Если ОшибокЗаполненияНеОбнаружено тогда
					Попытка 
						Док.Записать(РежимЗаписиДокумента.Проведение); 
					Исключение 
						Попытка 
							Док.Записать(РежимЗаписиДокумента.Запись); 
						Исключение 
						КонецПопытки;
					КонецПопытки;
				Иначе
					Если НЕ ЗначениеЗаполнено(Док.Ссылка) тогда
						Док.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;	
				КонецЕсли;	
			КонецПопытки;
		Иначе
			Если ОткрыватьДокументыПослеЗагрузкиБезЗаписи И НЕ(ОбрабатыватьРоботом или ПроводитьРоботом или ИспользоватьМаркировку или ИспользоватьГрупповойДокумент) тогда

				Попытка
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.УстановитьСтроку();
					ЗаписатьXML(ЗаписьXML, Док);
					СерилизованноеЗначениеОбъекта = ЗаписьXML.Закрыть();

					СтруктураВозврата.СерилизованноеЗначениеОбъекта = СерилизованноеЗначениеОбъекта;
					СтруктураВозврата.Ссылка = Док.Ссылка;
				Исключение
					Возврат Неопределено;
				КонецПопытки;

			Иначе	
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;


	Если Док.Метаданные().Имя = "СписаниеНедостачТоваров" и Док.Проведен и СоздаватьДокументИСМП и ИспользоватьМаркировку Тогда
		СоздатьДокументВыводИзОборотаИСМП(Док, Об, СтрокаОшибок, Ложь);		
	КонецЕсли; 


	УдалосьПровестиПеремещение 				= Ложь;
	УдалосьПровестиРасходныйПриходныйОрдер  = Ложь;	
	Если ОшибокЗаполненияНеОбнаружено тогда
		Попытка ВыполнитьДополнительнуюОбработкуИсходногоДокумента(Док,ПараметрыДокумента, УдалосьПровестиПеремещение); Исключение КонецПопытки;	
		Если ЭтоБыстроеПеремещение Тогда
			ПроцедураПоБыстромуПеремещению(Об, Док.Ссылка, Об.СобранныеДанныеПодбор.Выгрузить(), БыстроеПеремещение, УдалосьПровестиПеремещение, УдалосьПровестиРасходныйПриходныйОрдер);		
		КонецЕсли;	

		Об.ДатаЗавершения=ТекущаяДата();
	КонецЕсли;


	//УСТАНОВКА ССЫЛКИ НА ОБРАБОТАННЫЙ ДОКУМЕНТ В СПРАВОЧНИКЕ ДОКУМЕНТЫ ТСД
	Если СокрЛП(ВидДокументаНового)="" или БыстраяПриемка или БыстраяОтгрузка тогда//старая схема
		Об.ИсходныйДокумент=Док.Ссылка;
	Иначе	
		Об.НовыйДокумент=Док.Ссылка;
	КонецЕсли;	

	//ЗАПИСЬ ДОКУМЕНТА ТСД И ВОЗВРАТ ССЫЛКИ НА ОБРАБОТАННЫЙ ДОКУМЕНТ		
	Об.Записать();

	Если ОткрыватьДокументыПослеЗагрузкиБезЗаписи И НЕ(ОбрабатыватьРоботом или ПроводитьРоботом или ИспользоватьМаркировку или ИспользоватьГрупповойДокумент) тогда
		Возврат СтруктураВозврата;
	Иначе
		Возврат Док.Ссылка;
	КонецЕсли;

КонецФункции

&ИзменениеИКонтроль("ОбработатьСтрокуТЧ")
Процедура РСК_ОбработатьСтрокуТЧ(Док, ИмяТЧ, СтрокаТабличнойЧасти, Шаблон)

	ИмяДока = Док.Метаданные().Имя; 

	Модуль_ОбработкаТабличнойЧастиКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиКлиентСервер");
	Модуль_ОбщегоНазначенияКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	Модуль_Пользователи = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("Пользователи");
	Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");

	Если ИмяДока="РеализацияТоваровУслуг" ИЛИ ИмяДока="ВозвратТоваровОтКлиента" или ИмяДока="ОтгрузкаТоваровСХранения" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;

			Попытка
				ИспользоватьСоглашенияСКлиентами                  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");    			

				Если НЕ ИмяДока="ВозвратТоваровОтКлиента" Тогда						
					Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
						СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док));
					КонецЕсли;						
				КонецЕсли;           				

				Если ТекущаяСтрока.Количество > 0 Тогда
					СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
				ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Док.Соглашение) Тогда
					СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Док));

					Если ИмяДока = "РеализацияТоваровУслуг" Тогда
						Если ЗначениеЗаполнено(Док.ЗаказКлиента) Тогда
							СтруктураДействий.ЗаполнитьУсловияПродаж.Дата = Док.ЗаказКлиента.Дата;	
						КонецЕсли;	
					КонецЕсли;

				КонецЕсли;	
			Исключение
			КонецПопытки;

			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли ИмяДока="ПриобретениеТоваровУслуг" или ИмяДока="ЗаказПоставщику" или ИмяДока="АктОРасхожденияхПослеПриемки" или ИмяДока="ПриемкаТоваровНаХранение"  Или ИмяДока="ПоступлениеТоваровУслуг" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			СтруктураДействий.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли ИмяДока="ОтборРазмещениеТоваров" тогда
		Если ИмяТЧ="ТоварыОтбор" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;

			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Отобрано");
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
			СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		ИначеЕсли ИмяТЧ="ТоварыРазмещение" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;

			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Размещено");
			#Вставка
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
			СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
			
			//++РС Консалт: Минаков А.С. ЗагрузкаТСД
			#КонецВставки

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли ИмяДока="ЧекККМ" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;

			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Док));

			СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад, Номенклатура, Характеристика", Док.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Модуль_Пользователи.ТекущийПользователь()));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");

			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;

			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);		
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);		
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);		
		КонецЕсли;	

	ИначеЕсли ИмяДока="ЧекЕГАИС" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			УстановитьЦенуТовара(ТекущаяСтрока);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Модуль_Пользователи.ТекущийПользователь()));

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			КэшированныеЗначения = Модуль_ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруКэшируемыеЗначения();

			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрокаСтруктура, СтруктураДействий, КэшированныеЗначения);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;
	ИначеЕсли ИмяДока="ЗаказКлиента" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;

			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;

			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);

			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаОтгрузки) тогда
				ТекущаяСтрока.ДатаОтгрузки = Док.Дата;
			КонецЕсли;

			Попытка ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить; Исключение КонецПопытки;

		КонецЕсли;
	ИначеЕсли ИмяДока="РасходныйОрдерНаТовары" тогда
		Если Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен или Док.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке тогда
			Попытка
				ТекущаяСтрока = СтрокаТабличнойЧасти;
				ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			Исключение
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ИмяДока="ОрдерНаПеремещениеТоваров" тогда
		Если ИмяТЧ="ОтгружаемыеТовары" и (Док.Статус = Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке или Док.Статус = Перечисления.СтатусыОрдеровНаПеремещение.Принят) тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		КонецЕсли;
	ИначеЕсли ИмяДока="МаркировкаТоваровИСМП" или  ИмяДока="ВыводИзОборотаИСМП" или ИмяДока="ВводОстатков" тогда
		Если ИмяТЧ="Товары" тогда

			ТекущаяСтрока = СтрокаТабличнойЧасти;

			СтруктураДействий = Новый Структура;

			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);

			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;

			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли;

			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;

			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;

			Если ИмяДока="МаркировкаТоваровИСМП" Тогда
				Попытка ПриЗаполненииСертификатовНоменклатуры(ТекущаяСтрока); Исключение КонецПопытки;			
			КонецЕсли; 

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);		
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);

		КонецЕсли;
	ИначеЕсли ИмяДока = "ВозвратТоваровМеждуОрганизациями" Тогда

		Если ИмяТЧ="Товары" тогда

			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВозвратТоваровМеждуОрганизациями));

			ДействияЦены = ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док);
			ДействияПересчетНДС = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Док);
			Действия = Новый Структура;

			ДействияПриЗаполненииСтавкиНДС = Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата);

			Действия.Вставить("ПроверитьХарактеристикуПоВладельцу",ТекущаяСтрока.Характеристика);		
			Действия.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",ТекущаяСтрока.Упаковка);
			Действия.Вставить("ПересчитатьКоличествоЕдиниц");
			Действия.Вставить("ЗаполнитьЦенуПродажи",ДействияЦены);
			Действия.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			Действия.Вставить("ПересчитатьСумму");
			Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
			Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
			Действия.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Док.Склад, ПараметрыУказанияСерий));
			Действия.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, Действия);
			Попытка ТекущаяСтрокаСтруктура.ВидЦены = Док.ВидЦены; Исключение КонецПопытки;
			Попытка 
				Модуль_ОбработкаТабличнойЧастиВызовСервера = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиВызовСервера");
				Модуль_ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, Действия, Неопределено); 
			Исключение 
			КонецПопытки;

			//Если НЕ ТекущаяСтрокаСтруктура.ВедетсяУчетПоГТД Тогда
			//	ТекущаяСтрокаСтруктура.НомерГТД = Неопределено;
			//	ТекущаяСтрокаСтруктура.СтранаПроисхождения = Неопределено;
			//КонецЕсли;

			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);

		КонецЕсли;

	КонецЕсли;

	//Если Шаблон.ИспользованиеСерийниковПодбор <> 0 ИЛИ Шаблон.ИспользованиеСерийниковПриемка <> 0 Тогда
	//	Попытка УстановитьСерииВдокументе(Док); Исключение КонецПопытки;
	//КонецЕсли;

КонецПроцедуры

&Вместо("ПолучитьТекущуюСтрокуСтруктурой")
Функция РСК_ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий)
	
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	Результат = ПродолжитьВызов(ТекущаяСтрока, СтруктураДействий);
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки") Тогда
		Результат.Вставить("Номенклатура");
		Результат.Вставить("Упаковка");
		Результат.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки") Тогда
		Результат.Вставить("Номенклатура");
		Результат.Вставить("Упаковка");
		Результат.Вставить("ОбъемУпаковки");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, ТекущаяСтрока);
	
	Возврат Результат;
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	
КонецФункции

Процедура ЗаполнитьНазначение(Док)
	
	//++РС Консалт: Минаков А.С. Задача 25317
	Если ТипЗнч(Док) = Тип("ДокументОбъект.ОтборРазмещениеТоваров") Тогда
		
		Модульреа_ОбщийСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("реа_ОбщийСерверПовтИсп");
		
		ЯчейкиСоисполнение = Новый Массив;
		ЯчейкиСоисполнение.Добавить(Модульреа_ОбщийСерверПовтИсп.ПолучитьПредопределенноеЗначение("РС_Ячейка", "LUXSAN", Ложь));
		ЯчейкиСоисполнение.Добавить(Модульреа_ОбщийСерверПовтИсп.ПолучитьПредопределенноеЗначение("РС_Ячейка", "Опора ЮГ", Ложь));
		ЯчейкиСоисполнение.Добавить(Модульреа_ОбщийСерверПовтИсп.ПолучитьПредопределенноеЗначение("РС_Ячейка", "Тифло", Ложь));
		//ЯчейкиСоисполнение.Добавить(Модульреа_ОбщийСерверПовтИсп.ПолучитьПредопределенноеЗначение("РС_Ячейка",));

		НазначениеСоисполнительство = Модульреа_ОбщийСерверПовтИсп.ПолучитьПредопределенноеЗначение("РС_НазначениеСоисполнительство",, Ложь);
		
		Если Док.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение Тогда
			
			СтруктураПоиска = Новый Структура("Назначение, Номенклатура, Упаковка, Характеристика, Серия", Справочники.Назначения.ПустаяСсылка()); 
			Для Каждого Строка Из Док.ТоварыРазмещение Цикл
				
				Если ЯчейкиСоисполнение.Найти(Строка.Ячейка) = Неопределено
					Или ЗначениеЗаполнено(Строка.Назначение) Тогда
					Продолжить
				КонецЕсли;	
				
				Строка.Назначение = НазначениеСоисполнительство; 
				
				ОсталосьРаспределить = Строка.Количество;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка,, "Назначение");
				НайденныеСтроки = Док.ТоварыОтбор.НайтиСтроки(СтруктураПоиска);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					Если ОсталосьРаспределить <= 0 Тогда
						Продолжить
					КонецЕсли;	
					
					Распределить = Мин(ОсталосьРаспределить, НайденнаяСтрока.Количество);
					
					ОсталосьРаспределить = ОсталосьРаспределить - Распределить;
					
					НайденнаяСтрока.Назначение = Строка.Назначение;
					
					Если Не Распределить = НайденнаяСтрока.Количество Тогда
						НоваяСтрока = Док.ТоварыОтбор.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока,, "Назначение");
						
						Кф = Распределить / НайденнаяСтрока.Количество;
						
						НайденнаяСтрока.Количество = Распределить;
						НайденнаяСтрока.КоличествоОтобрано = НайденнаяСтрока.КоличествоОтобрано * Кф;
						НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок * Кф;
						НайденнаяСтрока.КоличествоУпаковокОтобрано = НайденнаяСтрока.КоличествоУпаковокОтобрано * Кф;
						НайденнаяСтрока.ОбъемУпаковки = НайденнаяСтрока.ОбъемУпаковки * Кф;
						НайденнаяСтрока.ВесУпаковки = НайденнаяСтрока.ВесУпаковки * Кф;
						
						НоваяСтрока.Количество = НоваяСтрока.Количество - НайденнаяСтрока.Количество;
						НоваяСтрока.КоличествоОтобрано = НоваяСтрока.КоличествоОтобрано - НайденнаяСтрока.КоличествоОтобрано;
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок - НайденнаяСтрока.КоличествоУпаковок;
						НоваяСтрока.КоличествоУпаковокОтобрано = НоваяСтрока.КоличествоУпаковокОтобрано - НайденнаяСтрока.КоличествоУпаковокОтобрано;
						НоваяСтрока.ОбъемУпаковки = НоваяСтрока.ОбъемУпаковки - НайденнаяСтрока.ОбъемУпаковки;
						НоваяСтрока.ВесУпаковки = НоваяСтрока.ВесУпаковки - НайденнаяСтрока.ВесУпаковки
					КонецЕсли	
				КонецЦикла 
			КонецЦикла
		ИначеЕсли Док.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда
			Для Каждого Строка Из Док.ТоварыРазмещение Цикл
				
				Если ЯчейкиСоисполнение.Найти(Строка.Ячейка) = Неопределено
					Или ЗначениеЗаполнено(Строка.Назначение) Тогда
					Продолжить
				КонецЕсли;	
				
				Строка.Назначение = НазначениеСоисполнительство 
			КонецЦикла
		КонецЕсли	
	КонецЕсли
	//++РС Консалт: Минаков А.С. Задача 25317
	
КонецПроцедуры

