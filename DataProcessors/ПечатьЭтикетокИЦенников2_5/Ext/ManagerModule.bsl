
&ИзменениеИКонтроль("ПодготовитьСтруктуруДанных")
Функция РСК_ПодготовитьСтруктуруДанных(СтруктураНастроек, Режим)

	Если СтруктураНастроек.ИсходныеДанные <> Неопределено Тогда
		ИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать();
	Иначе
		ИсходныеДанные = Неопределено;
	КонецЕсли;

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Таблица",                             Неопределено);
	СтруктураРезультата.Вставить("СоответствиеПолейСКДКолонкамТаблицы", Новый Соответствие);

	// Схема компоновки.
	Если Режим = "ОбъектыЭксплуатации" Тогда
		//++ НЕ УТ
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокОбъектовЭксплуатации.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
		//++ Локализация
	ИначеЕсли Режим = "ТМЦВЭксплуатации" Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокТМЦВЭксплуатации.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
		//-- Локализация
		//-- НЕ УТ
		//++ НЕ УТКА
	ИначеЕсли Режим = "Узлы" Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокУзловОбъектовЭксплуатации.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
		//-- НЕ УТКА
	Иначе
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников2_5.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
		#Вставка
		//++ РС Консалт: Минаков А.С. Это из-за режима совместимости
		//++ РС Консалт: Трофимов Евгений 27.09.2022 Задача 20606
		//e1cib/data/Документ.Задание?ref=88dd3ef1ebd77cdd42fd6d7709329b96
		//В платформе 8.3.20.1996 возникает ошибка на строке запроса
		//
		//{(6, 67)}: Поле не найдено "НаборУпаковок"
		//ВЫРАЗИТЬ(ИсходныеДанные.Номенклатура КАК Справочник.Номенклатура)<<?>>.НаборУпаковок КАК НаборУпаковок,
		//
		//Исправил на левое соединение со справочником Номенклатура
		Если СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаТовары" Тогда
			СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников2_5.ПолучитьМакет("РСК_ПоляШаблонаТовары");
		КонецЕсли;
		//-- КонецЗадачи 20606		
		#КонецВставки
	КонецЕсли; 

	НаборДанныхВСКДЗапрос = ТипЗнч(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");

	Если НаборДанныхВСКДЗапрос Тогда

		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры",
		"ИсходныеДанные.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЕдиничныеУпаковкиВладельцы.Упаковка",
		"ЕдиничныеУпаковкиВладельцы.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ИсходныеДанные.Упаковка",
		"ИсходныеДанные.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки4",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЕдиничныеУпаковкиНоменклатур.Упаковка",
		"ЕдиничныеУпаковкиНоменклатур.Номенклатура"));

		ПечатьЭтикетокИЦенниковЛокализация.ПриПодготовкеСтруктурыДанныхНабора(Режим, СхемаКомпоновкиДанных, ТекстЗапроса);

		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ТекстЗапроса;

	КонецЕсли;

	// Возможно изменение схемы компоновки данных.
	ДанныеПолученияВыражений = РаботаСФормулами.ДанныеДляПолученияВыраженийФормулЧерезСКД(СхемаКомпоновкиДанных,
	СтруктураНастроек.ОбязательныеПоля, Истина);

	ПоляДляВыборки = Новый Массив;
	НомерПоля = 0;

	// Хранит назначенные имена вычисляемым полям. Для получения данных в СКД (содержатся наборы объекты).
	ИменаКолонокДляСКД = Новый Соответствие;
	// Хранит исходные выражения, указанные в макете печати. Для получения данных в запросе (содержатся наборы запросы).
	ИсходныеВыраженияДляЗапроса = Новый Соответствие;
	Для Каждого ПреобразованиеВыражения Из ДанныеПолученияВыражений.ПреобразованныеВыражения Цикл
		ИсходноеВыражение = ПреобразованиеВыражения.Ключ;
		РезультатПреобразования = ПреобразованиеВыражения.Значение;
		Если ЗначениеЗаполнено(РезультатПреобразования) Тогда
			Если СтрНайти(РезультатПреобразования, ".") > 0 Тогда
				НомерПоля = НомерПоля + 1;
				ИмяПоля = "ВычисляемоеПоле" + Формат(НомерПоля, "ЧН=0; ЧГ=0;");

				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных,
				ИмяПоля,
				РезультатПреобразования);
				ПоляДляВыборки.Добавить(ИмяПоля);

				Если НЕ НаборДанныхВСКДЗапрос Тогда
					ИменаКолонокДляСКД.Вставить(ИсходноеВыражение, ЗаменитьСпецСимволы(ИмяПоля));
				КонецЕсли;
			Иначе
				// Исходное поле компоновки.
				ПоляДляВыборки.Добавить(РезультатПреобразования);

				Если НЕ НаборДанныхВСКДЗапрос Тогда
					ИменаКолонокДляСКД.Вставить(ИсходноеВыражение, ЗаменитьСпецСимволы(РезультатПреобразования));
				КонецЕсли;
			КонецЕсли;
			Если НаборДанныхВСКДЗапрос Тогда
				ИсходныеВыраженияДляЗапроса.Вставить(РезультатПреобразования, ИсходноеВыражение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();

	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
	КонецЕсли;

	Для Каждого ИмяПоля Из ПоляДляВыборки Цикл
		ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЦикла;

	Если Режим = "Товары" Тогда
		// Заполнение параметров.
		Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
			Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр
				УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
			Иначе
				УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
			КонецЕсли;
		КонецЦикла;
		УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя",        ТекущаяДатаСеанса());
		УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());

		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
	КонецЕсли;

	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	Если НаборДанныхВСКДЗапрос Тогда

		Для Каждого НаборДанных из МакетКомпоновкиДанных.НаборыДанных Цикл
			Для каждого Поле Из НаборДанных.Поля Цикл

				РезультатПреобразования = Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(Поле.ПутьКДанным);
				ИсходноеВыражение = ИсходныеВыраженияДляЗапроса.Получить(РезультатПреобразования);
				Если ИсходноеВыражение = Неопределено Тогда
					ИсходноеВыражение = РезультатПреобразования;
				КонецЕсли;
				СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Вставить(
				ИсходноеВыражение,
				ЗаменитьСпецСимволы(Поле.Имя));

			КонецЦикла;
		КонецЦикла;

	Иначе

		Для Каждого ПреобразованиеВыражения Из ДанныеПолученияВыражений.ПреобразованныеВыражения Цикл
			ИсходноеВыражение = ПреобразованиеВыражения.Ключ;
			ИмяКолонкиВРежимеСКД = ИменаКолонокДляСКД.Получить(ИсходноеВыражение);
			СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Вставить(
			Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ИсходноеВыражение),
			ИмяКолонкиВРежимеСКД);
		КонецЦикла;

	КонецЕсли;

	Если НаборДанныхВСКДЗапрос Тогда

		Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);

		// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
		Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
			Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
		КонецЦикла;

	КонецЕсли;

	Если Режим = "Товары" Тогда
		// Подмена запроса для расчета цен...
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда

			ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследних.Цена";
			ТекстЗамены = " ВЫРАЗИТЬ(
			|          ЦеныНоменклатурыСрезПоследних.Цена
			|          / 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) 
			|          * 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(31,2)) ";

			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ИсходныеДанныеПоследнийЗапрос.Упаковка",
			"ИсходныеДанныеПоследнийЗапрос.Номенклатура"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);

			ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследнихДополнительно.Цена";
			ТекстЗамены = " ВЫРАЗИТЬ(
			|          ЦеныНоменклатурыСрезПоследнихДополнительно.Цена
			|          / 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) 
			|          * 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(31,2)) ";
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследнихДополнительно.Упаковка",
			"ЦеныНоменклатурыСрезПоследнихДополнительно.Номенклатура"));
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ИсходныеДанныеПоследнийЗапрос.Упаковка",
			"ИсходныеДанныеПоследнийЗапрос.Номенклатура"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);

			ЗаменяемыйТекст = "ТоварыНаСкладахОстатки.ВНаличииОстаток";
			ТекстЗамены = " ВЫРАЗИТЬ(
			|          ТоварыНаСкладахОстатки.ВНаличииОстаток
			|          / 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК ЧИСЛО(31,2)) ";
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ИсходныеДанныеПоследнийЗапрос.Упаковка",
			"ИсходныеДанныеПоследнийЗапрос.Номенклатура"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);

		КонецЕсли;

		// Подмена запроса при печати этикеток...
		Если ИсходныеДанные <> Неопределено Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");

			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);

			Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОЛИЧЕСТВО(ИсходныеДанные.КоличествоЦенников)",
			"СУММА(ИсходныеДанные.КоличествоЦенниковДляПечати)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОЛИЧЕСТВО(ИсходныеДанные.КоличествоЭтикеток)",
			"СУММА(ИсходныеДанные.КоличествоЭтикеток)");	

			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");

			Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """Цена""", "ИсходныеДанные.Цена");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ЦенаДополнительно""", "ИсходныеДанные.ЦенаДополнительно");

			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ДатаПоследнегоИзмененияЦены""", "ИсходныеДанные.ДатаПоследнегоИзмененияЦены");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ДатаПоследнегоИзмененияЦеныДополнительно""", "ИсходныеДанные.ДатаПоследнегоИзмененияЦеныДополнительно");

		Иначе

			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Порядок,
			|		0 КАК Количество)";

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);

		КонецЕсли;

	ИначеЕсли Режим = "СкладскиеЯчейки" Тогда

		Если ИсходныеДанные <> Неопределено Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");

			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);

		Иначе

			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Ячейка,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);

		КонецЕсли;

	ИначеЕсли Режим = "СерииНоменклатуры" Тогда

		Если ИсходныеДанные <> Неопределено Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");

			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);

		Иначе

			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);

		КонецЕсли;

	ИначеЕсли Режим = "Доставка" Тогда

		Если ИсходныеДанные <> Неопределено Тогда

			ВнешниеНаборыДанных = Новый Структура;
			ВнешниеНаборыДанных.Вставить("ИсходныеДанныеНакладных", ИсходныеДанные);

			Результат = Новый ТаблицаЗначений;
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных);

			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Результат);	
			Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

			СтруктураРезультата.Таблица = Результат;

		КонецЕсли;

	ИначеЕсли Режим = "УпаковочныеЛисты" Тогда

		Если ИсходныеДанные <> Неопределено Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");

			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);

		Иначе

			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка) КАК Ссылка,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);

		КонецЕсли;

		//++ Локализация
	ИначеЕсли Режим = "ТМЦВЭксплуатации" Тогда

		Если ИсходныеДанные <> Неопределено Тогда

			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.ПартииТМЦВЭксплуатации.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|		ЗНАЧЕНИЕ(Справочник.ПартииТМЦВЭксплуатации.ПустаяСсылка) КАК Партия,
			|		"""" КАК ИнвентарныйНомер,
			|		0 КАК Порядок)";

			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");

			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);

		КонецЕсли;
		//-- Локализация

		//++ НЕ УТ
	ИначеЕсли Режим = "ОбъектыЭксплуатации" Тогда

		Если ИсходныеДанные <> Неопределено Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");

			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);

		Иначе

			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка) КАК ОбъектЭксплуатации,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);

		КонецЕсли;
		//-- НЕ УТ
		//++ НЕ УТКА
	ИначеЕсли Режим = "Узлы" Тогда

		Если ИсходныеДанные <> Неопределено Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");

			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);

		Иначе

			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.УзлыОбъектовЭксплуатации.ПустаяСсылка) КАК Узел,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);

		КонецЕсли;
		//-- НЕ УТКА
	КонецЕсли;

	ПечатьЭтикетокИЦенниковЛокализация.ПриПодготовкеСтруктурыДанныхДляПечати(СтруктураНастроек, Режим, Запрос, ИсходныеДанные);

	Если НаборДанныхВСКДЗапрос Тогда
		СтруктураРезультата.Таблица = Запрос.Выполнить().Выгрузить();
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции
