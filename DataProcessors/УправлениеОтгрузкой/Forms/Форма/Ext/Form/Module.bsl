 
&НаСервере
&После("ПриСозданииНаСервере")
Процедура РСК_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	КоллекцияПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
	"Документ.РеализацияТоваровУслуг",
	Неопределено,
	0);
	
	Если КоллекцияПечатныхФорм <> Неопределено Тогда
		
		Для Каждого ТекСтрока Из КоллекцияПечатныхФорм Цикл
			
			НоваяСтрока = КомплектПечатныхФорм.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ВидДокумента = "РеализацияТоваровУслуг"
			
		КонецЦикла
		
	КонецЕсли;
	
	КоллекцияПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
	"Документ.ПеремещениеТоваров",
	Неопределено,
	0);
	
	Если КоллекцияПечатныхФорм <> Неопределено Тогда
		
		Для Каждого ТекСтрока Из КоллекцияПечатныхФорм Цикл
			
			НоваяСтрока = КомплектПечатныхФорм.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ВидДокумента = "ПеремещениеТоваров"
			
		КонецЦикла
		
	КонецЕсли
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

&НаСервере
&После("СкладПомещениеПриИзмененииСервер")
Процедура РСК_СкладПомещениеПриИзмененииСервер()
	
	//++РС Консалт Назаров М.Ю. 8 августа 2022 г. 8:34:43 
	// Установка отбора по складу в списке номенклатуры (Как в УТ)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РС_ПулНоменклатурыОтгрузка, "Склад",  Склад, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Склад));
	//--РС Консалт Назаров М.Ю. 8 августа 2022 г. 8:34:43
	
	//++РС Консалт: Минаков А.С. Задача 21223
	Элементы.СоздатьОрдераЗаданияНаОтбор.Видимость = ИспользоватьАдресноеХранение;
		
	Элементы.Состояние.СписокВыбора.Добавить("ВПроцессеОтбора", НСтр("ru = 'В процессе отбора';
																|en = 'Picking in process'"));
	//++РС Консалт: Минаков А.С. Задача 21223
	
КонецПроцедуры

&НаСервере
&После("УстановитьОтборыВЗависимыхСписках")
Процедура РСК_УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения)
	
	//++РС Консалт Назаров М.Ю. 8 августа 2022 г. 8:34:51                  
	Если ТекущиеРаспоряжения = Неопределено Тогда
		ТекущееРаспоряжениеНаОтбор = Неопределено;
		ТекущееРаспоряжениеНаОтгрузку = Неопределено;
	Иначе
		ТекущееРаспоряжениеНаОтбор    = ТекущиеРаспоряжения.РаспоряжениеНаОтбор;
		ТекущееРаспоряжениеНаОтгрузку = ТекущиеРаспоряжения.РаспоряжениеНаОтгрузку;
	КонецЕсли;
	
	// Установка параметра распоряжения в списке номенклатуры (Как в УТ)
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РС_ПулНоменклатурыОтгрузка, "Распоряжение",  ТекущееРаспоряжениеНаОтгрузку,ЗначениеЗаполнено(ТекущееРаспоряжениеНаОтгрузку));
	//--РС Консалт Назаров М.Ю. 8 августа 2022 г. 8:34:51
	
КонецПроцедуры

&НаСервере
&После("ЗаполнитьРаспоряженияНаОтгрузку")
Процедура РСК_ЗаполнитьРаспоряженияНаОтгрузку(ПроверятьИзменениеПараметров)
	
	//++РС Консалт: Минаков А.С. Задача 21223
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТчРаспоряжения.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ ВтРаспоряжения
	|ИЗ
	|	&ТчРаспоряжения КАК ТчРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЗаданиеНаПеревозку.Ссылка.Дата) КАК Дата,
	|	ЗаданиеНаПеревозку.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ ВтМаксимальныеЗадания
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРаспоряжения КАК ВтРаспоряжения
	|		ПО ЗаданиеНаПеревозку.Распоряжение = ВтРаспоряжения.Распоряжение
	|			И (ЗаданиеНаПеревозку.Ссылка.Проведен)
	|			И (ЗаданиеНаПеревозку.Склад = &Склад)
	|			И ЗаданиеНаПеревозку.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозку.Распоряжение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтРаспоряжения.Распоряжение КАК Распоряжение,
	|	Накладная.Ссылка КАК Ссылка,
	|	Накладная.Дата КАК Дата,
	|	1 КАК ВидНакладной
	|ПОМЕСТИТЬ ВтПулДокументов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Накладная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРаспоряжения КАК ВтРаспоряжения
	|		ПО (Накладная.Проведен)
	|			И (Накладная.Склад = &Склад)
	|			И (ВЫБОР
	|				КОГДА Накладная.РеализацияПоЗаказам
	|					ТОГДА Накладная.ЗаказКлиента
	|				ИНАЧЕ Накладная.Ссылка
	|			КОНЕЦ = ВтРаспоряжения.Распоряжение)
	|			И (НЕ Накладная.Ссылка В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗаданиеНаПеревозку.РСК_Накладная
	|					ИЗ
	|						Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозку
	|					ГДЕ
	|						ЗаданиеНаПеревозку.Ссылка.Проведен
	|						И ЗаданиеНаПеревозку.Доставлено))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтРаспоряжения.Распоряжение,
	|	Накладная.Ссылка,
	|	Накладная.Дата,
	|	2
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Накладная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРаспоряжения КАК ВтРаспоряжения
	|		ПО (Накладная.Проведен)
	|			И (Накладная.СкладОтправитель = &Склад)
	|			И (ВЫБОР
	|				КОГДА Накладная.ПеремещениеПоЗаказам
	|					ТОГДА Накладная.ЗаказНаПеремещение
	|				ИНАЧЕ Накладная.Ссылка
	|			КОНЕЦ = ВтРаспоряжения.Распоряжение)
	|			И (НЕ Накладная.Ссылка В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗаданиеНаПеревозку.РСК_Накладная
	|					ИЗ
	|						Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозку
	|					ГДЕ
	|						ЗаданиеНаПеревозку.Ссылка.Проведен
	|						И ЗаданиеНаПеревозку.Доставлено))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВтПулДокументов.Дата) КАК Дата,
	|	ВтПулДокументов.Распоряжение КАК Распоряжение,
	|	ВтПулДокументов.ВидНакладной КАК ВидНакладной
	|ПОМЕСТИТЬ ВтМаксимальныеНакладные
	|ИЗ
	|	ВтПулДокументов КАК ВтПулДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПулДокументов.Распоряжение,
	|	ВтПулДокументов.ВидНакладной
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтРаспоряжения.Распоряжение КАК Распоряжение,
	|	ЕСТЬNULL(Задания.Задание, НЕОПРЕДЕЛЕНО) КАК РС_ЗаданиеНаПеревозку,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Задания.Накладная, НЕОПРЕДЕЛЕНО) В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка))
	|			ТОГДА Накладные.Накладная
	|		ИНАЧЕ Задания.Накладная
	|	КОНЕЦ КАК Накладная
	|ИЗ
	|	ВтРаспоряжения КАК ВтРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ЗаданиеНаПеревозку.Ссылка) КАК Задание,
	|			ЗаданиеНаПеревозку.РСК_Накладная КАК Накладная,
	|			ВтМаксимальныеЗадания.Распоряжение КАК Распоряжение
	|		ИЗ
	|			ВтМаксимальныеЗадания КАК ВтМаксимальныеЗадания
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозку
	|				ПО (ЗаданиеНаПеревозку.Ссылка.Проведен)
	|					И (ЗаданиеНаПеревозку.Склад = &Склад)
	|					И (ЗаданиеНаПеревозку.Ссылка.Дата = ВтМаксимальныеЗадания.Дата)
	|					И (ЗаданиеНаПеревозку.Распоряжение = ВтМаксимальныеЗадания.Распоряжение)
	|					И ЗаданиеНаПеревозку.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВтМаксимальныеЗадания.Распоряжение,
	|			ЗаданиеНаПеревозку.РСК_Накладная) КАК Задания
	|		ПО ВтРаспоряжения.Распоряжение = Задания.Распоряжение
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВтПулДокументов.Ссылка) КАК Накладная,
	|			ВтПулДокументов.Распоряжение КАК Распоряжение
	|		ИЗ
	|			ВтМаксимальныеНакладные КАК ВтМаксимальныеНакладные
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПулДокументов КАК ВтПулДокументов
	|				ПО ВтМаксимальныеНакладные.ВидНакладной = ВтПулДокументов.ВидНакладной
	|					И ВтМаксимальныеНакладные.Распоряжение = ВтПулДокументов.Распоряжение
	|					И ВтМаксимальныеНакладные.Дата = ВтПулДокументов.Дата
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВтПулДокументов.Распоряжение) КАК Накладные
	|		ПО ВтРаспоряжения.Распоряжение = Накладные.Распоряжение");
	
	Запрос.УстановитьПараметр("ТчРаспоряжения", РаспоряженияНаОтгрузку.Выгрузить(, "Распоряжение"));
	Запрос.УстановитьПараметр("Склад", Склад);
	
	СтруктураПоиска = Новый Структура("Распоряжение");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Каждого СтрокаТч Из РаспоряженияНаОтгрузку Цикл 
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТч);
		Выборка.НайтиСледующий(СтруктураПоиска);
		ЗаполнитьЗначенияСвойств(СтрокаТч, Выборка);
        Выборка.Сбросить();
		
		ИменаРеквизитов = "Комментарий";
		
		ЕстьСпособДоставки = Ложь;
		Если Не СтрокаТч.Распоряжение.Метаданные().Реквизиты.Найти("СпособДоставки") = Неопределено Тогда
			ЕстьСпособДоставки  = Истина;
			ИменаРеквизитов = ИменаРеквизитов + ", СпособДоставки"
		КонецЕсли;
		
		Если Не ТипЗнч(СтрокаТч.Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
			СтрокаТч.РСК_Контрагент = СтрокаТч.Получатель
		Иначе
			ИменаРеквизитов = ИменаРеквизитов + ", Контрагент"	
		КонецЕсли;
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТч.Распоряжение, ИменаРеквизитов);
		
		Если ТипЗнч(СтрокаТч.Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
			СтрокаТч.РСК_Контрагент = РеквизитыДокумента.Контрагент	
		КонецЕсли;
		
		Если ЕстьСпособДоставки Тогда
			СтрокаТч.РСК_СпособДоставки = РеквизитыДокумента.СпособДоставки
		КонецЕсли;
		СтрокаТч.Комментарий = РеквизитыДокумента.Комментарий        
	КонецЦикла
	//++РС Консалт: Минаков А.С. Задача 21223.
	
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("СоздатьОрдераСервер")
Процедура РСК_СоздатьОрдераСервер()
	Если НЕ НазначитьЗонуОтгрузки Тогда
		ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;

	Получатели = Новый Соответствие;
	ЗаданияНаПеревозку = Новый Массив;
	#Вставка
	//++ РС Консалт: Минаков А.С. Задача 20226
	РСК_ЗаданияНаПеревозку = Новый Соответствие; 
	//++ РС Консалт: Минаков А.С. Задача 20226
	#КонецВставки

	СтруктураПараметровСозданияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
	СтруктураПараметровСозданияРасходныхОрдеров.Склад = Склад;
	Если ПоОдномуПомещению Тогда
		СтруктураПараметровСозданияРасходныхОрдеров.Помещение = ПомещениеДляСозданияРасходныхОрдеров;
	КонецЕсли;	
	СтруктураПараметровСозданияРасходныхОрдеров.ЗонаОтгрузки = ЗонаОтгрузки;
	#Вставка
	//++РС Консалт: Минаков А.С. Задача 21223
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить("НовыйСтатус", "КОтбору");
	//++РС Консалт: Минаков А.С. Задача 21223
	#КонецВставки

	Если ПоВсемРаспоряжениям = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		#Удаление
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Получатель КАК Получатель
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаспоряженияКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|		РаспоряженияКОтгрузке.Получатель КАК Получатель,
		|		РаспоряженияКОтгрузке.Номенклатура КАК Номенклатура,
		|		РаспоряженияКОтгрузке.Характеристика КАК Характеристика,
		|		РаспоряженияКОтгрузке.Назначение КАК Назначение,
		|		РаспоряженияКОтгрузке.Серия КАК Серия
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.Остатки(&ДатаОтгрузки, Склад = &Склад) КАК РаспоряженияКОтгрузке
		|	ГДЕ
		|		(&ОформлятьСначалаНакладные
		|					И РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.КОформлениюОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток > 0
		|				ИЛИ НЕ &ОформлятьСначалаНакладные
		|					И РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток > 0
		|				ИЛИ РаспоряженияКОтгрузке.СобираетсяОстаток <> 0
		|				ИЛИ РаспоряженияКОтгрузке.СобраноОстаток <> 0)) КАК ВложенныйЗапрос";
		#КонецУдаления
		#Вставка
		//++ РС Консалт: Минаков А.С. Задача 20226
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.ДокументОтгрузки КАК Распоряжение,
		|	ВложенныйЗапрос.Получатель КАК Получатель
		|ПОМЕСТИТЬ ВтРаспоряжения
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаспоряженияКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|		РаспоряженияКОтгрузке.Получатель КАК Получатель,
		|		РаспоряженияКОтгрузке.Номенклатура КАК Номенклатура,
		|		РаспоряженияКОтгрузке.Характеристика КАК Характеристика,
		|		РаспоряженияКОтгрузке.Назначение КАК Назначение,
		|		РаспоряженияКОтгрузке.Серия КАК Серия
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.Остатки(&ДатаОтгрузки, Склад = &Склад) КАК РаспоряженияКОтгрузке
		|	ГДЕ
		|		(&ОформлятьСначалаНакладные
		|					И РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.КОформлениюОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток > 0
		|				ИЛИ НЕ &ОформлятьСначалаНакладные
		|					И РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток > 0
		|				ИЛИ РаспоряженияКОтгрузке.СобираетсяОстаток <> 0
		|				ИЛИ РаспоряженияКОтгрузке.СобраноОстаток <> 0)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЗаданиеНаПеревозку.Ссылка.Дата) КАК Дата,
		|	ЗаданиеНаПеревозку.Распоряжение КАК Распоряжение
		|ПОМЕСТИТЬ ВтМаксимальныеЗадания
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРаспоряжения КАК ВтРаспоряжения
		|		ПО ЗаданиеНаПеревозку.Распоряжение = ВтРаспоряжения.Распоряжение
		|			И (ЗаданиеНаПеревозку.Ссылка.Проведен)
		|			И (ЗаданиеНаПеревозку.Склад = &Склад)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаданиеНаПеревозку.Распоряжение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Получатель КАК Получатель,
		|	ВложенныйЗапрос.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВтРаспоряжения.Получатель КАК Получатель,
		|		МАКСИМУМ(ЕСТЬNULL(ЗаданиеНаПеревозку.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка))) КАК ЗаданиеНаПеревозку
		|	ИЗ
		|		ВтРаспоряжения КАК ВтРаспоряжения
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВтМаксимальныеЗадания КАК ВтМаксимальныеЗадания
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозку
		|				ПО ВтМаксимальныеЗадания.Дата = ЗаданиеНаПеревозку.Ссылка.Дата
		|					И (ЗаданиеНаПеревозку.Ссылка.Проведен) 
		|					И (ЗаданиеНаПеревозку.Склад = &Склад)
		|					И (ЗаданиеНаПеревозку.Распоряжение = ВтМаксимальныеЗадания.Распоряжение)
		|			ПО ВтРаспоряжения.Распоряжение = ВтМаксимальныеЗадания.Распоряжение
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВтРаспоряжения.Получатель,
		|		ВтРаспоряжения.Распоряжение) КАК ВложенныйЗапрос
		|ИТОГИ ПО
		|	ЗаданиеНаПеревозку";
		//++ РС Консалт: Минаков А.С. Задача 20226
		#КонецВставки

		ДатаОтгрузкиДляЗапроса = ?(ЗначениеЗаполнено(ДатаОтгрузки),
		КонецДня(ДатаОтгрузки) + 1,
		ДатаОтгрузки);

		ОформлятьСначалаНакладные = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить()
		= Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаНакладные;

		Запрос.УстановитьПараметр("ОформлятьСначалаНакладные", ОформлятьСначалаНакладные);
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузкиДляЗапроса);
		
		#Удаление
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			Получатели.Вставить(Выборка.Получатель, Новый Массив);
		КонецЦикла;
		#КонецУдаления
		#Вставка
		//++ РС Консалт: Минаков А.С. Задача 20226
		ВыборкаЗадания = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗадания.Следующий() Цикл
			Выборка = ВыборкаЗадания.Выбрать();
			РСК_Получатели = Новый Соответствие;
			Пока Выборка.Следующий() Цикл
				РСК_Получатели.Вставить(Выборка.Получатель, Новый Массив);
			КонецЦикла;
			РСК_ЗаданияНаПеревозку.Вставить(ВыборкаЗадания.ЗаданиеНаПеревозку, РСК_Получатели) 
		КонецЦикла;
		//++ РС Консалт: Минаков А.С. Задача 20226
		#КонецВставки
	Иначе
		Для Каждого СтрИД Из Элементы.РаспоряженияНаОтгрузку.ВыделенныеСтроки Цикл

			СтрТабл = РаспоряженияНаОтгрузку.НайтиПоИдентификатору(СтрИД);

			Если СтрТабл = Неопределено Тогда
				ТекстПредупреждения = НСтр("ru = 'Выберите распоряжение на отгрузку товаров.';
				|en = 'Select a goods shipment reference.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
				Возврат;
			КонецЕсли;

			Если ТипЗнч(СтрТабл.Распоряжение) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
				СтруктураПараметровСозданияРасходныхОрдеров.ЗаданиеНаПеревозку = СтрТабл.Распоряжение;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
				|	ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель КАК Получатель
				|ИЗ
				|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
				|ГДЕ
				|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	Получатель";	
				Запрос.УстановитьПараметр("Ссылка", СтрТабл.Распоряжение);

				Выборка =  Запрос.Выполнить().Выбрать();
				Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл
					СтруктураПараметровСозданияРасходныхОрдеров.Получатель = Выборка.Получатель;
					Пока Выборка.Следующий() Цикл
						СтруктураПараметровСозданияРасходныхОрдеров.РаспоряженияНаОтгрузку.Добавить(Выборка.Распоряжение);	
					КонецЦикла;
					#Удаление
					СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров);
					#КонецУдаления 
					#Вставка
					//++РС Консалт: Минаков А.С. Задача 21223
					ОформленныеОрдера = СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров).ОформленныеОрдера;
					Если ИспользоватьАдресноеХранение И СоздаватьОтбор И ОформленныеОрдера.Количество() Тогда
						ПодготовитьНоменклатуруДляЗаданийСервер(ОформленныеОрдера.ВыгрузитьКолонку("РасходныйОрдер"))	
					КонецЕсли;
					//++РС Консалт: Минаков А.С. Задача 21223
					#КонецВставки
				КонецЦикла;
				
				Если ОтображениеДеталейОтгрузка Тогда
					Получатели.Очистить();
					Прервать;
				КонецЕсли;
			Иначе
				#Удаление
				МассивРаспоряжений = Получатели.Получить(СтрТабл.Получатель);
				Если МассивРаспоряжений = Неопределено Тогда
					МассивРаспоряжений = Новый Массив;
					Получатели.Вставить(СтрТабл.Получатель, МассивРаспоряжений);
				КонецЕсли;
				МассивРаспоряжений.Добавить(СтрТабл.Распоряжение);
				#КонецУдаления 
				#Вставка
				//++ РС Консалт: Минаков А.С. Задача 20226
				РСК_Получатели = РСК_ЗаданияНаПеревозку.Получить(СтрТабл.РС_ЗаданиеНаПеревозку);
				Если РСК_Получатели = Неопределено Тогда 
					РСК_Получатели = Новый Соответствие;
					РСК_Получатели.Вставить(СтрТабл.Получатель, Новый Массив);
					РСК_ЗаданияНаПеревозку.Вставить(СтрТабл.РС_ЗаданиеНаПеревозку, РСК_Получатели); 
				КонецЕсли;
				МассивРаспоряжений = РСК_Получатели.Получить(СтрТабл.Получатель);
				Если МассивРаспоряжений = Неопределено Тогда
					МассивРаспоряжений = Новый Массив;
					РСК_Получатели.Вставить(СтрТабл.Получатель, МассивРаспоряжений);
				КонецЕсли;
				МассивРаспоряжений.Добавить(СтрТабл.Распоряжение);
				//++ РС Консалт: Минаков А.С. Задача 20226
				#КонецВставки
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;

	Если Получатели.Количество() > 0 Тогда

		Если ОтображениеДеталейОтгрузка Тогда
			СтруктураПараметровСозданияРасходныхОрдеров.ЗаданиеНаПеревозку = ТекущееЗаданиеНаПеревозкуОтгрузка;
		Иначе
			СтруктураПараметровСозданияРасходныхОрдеров.ЗаданиеНаПеревозку = Неопределено;
		КонецЕсли;

		Для Каждого Получатель Из Получатели Цикл
			СтруктураПараметровСозданияРасходныхОрдеров.Получатель = Получатель.Ключ;
			СтруктураПараметровСозданияРасходныхОрдеров.РаспоряженияНаОтгрузку = Получатель.Значение;		
			#Удаление
			СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров);
			#КонецУдаления
			#Вставка
			//++РС Консалт: Минаков А.С. Задача 21223
			ОформленныеОрдера = СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров).ОформленныеОрдера;
			Если ИспользоватьАдресноеХранение И СоздаватьОтбор И ОформленныеОрдера.Количество() Тогда
				ПодготовитьНоменклатуруДляЗаданийСервер(ОформленныеОрдера.ВыгрузитьКолонку("РасходныйОрдер"))	
			КонецЕсли;	
			//++РС Консалт: Минаков А.С. Задача 21223
			#КонецВставки
		КонецЦикла;	
	КонецЕсли;
	#Вставка
	//++ РС Консалт: Минаков А.С. Задача 20226
	Если РСК_ЗаданияНаПеревозку.Количество() Тогда
		Для Каждого Задание Из РСК_ЗаданияНаПеревозку Цикл
			СтруктураПараметровСозданияРасходныхОрдеров.ЗаданиеНаПеревозку = Задание.Ключ;
			Для Каждого Получатель Из Задание.Значение Цикл
				СтруктураПараметровСозданияРасходныхОрдеров.Получатель = Получатель.Ключ;
				СтруктураПараметровСозданияРасходныхОрдеров.РаспоряженияНаОтгрузку = Получатель.Значение;		
				ОформленныеОрдера = СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров).ОформленныеОрдера;
				Если ИспользоватьАдресноеХранение И СоздаватьОтбор И ОформленныеОрдера.Количество() Тогда
					ПодготовитьНоменклатуруДляЗаданийСервер(ОформленныеОрдера.ВыгрузитьКолонку("РасходныйОрдер"))	
				КонецЕсли	
			КонецЦикла
		КонецЦикла	
	КонецЕсли;
	//++ РС Консалт: Минаков А.С. Задача 20226
	#КонецВставки

	УстановитьОтборыВОсновныхСписках();

	Если ФильтрОрдеров = "ПоТекущемуРаспоряжению" Тогда
		Если ТипЗнч(ТекущееРаспоряжениеНаОтгрузку) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Ссылка", Неопределено,,,Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "ЗаданиеНаПеревозку", ТекущееРаспоряжениеНаОтгрузку,,,Истина);
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
			|ГДЕ
			|	(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
			|			ИЛИ РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.ЗаданиеНаПеревозку = &Распоряжение)";
			Запрос.УстановитьПараметр("Распоряжение", ТекущееРаспоряжениеНаОтгрузку);
			РасходныеОрдера = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Ссылка", РасходныеОрдера, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "ЗаданиеНаПеревозку", Неопределено,,,Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
&Перед("СоздатьОрдера")
Процедура РСК_СоздатьОрдера(Команда) 

	//++РС Консалт: Минаков А.С. Задача 21223
	СоздаватьОтбор = Ложь
	//++РС Консалт: Минаков А.С. Задача 21223
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_СоздатьОрдераЗаданияНаОтборВместо(Команда)
	
	//++РС Консалт: Минаков А.С. Задача 21223
	ОчиститьСообщения();
	Отказ = Ложь;
	СоздаватьОтбор = Истина;
	
	ПроверитьСкладПомещение(Отказ);
		
	СоздатьОрдераФрагмент(Отказ);
	//++РС Консалт: Минаков А.С. Задача 21223
	
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ПодготовитьНоменклатуруДляЗаданийСервер")
Процедура РСК_ПодготовитьНоменклатуруДляЗаданийСервер(Знач МассивРаспоряжений, Переупаковка, ПоРаспоряжениямТребуетсяПодпитка)

	СтруктураПараметров = СкладыСервер.СтруктураПараметровСозданияЗаданийНаОтборПодпитку();
	#Вставка
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	СтруктураПараметров.Вставить("ВыгрузитьНаТСД", Истина);
	//++РС Консалт: Минаков А.С. ЗагрузкаТСД
	#КонецВставки
	СтруктураПараметров.Склад = Склад;
	СтруктураПараметров.Помещение = Помещение;
	СтруктураПараметров.НастройкаФормированияПоРабочимУчасткам = НастройкаФормированияПоРабочимУчасткам;
	СтруктураПараметров.ОграничиватьПоВесу = ОграничиватьПоВесу;
	СтруктураПараметров.ОграничиватьПоОбъему = ОграничиватьПоОбъему;
	СтруктураПараметров.ОграничениеПоВесу = ОграничениеПоВесу;
	СтруктураПараметров.ОграничениеПоОбъему = ОграничениеПоОбъему;
	СтруктураПараметров.РабочийУчасток = РабочийУчасток;
	СтруктураПараметров.Исполнитель = Исполнитель;
	СтруктураПараметров.ПоВсемРаспоряжениям = ПоВсемРаспоряжениям = 0;
	СтруктураПараметров.ПоРаспоряжениямТребуетсяПодпитка = ПоРаспоряжениямТребуетсяПодпитка; // используется только при создании заданий на переупаковку.
	СтруктураПараметров.ДействиеПриНехваткеУпаковок = ЗаданияНаПереупаковку; // используется только при создании заданий на отбор
	// 0 - создать только задания на отбор
	// 1 - создать задания на отбор и переупаковку
	// 2 - создать только задания на переупаковку.
	Если НазначитьИсполнителя Тогда
		СтруктураПараметров.Исполнитель = Исполнитель;
	КонецЕсли;
	Если ПоВсемРаспоряжениям <> 0 Тогда
		СтруктураПараметров.МассивРаспоряжений = МассивРаспоряжений;
	КонецЕсли;

	Если Переупаковка Тогда
		СкладыСервер.СоздатьЗаданияНаПереупаковку(СтруктураПараметров);
	Иначе
		СкладыСервер.СоздатьЗаданияНаОтбор(СтруктураПараметров);
	КонецЕсли;
	УстановитьОтборыВОсновныхСписках();
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура РСК_ПечатьКомплектаДокументовВместо(Команда)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	СписокРеализаций = Новый Массив;
	СписокПеремещений = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.РаспоряженияНаОтгрузку.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.РаспоряженияНаОтгрузку.ДанныеСтроки(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(ДанныеСтроки.Накладная) Тогда
			Если ТипЗнч(ДанныеСтроки.Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				СписокРеализаций.Добавить(ДанныеСтроки.Накладная)
			ИначеЕсли ТипЗнч(ДанныеСтроки.Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				СписокПеремещений.Добавить(ДанныеСтроки.Накладная)	
			КонецЕсли
		КонецЕсли
	КонецЦикла;
	
	Если СписокРеализаций.Количество() Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.РеализацияТоваровУслуг",
		"КомплектДокументов",
		СписокРеализаций,
		ЭтаФорма,
		Новый Структура(
		"ПереопределитьПользовательскиеНастройкиКоличества,АдресКомплектаПечатныхФорм,ФиксированныйКомплект",
		Истина, ПоместитьКомплектПечатныхФормВоВременноеХранилищеСервер("РеализацияТоваровУслуг"), Истина))	
	КонецЕсли;
	
	Если СписокПеремещений.Количество() Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ПеремещениеТоваров",
		"КомплектДокументов",
		СписокПеремещений,
		ЭтаФорма,
		Новый Структура(
		"ПереопределитьПользовательскиеНастройкиКоличества,АдресКомплектаПечатныхФорм,ФиксированныйКомплект",
		Истина, ПоместитьКомплектПечатныхФормВоВременноеХранилищеСервер("ПеремещениеТоваров"), Истина))	
	КонецЕсли
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

&НаСервере
Функция ПоместитьКомплектПечатныхФормВоВременноеХранилищеСервер(Отбор)
	
	//++ РС Консалт: Минаков А.С. Задача 20226	
	Возврат ПоместитьВоВременноеХранилище(КомплектПечатныхФорм.Выгрузить(КомплектПечатныхФорм.НайтиСтроки(Новый Структура("ВидДокумента", Отбор))))
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецФункции

&НаКлиенте
&ИзменениеИКонтроль("СоздатьОрдераФрагмент")
Процедура РСК_СоздатьОрдераФрагмент(Знач Отказ)
	#Вставка
	//++ РС Консалт: Минаков А.С. Задача 20226
	Если Не Отказ Тогда
		
		ЗагрузитьНастройки();
		
		СоздатьОрдераЗавершение(КодВозвратаДиалога.ОК, Неопределено)
		
	КонецЕсли;
	//++ РС Консалт: Минаков А.С. Задача 20226
	#КонецВставки
	#Удаление
	
	Перем ФормаПараметры;
	
	Если Не Отказ Тогда
		
		Если ИспользоватьАдресноеХранение Тогда
			НазначитьЗонуОтгрузки = Истина;
			
			ФормаПараметры = Новый Структура;
			ФормаПараметры.Вставить("Операция", "ФормированиеОрдеровАдресныйСклад");
			ФормаПараметры.Вставить("Склад", Склад);
			ФормаПараметры.Вставить("Помещение", Помещение);
			ФормаПараметры.Вставить("ИспользоватьСкладскиеПомещения", ИспользоватьСкладскиеПомещения);
		Иначе
			ФормаПараметры = Новый Структура;
			ФормаПараметры.Вставить("Операция", "ФормированиеОрдеров");
			ФормаПараметры.Вставить("Склад", Склад);
			ФормаПараметры.Вставить("Помещение", Помещение);
			ФормаПараметры.Вставить("ИспользоватьСкладскиеПомещения", ИспользоватьСкладскиеПомещения);
			
			НазначитьЗонуОтгрузки = Ложь;
		КонецЕсли;
		
		ОткрытьФорму("Обработка.УправлениеОтгрузкой.Форма.ФормаНастроек",ФормаПараметры,ЭтаФорма,,,, Новый ОписаниеОповещения("СоздатьОрдераЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	#КонецУдаления 	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	НастройкаФормированияПоПомещениям = 0;
	ПоОдномуПомещению = Ложь;
	ПоВсемРаспоряжениям = 1; 
	
	Если ИспользоватьАдресноеХранение Тогда
		НазначитьЗонуОтгрузки = Истина
	Иначе
		НазначитьЗонуОтгрузки = Ложь
	КонецЕсли;
	
	ИдентификаторСкладаПомещения = Строка(Склад.УникальныйИдентификатор()) +  Строка(Помещение.УникальныйИдентификатор()) + Строка(Помещение.УникальныйИдентификатор());
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаУправлениеОтгрузкойФормаНастроекНастройкиФормы" + ИдентификаторСкладаПомещения, "");
	Если Настройки <> Неопределено Тогда
		Если Настройки.Свойство("ЗонаОтгрузки") Тогда	
			ЗонаОтгрузки = Настройки.ЗонаОтгрузки;		
		КонецЕсли;
		Если Настройки.Свойство("НазначитьЗонуОтгрузки") Тогда	
			НазначитьЗонуОтгрузки = Настройки.НазначитьЗонуОтгрузки;		
		КонецЕсли;
		Если Настройки.Свойство("ПоОдномуПомещению") Тогда	
			ПоОдномуПомещению = Настройки.ПоОдномуПомещению;		
		КонецЕсли;
		Если Настройки.Свойство("НастройкаФормированияПоПомещениям") Тогда	
			НастройкаФормированияПоПомещениям = Настройки.НастройкаФормированияПоПомещениям;		
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ЗонаОтгрузки",ЗонаОтгрузки);
	ПараметрыЗакрытия.Вставить("НазначитьЗонуОтгрузки", НазначитьЗонуОтгрузки);   
	ПараметрыЗакрытия.Вставить("ПоВсемРаспоряжениям", ПоВсемРаспоряжениям);	
	ПараметрыЗакрытия.Вставить("ПоОдномуПомещению", ПоОдномуПомещению);
	ПараметрыЗакрытия.Вставить("НастройкаФормированияПоПомещениям", НастройкаФормированияПоПомещениям);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ФормаУправлениеОтгрузкойФормаНастроекНастройкиФормы" + ИдентификаторСкладаПомещения,
		 "",
		ПараметрыЗакрытия)
	//++ РС Консалт: Минаков А.С. Задача 20226	
		
КонецПроцедуры	

&НаКлиенте
&После("РаспоряженияНаОтгрузкуПриАктивизацииСтроки")
Процедура РСК_РаспоряженияНаОтгрузкуПриАктивизацииСтроки(Элемент)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	ТекущиеДанные = Элементы.РаспоряженияНаОтгрузку.ТекущиеДанные;
	Элементы.СоздатьРеализацию.Доступность =
	Не ТекущиеДанные = Неопределено
	И (ТипЗнч(ТекущиеДанные.Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента") Или ТипЗнч(ТекущиеДанные.Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение"))
	И ТекущиеДанные.РСК_СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз") 
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_СоздатьРеализациюВместо(Команда)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	РСК_Распоряжение = Элементы.РаспоряженияНаОтгрузку.ТекущиеДанные.Распоряжение; 
	
	ПараметрыОбновленияОрдера = РСК_ВызовСервера.ПараметрыОбновленияОрдера();
	ПараметрыОбновленияОрдера.Распоряжение = РСК_Распоряжение;
	ПараметрыОбновленияОрдера.ДатаОтгрузки = ДатаОтгрузки;
	ПараметрыОбновленияОрдера.Склад = Склад;
	ПараметрыОбновленияОрдера.НовыйСтатус = "КОтгрузке";
	ПараметрыОбновленияОрдера.ИсключаемыеСтатусы = "КОтгрузке,Отгружен"; 
	
	Отказ = Ложь;	
	РСК_ВызовСервера.ВыполнитьПроверкуИзменениеОрдера(ПараметрыОбновленияОрдера, Отказ);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;	
	
	СоздатьНакладнуюНаСервере(РСК_Распоряжение, Склад, ДатаОтгрузки);
	ОбновитьСписки(Элементы.ОбновитьСпискиОтбора)		
	//++ РС Консалт: Минаков А.С. Задача 20226
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНакладнуюНаСервере(Распоряжение, Склад, ДатаОтгрузки)
	
	//++ РС Консалт: Минаков А.С. Задача 20226
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда		
		ПолеОшибки = "РаспоряженияНаОтгрузку";
		СписокОшибок = Неопределено;
		ГруппировкиРаспоряжений = Новый Массив;
		ИмяОформляемогоДокумента = "ПеремещениеТоваров";
		КлючевыеПоляШапки = "ХозяйственнаяОперация, Организация, ОрганизацияПолучатель, СкладОтправитель, СкладПолучатель, Подразделение, ВариантПриемкиТоваров";
		
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "ХозяйственнаяОперация, СкладПолучатель");
		
		МассивДоп = Новый Массив(0);
		МассивДоп[0] = Распоряжение;
		
		МассивЗаказов = Новый Массив(0);
		МассивЗаказов[0] = МассивДоп;
		
		ПоляЗаполнения = Новый Структура("ЗаполнятьПоОрдеру, Отправитель, Получатель, Склад, ХозяйственнаяОперация, Дата",
		Истина, Склад, РеквизитыЗаказа.СкладПолучатель, Склад, РеквизитыЗаказа.ХозяйственнаяОперация, ДатаОтгрузки); 
		
		ГруппировкиРаспоряжений.Добавить(Новый Структура("ИмяОформляемогоДокумента, КлючевыеПоляШапки, МассивЗаказов, Обработчик, ПоляЗаполнения",
		ИмяОформляемогоДокумента, КлючевыеПоляШапки, МассивЗаказов,, ПоляЗаполнения)); 
		
		НакладныеСервер.СформироватьДокументыПоРаспоряжениям(ГруппировкиРаспоряжений, СписокОшибок, ПолеОшибки)	
	КонецЕсли;
	
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ПараметрыФормирования = ПродажиСервер.НовыеПараметрыОформленияКомплектаДокументов();
		ПараметрыФормирования.СоздаватьДокументПродажи = Истина;
		ПараметрыФормирования.СохраненыНастройкиОформления = Истина;
		ПараметрыФормирования.Вставить("ПоОрдерам", Истина);
		ПараметрыФормирования.Вставить("ДатаДокумента", ДатаОтгрузки);
		
		Ключ = Новый Структура;
		Ключ.Вставить("ДокументОснование", Распоряжение);
		Ключ.Вставить("Склад", Склад);
		
		СоответствиеРаспоряжений = Новый Соответствие;
		СоответствиеРаспоряжений.Вставить(Ключ, Новый Структура("СостояниеНакладной, СостояниеОрдера", 1, 3));
		
		ПродажиСервер.ОформитьНакладнуюНаСервере(СоответствиеРаспоряжений, ПараметрыФормирования);
	КонецЕсли
	//++ РС Консалт: Минаков А.С. Задача 20226
		
КонецПроцедуры



