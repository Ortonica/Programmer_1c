//&НаСервере
//Функция ПолучитьТЗ()
//	ИсходноеИмяТЗ = "МояТЗ";
//    МаксНомерТЗ = 0;
//    МассивРеквизитов = ПолучитьРеквизиты();        
//    Для каждого Реквизит Из МассивРеквизитов Цикл
//        Если Лев(Реквизит.Имя, СтрДлина(ИсходноеИмяТЗ)) = ИсходноеИмяТЗ Тогда
//            СтрНомер = Прав(Реквизит.Имя, СтрДлина(Реквизит.Имя) - СтрДлина(ИсходноеИмяТЗ));                
//            Номер = Число(СтрНомер);
//            Если Номер > МаксНомерТЗ Тогда
//                МаксНомерТЗ = Номер;
//            КонецЕсли; 
//        КонецЕсли;             
//	КонецЦикла;
//	ПредИмяТЗ = ИсходноеИмяТЗ + Строка(МаксНомерТЗ);
//	Если НЕ ЭтаФорма.Элементы.Найти(ПредИмяТЗ) = Неопределено Тогда
//		ТАБ = ЭтаФорма[ПредИмяТЗ];
//		ТЗ_ = ДанныеФормыВЗначение(ТАБ,Тип("ТаблицаЗначений"));
//		Возврат ТЗ_;
//	КонецЕсли;
//	Возврат Неопределено;
//КонецФункции

//&НаСервере
//Процедура УдалитьДопТЗ()
//	ИсходноеИмяТЗ = "МояТЗ";
//    МаксНомерТЗ = 0;
//    МассивРеквизитов = ПолучитьРеквизиты();        
//    Для каждого Реквизит Из МассивРеквизитов Цикл
//        Если Лев(Реквизит.Имя, СтрДлина(ИсходноеИмяТЗ)) = ИсходноеИмяТЗ Тогда
//            СтрНомер = Прав(Реквизит.Имя, СтрДлина(Реквизит.Имя) - СтрДлина(ИсходноеИмяТЗ));                
//            Номер = Число(СтрНомер);
//            Если Номер > МаксНомерТЗ Тогда
//                МаксНомерТЗ = Номер;
//            КонецЕсли; 
//        КонецЕсли;             
//	КонецЦикла;
//	ПредИмяТЗ = ИсходноеИмяТЗ + Строка(МаксНомерТЗ);
//    Если НЕ ЭтаФорма.Элементы.Найти(ПредИмяТЗ) = Неопределено Тогда
//        // Сначала удалим реквизит "Таблица значений" из УФ
//        МассивИменУдаляемыхРеквизитов = Новый Массив;
//        МассивИменУдаляемыхРеквизитов.Добавить(ПредИмяТЗ);
//        ЭтаФорма.ИзменитьРеквизиты(,МассивИменУдаляемыхРеквизитов);
//        УдаляемыйЭлемент = ЭтаФорма.Элементы.Найти(ПредИмяТЗ);
//        Если НЕ УдаляемыйЭлемент = Неопределено Тогда
//            // Теперь удалим элемент формы, который служил для визуального отображения
//                        // удалённого реквизита УФ "Таблица значений"
//            ЭтаФорма.Элементы.Удалить(УдаляемыйЭлемент);
//        КонецЕсли;
//    КонецЕсли;
//КонецПроцедуры

&НаСервере
Процедура ВывестиТЗНаФорму(ТЗ)
    ИсходноеИмяТЗ = "МояТЗ";
    МаксНомерТЗ = 0;
    МассивРеквизитов = ПолучитьРеквизиты();        
    Для каждого Реквизит Из МассивРеквизитов Цикл
        Если Лев(Реквизит.Имя, СтрДлина(ИсходноеИмяТЗ)) = ИсходноеИмяТЗ Тогда
            СтрНомер = Прав(Реквизит.Имя, СтрДлина(Реквизит.Имя) - СтрДлина(ИсходноеИмяТЗ));                
            Номер = Число(СтрНомер);
            Если Номер > МаксНомерТЗ Тогда
                МаксНомерТЗ = Номер;
            КонецЕсли; 
        КонецЕсли;             
	КонецЦикла;
	ПредИмяТЗ = ИсходноеИмяТЗ + Строка(МаксНомерТЗ);
    // Если удаляемая таблица значений действительно присутствует на данной управляемой форме
    Если НЕ ЭтаФорма.Элементы.Найти(ПредИмяТЗ) = Неопределено Тогда
        // Сначала удалим реквизит "Таблица значений" из УФ
        МассивИменУдаляемыхРеквизитов = Новый Массив;
        МассивИменУдаляемыхРеквизитов.Добавить(ПредИмяТЗ);
        ЭтаФорма.ИзменитьРеквизиты(,МассивИменУдаляемыхРеквизитов);
        УдаляемыйЭлемент = ЭтаФорма.Элементы.Найти(ПредИмяТЗ);
        Если НЕ УдаляемыйЭлемент = Неопределено Тогда
            // Теперь удалим элемент формы, который служил для визуального отображения
                        // удалённого реквизита УФ "Таблица значений"
            ЭтаФорма.Элементы.Удалить(УдаляемыйЭлемент);
        КонецЕсли;
    КонецЕсли;
	
    ИмяТЗ = ИсходноеИмяТЗ + Строка(МаксНомерТЗ+1);
    //Имеем исходную таблицу значений с именем "ТЗ"
    //Добавляем реквизит формы
    МассивРеквизитов = Новый Массив;
    МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяТЗ, Новый ОписаниеТипов("ТаблицаЗначений"), "", ИмяТЗ));
    Для Каждого Колонка Из ТЗ.Колонки Цикл
        МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТЗ, Колонка.Заголовок)); 
    КонецЦикла;
    ИзменитьРеквизиты(МассивРеквизитов);
    
    //Помещаем Элементы на форму 
    Таблица = Элементы.Добавить(ИмяТЗ, Тип("ТаблицаФормы")); 
    Таблица.ПутьКДанным = ИмяТЗ; 
    Таблица.Отображение = ОтображениеТаблицы.Список;        
    Для Каждого Колонка Из ТЗ.Колонки Цикл
        НовыйЭлемент = Элементы.Добавить(ИмяТЗ + "_" + Колонка.Имя, Тип("ПолеФормы"), Таблица);
		Если Колонка.Имя = "Использовать" Тогда
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя; 
		Иначе
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;
		Если Колонка.Имя = "Код" Тогда
			НовыйЭлемент.Маска = "999-999-999 99";
		КонецЕсли;
		
        НовыйЭлемент.ПутьКДанным = ИмяТЗ + "." + Колонка.Имя;
	КонецЦикла;
	
    //переносим таблицу значений на форму 
    ЗначениеВРеквизитФормы(ТЗ,ИмяТЗ);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапроситьПохожие(СНИЛС)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Партнеры.Наименование КАК Наименование,
	               |	Партнеры.Ссылка КАК Ссылка,
	               |	Партнеры.ДатаРождения КАК ДатаРождения
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |ГДЕ
	               |	Партнеры.РСК_СНИЛС ПОДОБНО &СНИЛС
	               |	И Партнеры.РСК_ЭтоПолучательТСР";
	Запрос.УстановитьПараметр("СНИЛС", "%" + СНИЛС + "%");
	тз = Запрос.Выполнить().Выгрузить();
	тз.Колонки.Добавить("Фамилия", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	тз.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	тз.Колонки.Добавить("Отчество", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Для Каждого Стр Из тз Цикл
		НаименованиеСтроками = СтрЗаменить(Стр.Наименование," ",Символы.ПС);
		Стр.Фамилия 	= СтрПолучитьСтроку(НаименованиеСтроками, 1);
		Стр.Имя 		= СтрПолучитьСтроку(НаименованиеСтроками, 2);
		Стр.Отчество 	= СтрПолучитьСтроку(НаименованиеСтроками, 3);
	КонецЦикла;
		
	Возврат тз;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверимРеквизитПолучателя(Поля)
	//функция проверки похожих записей справочника получателейТСР по полям поиска
	//попробуем найти значения, похожие на переданные
	//посколько по коду (снилсу не нашли) уменьшаем по одному знаку до приемлемого, например до -3 знаков
	СНИЛС 			= Поля.СНИЛС;
	Фамилия 		= Поля.Фамилия;
	Имя 			= Поля.Имя;
	Отчество 		= Поля.Отчество;
	ДатаРождения 	= Поля.ДатаРождения;
	МассивПохожих = Новый Массив;
	Для н=1 по 3 Цикл
		КвоСимволов = СтрДлина(СНИЛС) - н;
		КодДляПоиска = Лев(СНИЛС,КвоСимволов);
		НайтиПохожие = ЗапроситьПохожие(КодДляПоиска);
		Если НЕ НайтиПохожие.Количество()=0 Тогда
			// проверка остальных реквизитов
			Для каждого стр из НайтиПохожие Цикл
				Если стр.Фамилия = Фамилия ИЛИ стр.Имя = Имя ИЛИ стр.Отчество = Отчество ИЛИ стр.ДатаРождения = ДатаРождения Тогда
					МассивПохожих.Добавить(стр.Ссылка);
				КонецЕсли;
			КонецЦикла;
			Если НЕ МассивПохожих.Количество()=0 Тогда
				Возврат МассивПохожих;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивПохожих;
КонецФункции

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Excel'; en = 'Excel'") + "(*.xlsx)|*.xls;*.xlsx";
	ДиалогОткрытияФайла.Фильтр 				= Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.Заголовок 			= "Выберите файл с данными";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.ИмяФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
	Иначе
		Предупреждение(НСтр("ru = 'Файл(ы) не выбран!'; en = 'File(s) not selected!'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВернутьДату(стрДата)
	//11.05.2016 15:27
	Результат = СтрДата;
	Попытка
		//Зн = Дата(Результат);
		Если СтрДлина(стрДата) = 10 Тогда
			Результат = Дата(
								Число(Сред(стрДата,7,4)),
								Число(Сред(стрДата,4,2)),
								Число(Сред(стрДата,1,2)),
								0,
								0,
								0
			);
		КонецЕсли;
		Возврат Результат;
	Исключение
		Возврат стрДата;
	КонецПопытки;
КонецФункции

&НаСервере
Процедура ПрочитатьФайлНаСервере(ДанныеФайла0)
	Объект.ДанныеФайла.Очистить();
	//УдалитьДопТЗ(); //точно надо? //непись
	
	Если НЕ ЗначениеЗаполнено(Объект.СхемаИмпорта) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не указана схема иморта",,"СхемаИмпорта","Объект");
		Возврат;
	КонецЕсли;
	
	Если Прав(Объект.ИмяФайла, 4) = "xlsx" Тогда
		Расширение = ".xlsx";
	Иначе
		Расширение = ".xls";
	КонецЕсли; 
	ИмяВременногоФайла = КаталогВременныхФайлов()+Прав(Строка(Новый УникальныйИдентификатор),8)+Расширение;
	ДанныеФайла0.Записать(ИмяВременногоФайла);
	ТабДокумент	= Новый ТабличныйДокумент;
	ТабДокумент.Прочитать(ИмяВременногоФайла);
	ВсегоСтрок = ТабДокумент.ВысотаТаблицы;
	Если ЗначениеЗаполнено(Строк) Тогда
		ВсегоСтрок = Строк;
	ИначеЕсли ВсегоСтрок > 3000 И НЕ  ЗначениеЗаполнено(Строк) Тогда
		ОбщегоНазначения.СообщитьПользователю("Укажите количество строк в файле которые необходимо прочитать!",,"Строк");
		Возврат;			
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_СхемыИмпортаСхемаКолонок.Ссылка.СтрокаНачалаДанных КАК СтрокаНачалаДанных,
		|	РСК_СхемыИмпортаСхемаКолонок.КолонкаИмпорта КАК Реквизит,
		|	РСК_СхемыИмпортаСхемаКолонок.НомерКолонки КАК Колонка,
		|	РСК_КолонкиИмпорта.ПредопределённоеИмя КАК ПредопределённоеИмя,
		|	РСК_КолонкиИмпорта.Наименование КАК Наименование
		|ИЗ
		|	Справочник.РСК_СхемыИмпорта.СхемаКолонок КАК РСК_СхемыИмпортаСхемаКолонок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РСК_КолонкиИмпорта КАК РСК_КолонкиИмпорта
		|		ПО РСК_СхемыИмпортаСхемаКолонок.КолонкаИмпорта = РСК_КолонкиИмпорта.Ссылка
		|ГДЕ
		|	РСК_СхемыИмпортаСхемаКолонок.Ссылка = &СхемаИмпорта
		|	И РСК_СхемыИмпортаСхемаКолонок.Использовать";
	
	Запрос.УстановитьПараметр("СхемаИмпорта", Объект.СхемаИмпорта);
	тзСхема = Запрос.Выполнить().Выгрузить();
	Если тзСхема.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("В схеме не указаны колонки импорта",,"СхемаИмпорта","Объект");
		Возврат;
	КонецЕсли;
	Для НомерСтроки = тзСхема[0].СтрокаНачалаДанных По ВсегоСтрок Цикл
		НоваяСтрока	= Объект.ДанныеФайла.Добавить();
		Для каждого стрСхема из тзСхема Цикл
			Если стрСхема.ПредопределённоеИмя = "СНИЛС" Тогда
				КодСнилс = ТабДокумент.Область(НомерСтроки,стрСхема.Колонка,НомерСтроки,стрСхема.Колонка).Текст;
				НоваяСтрока.СНИЛС = РСК_РаботаСоСтроками.ПолучитьТолькоЦифры(КодСнилс);
				Если НЕ ПустаяСтрока(НоваяСтрока.СНИЛС) Тогда
					НоваяСтрока.Партнер = Справочники.Партнеры.НайтиПоРеквизиту("РСК_СНИЛС", НоваяСтрока.СНИЛС);
				КонецЕсли;
				Если ЗначениеЗаполнено(НоваяСтрока.Партнер)  Тогда 
					НоваяСтрока.НовыйПолучатель = Ложь;
					НоваяСтрока.СуществующийРайон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Партнер, "ЗонаДоставки");
				Иначе
					НоваяСтрока.НовыйПолучатель = Истина;
				КонецЕсли;
			ИначеЕсли стрСхема.ПредопределённоеИмя = "ФИОЗаявителя" Тогда
				ФИОЗаявителя = ТабДокумент.Область(НомерСтроки,стрСхема.Колонка,НомерСтроки,стрСхема.Колонка).Текст;
				ФИОЗаявителя = ТРег(ФИОЗаявителя);
				ФИОЗаявителя = УдалитьСимволыПереноса(ФИОЗаявителя);
				НоваяСтрока[стрСхема.ПредопределённоеИмя] = ФИОЗаявителя;
			Иначе
				Если ПустаяСтрока(стрСхема.ПредопределённоеИмя) Тогда
				    ИмяКолонки = СтрЗаменить(стрСхема.Наименование, " ", "");
					НоваяСтрока[ИмяКолонки] = ВернутьДату(ТабДокумент.Область(НомерСтроки,стрСхема.Колонка,НомерСтроки,стрСхема.Колонка).Текст);
				Иначе
					НоваяСтрока[стрСхема.ПредопределённоеИмя] = ВернутьДату(ТабДокумент.Область(НомерСтроки,стрСхема.Колонка,НомерСтроки,стрСхема.Колонка).Текст);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	УдалитьФайлы(КаталогВременныхФайлов(),ИмяВременногоФайла);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	ФайлСДанными = Новый Файл(Объект.ИмяФайла);
	Если НЕ ФайлСДанными.Существует() Тогда
		Сообщить("Указанного файла не существует!",СтатусСообщения.Важное);
		Возврат
	КонецЕсли;
	ДанныеФайла = Новый ДвоичныеДанные(Объект.ИмяФайла);
	Если Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.СтраницаЗагрузка Тогда
		ПрочитатьФайлНаСервере(ДанныеФайла);
		УдалитьПустыеСтроки();
		ПодобратьРайонПоКоду();
		ПодобратьРайонИзСуществующих();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Для Каждого СтрокаТЧ ИЗ Объект.ДанныеФайла Цикл
		СтрокаТЧ.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсе(Команда)
	
	Для Каждого СтрокаТЧ ИЗ Объект.ДанныеФайла Цикл
		СтрокаТЧ.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНеотмеченные(Команда)
	
	сзСтрокиДляУдаления = Новый СписокЗначений;
	Для Каждого СтрокаТЧ ИЗ Объект.ДанныеФайла Цикл
		Если СтрокаТЧ.Выбран Тогда Продолжить; КонецЕсли;
		сзСтрокиДляУдаления.Добавить(СтрокаТЧ);
	КонецЦикла;
	Для Каждого СтрокаСписка Из сзСтрокиДляУдаления Цикл
		Объект.ДанныеФайла.Удалить(СтрокаСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтмеченные(Команда)

	сзСтрокиДляУдаления = Новый СписокЗначений;
	Для Каждого СтрокаТЧ ИЗ Объект.ДанныеФайла Цикл
		Если НЕ СтрокаТЧ.Выбран Тогда Продолжить; КонецЕсли;
		сзСтрокиДляУдаления.Добавить(СтрокаТЧ);
	КонецЦикла;
	Для Каждого СтрокаСписка Из сзСтрокиДляУдаления Цикл
		Объект.ДанныеФайла.Удалить(СтрокаСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Контракт") Тогда Объект.Контракт = Параметры.Контракт; КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНаСервере()
	                   
	ПерезаписываемыеДанные = ПолучитьМассивПерезаписываемыхРеквизитов();
	
	//тзРез = РеквизитФормыВЗначение("Объект.ДанныеФайла");
	тзРез = Объект.ДанныеФайла.Выгрузить(Новый Структура("Выбран", Истина));
	тзВыгрузки = Документы.РСК_Разнарядка.СоздатьДокумент().Реестр.Выгрузить();
	                
	Если ЗагрузкаБезКонтракта Тогда
		РодительТерГруппы = Объект.Область;
		Если НЕ ЗначениеЗаполнено(РодительТерГруппы) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				"Не указана территориальная группа",,
				"Область",
				"Объект"
			);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		РодительТерГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контракт,"реа_ТерриториальнаяГруппа");
		Если НЕ ЗначениеЗаполнено(РодительТерГруппы) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				"Не указана территориальная группа в заказе клиента",
				Объект.Контракт,
				"реа_ТерриториальнаяГруппа"
			);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого стрРез из тзРез Цикл
		//Если НЕ стрРез.Выбран Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Район = Справочники.ЗоныДоставки.ПустаяСсылка();
		Если стрРез.СуществующийРайон = Справочники.ЗоныДоставки.ПустаяСсылка() И стрРез.Район <> "" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗоныДоставки.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ЗоныДоставки КАК ЗоныДоставки
				|ГДЕ
				|	ЗоныДоставки.Наименование = &Наименование
				|	И ЗоныДоставки.Родитель = &Родитель";
			
			Запрос.УстановитьПараметр("Наименование", стрРез.Район);
			Запрос.УстановитьПараметр("Родитель", РодительТерГруппы);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Район = Выборка.Ссылка;
			Иначе
				НовРайон = Справочники.ЗоныДоставки.СоздатьЭлемент();
				НовРайон.Родитель = РодительТерГруппы;
				НовРайон.Наименование = стрРез.Район;
				НовРайон.Записать();
				Район = НовРайон.Ссылка;			
			КонецЕсли; 
		ИначеЕсли стрРез.СуществующийРайон <> Справочники.ЗоныДоставки.ПустаяСсылка() Тогда
			Район = стрРез.СуществующийРайон;
		КонецЕсли;
		
		ДовЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		ЗаявительТСР = стрРез.Партнер;
		СНИЛС = стрРез.СНИЛС; //здесь уже только цифры, так как при чтении из файла строку уже обработали
		Если ЗагрузкаБезКонтракта Тогда
			ПартнёрФНС = Объект.КлиентЗаказа;
		Иначе
			ПартнёрФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контракт, "Партнер");
		КонецЕсли;
		
		Отказ = Ложь;
		МассивТелефоновЗаявителя = РСК_РаботаСоСтроками.ПолучитьМассивТелефонов(стрРез.ТелефонЗаявителя);
		НовыйЗаявитель = Ложь;
		Если НЕ ЗначениеЗаполнено(ЗаявительТСР) Тогда
			НовыйЗаявитель = Истина;
			оСпр = Справочники.Партнеры.СоздатьЭлемент();
			оСпр.Родитель = ПартнёрФНС;
			оСпр.БизнесРегион = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПартнёрФНС, "БизнесРегион");
			оСпр.Наименование = стрРез.ФИОЗаявителя;
			оСпр.УстановитьНовыйКод();
			оСпр.РСК_СНИЛС = СНИЛС;
			оСпр.ДатаРегистрации = ТекущаяДата();
			оСпр.Клиент = Истина;
			оСпр.НаименованиеПолное = стрРез.ФИОЗаявителя;
			оСпр.ОсновнойМенеджер = ПараметрыСеанса.ТекущийПользователь;
			оСпр.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
			оСпр.ЗонаДоставки = Район;
			оСпр.ДатаРождения = стрРез.ДатаРождения;
			оСпр.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
			оСпр.РСК_ЭтоПолучательТСР = Истина;
			оСпр.ГруппаДоступа = РегистрыСведений.реа_ПредопределенныеЗначения.Значение(
				"РС_ГруппаДоступаДляПолучателейТСР",
				Справочники.ГруппыДоступаПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("608cfbcd-5869-11ed-b5aa-3cecefa80401"))
			);
			Если ЗагрузкаБезКонтракта Тогда
				оСпр.Комментарий = стрРез.Комментарий + " "+ стрРез.ТСР;
			Иначе
				оСпр.Комментарий = стрРез.Комментарий;
			КонецЕсли;
			
			ПерезаписатьКонтакт(
				оСпр, 
				Перечисления.ТипыКонтактнойИнформации.Телефон,
				Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,
				МассивТелефоновЗаявителя
			);
			оСпр.ДополнительнаяИнформация = стрРез.ТелефонЗаявителя;
			ПерезаписатьКонтакт(
				оСпр, 
				Перечисления.ТипыКонтактнойИнформации.Адрес,
				Справочники.ВидыКонтактнойИнформации.АдресПартнера,
				стрРез.АдресПроживанияЗаявителя
			);
			ПерезаписатьКонтакт(
				оСпр, 
				Перечисления.ТипыКонтактнойИнформации.Адрес,
				"АдресРегистрации",
				стрРез.АдресРегистрацииЗаявителя
			);
			
			оСпр.РСК_ДокументУЛ = стрРез.ПаспортныеДанныеЗаявителя;
			
			оСпр.Записать();
			ЗаявительТСР = оСпр.Ссылка;
			
			СтрокиСТакимЖеПолучателем = тзРез.НайтиСтроки(Новый Структура("СНИЛС", стрРез.СНИЛС));
			Для Каждого СтрокаС Из СтрокиСТакимЖеПолучателем Цикл
				СтрокаС.Партнер = ЗаявительТСР;
			КонецЦикла;
			
		Иначе 
			//Заявитель найден, перезапишем данные
			Заявитель = ЗаявительТСР.ПолучитьОбъект();
			//КонтрагентЗаявителя = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ЗаявительТСР).ПолучитьОбъект();
			Если ПерезаписываемыеДанные.Найти("Район") <> Неопределено Тогда
				Заявитель.ЗонаДоставки = Район;
			КонецЕсли;
			Заявитель.РСК_СНИЛС	 				= СНИЛС;
			Если ПерезаписываемыеДанные.Найти("ФИОЗаявителя") <> Неопределено Тогда
				Заявитель.Наименование 			= ?(стрРез.ФИОЗаявителя              = "",Заявитель.Наименование,стрРез.ФИОЗаявителя);
			КонецЕсли;
			Если ПерезаписываемыеДанные.Найти("АдресРегистрацииЗаявителя") <> Неопределено Тогда
				ПерезаписатьКонтакт(
					Заявитель, 
					Перечисления.ТипыКонтактнойИнформации.Адрес,
					"АдресРегистрации",
					стрРез.АдресРегистрацииЗаявителя
				);
			КонецЕсли;
			Если ПерезаписываемыеДанные.Найти("АдресПроживанияЗаявителя") <> Неопределено Тогда
				ПерезаписатьКонтакт(
					Заявитель, 
					Перечисления.ТипыКонтактнойИнформации.Адрес,
					Справочники.ВидыКонтактнойИнформации.АдресПартнера,
					стрРез.АдресПроживанияЗаявителя
				);
			КонецЕсли;
			Если ПерезаписываемыеДанные.Найти("ТелефонЗаявителя") <> Неопределено Тогда
				ПерезаписатьКонтакт(
					Заявитель, 
					Перечисления.ТипыКонтактнойИнформации.Телефон,
					Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,
					МассивТелефоновЗаявителя
				);
				Заявитель.ДополнительнаяИнформация = стрРез.ТелефонЗаявителя;
				ПерезаписатьТелефоныДляСМС(ЗаявительТСР, МассивТелефоновЗаявителя);
			КонецЕсли;
			Если ПерезаписываемыеДанные.Найти("ПаспортныеДанныеЗаявителя") <> Неопределено Тогда
				Если НЕ ПустаяСтрока(стрРез.ПаспортныеДанныеЗаявителя) Тогда
					Заявитель.РСК_ДокументУЛ = стрРез.ПаспортныеДанныеЗаявителя;
				КонецЕсли;
			КонецЕсли;
			Если ЗагрузкаБезКонтракта Тогда
				Заявитель.Комментарий = Заявитель.Комментарий +" "+ стрРез.Комментарий + " "+ стрРез.ТСР;
			ИначеЕсли ПерезаписываемыеДанные.Найти("Комментарий") <> Неопределено Тогда
				Заявитель.Комментарий = ?(стрРез.Комментарий = "",Заявитель.Комментарий, стрРез.Комментарий);
			КонецЕсли;
			Если ПерезаписываемыеДанные.Найти("ДатаРождения") <> Неопределено Тогда
				Заявитель.ДатаРождения          = ?(стрРез.ДатаРождения = Дата(1,1,1)    ,Заявитель.ДатаРождения, стрРез.ДатаРождения);
			КонецЕсли;
			
			Попытка 
				Заявитель.Записать();
				//КонтрагентЗаявителя.Записать();
			Исключение
				Отказ = Истина;	
				Сообщить("Проверьте заявителя "+Заявитель);
			КонецПопытки;
			Если НЕ Отказ И ПерезаписываемыеДанные.Найти("НомерФилиала") <> Неопределено И НЕ ПустаяСтрока(стрРез.НомерФилиала) Тогда
				УправлениеСвойствами.УстановитьЗначениеСвойства(
					Заявитель.Ссылка,
					РСК_ПовтИсп.Получить_ПланыВидовХарактеристик_ДопСведение_Номер_филиала(),
					стрРез.НомерФилиала
				);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НовыйЗаявитель Тогда
			ПерезаписатьТелефоныДляСМС(ЗаявительТСР, МассивТелефоновЗаявителя);
		КонецЕсли;
		
		Если ПустаяСтрока(стрРез.ФИОДовЛица) Тогда
			ДовЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();				
		Иначе
			// есть доверенное лицо
			ФИОДовЛица = стрРез.ФИОДовЛица;
			ДовЛицо = Справочники.КонтактныеЛицаПартнеров.НайтиПоНаименованию(ФИОДовЛица, Истина,, ЗаявительТСР);
			Если ЗначениеЗаполнено(ДовЛицо) Тогда
				оДовЛицо = ДовЛицо.ПолучитьОбъект();
				//Если ПерезаписываемыеДанные.Найти("АдресДовЛица") <> Неопределено Тогда
				//	ПерезаписатьКонтакт(
				//		оДовЛицо,
				//		Перечисления.ТипыКонтактнойИнформации.Адрес,
				//		РСК_ПовтИсп.Получить_Справочники_ВидыКонтактнойИнформации_АдресКонтактногоЛица(),
				//		стрРез.АдресДовЛица
				//	);
				//КонецЕсли;
				Если ПерезаписываемыеДанные.Найти("ТелефонДовЛица") <> Неопределено Тогда
					ПерезаписатьКонтакт(
						оДовЛицо,
						Перечисления.ТипыКонтактнойИнформации.Телефон,
						Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,
						стрРез.ТелефонДовЛица
					);
				КонецЕсли;
				Если ПерезаписываемыеДанные.Найти("ПаспортныеДанныеДовЛица") <> Неопределено Тогда
					оДовЛицо.ДополнительнаяИнформация = СтрРез.ПаспортныеДанныеДовЛица;
				КонецЕсли;
			Иначе
				оДовЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
				оДовЛицо.Владелец = ЗаявительТСР;
				оДовЛицо.Наименование = ФИОДовЛица;
				оДовЛицо.ДатаРегистрацииСвязи = ТекущаяДата();
				оДовЛицо.Автор = ПараметрыСеанса.ТекущийПользователь;
				//Если СтрРез.Свойство("АдресДовЛица") Тогда //Свойством проверять нельзя! Это не структура, а строка ТЗ
				//	ПерезаписатьКонтакт(
				//		оДовЛицо,
				//		Перечисления.ТипыКонтактнойИнформации.Адрес,
				//		РСК_ПовтИсп.Получить_Справочники_ВидыКонтактнойИнформации_АдресКонтактногоЛица(),
				//		стрРез.АдресДовЛица
				//	);
				//КонецЕсли;
				Если НЕ ПустаяСтрока(СтрРез.ТелефонДовЛица) Тогда
					ПерезаписатьКонтакт(
						оДовЛицо,
						Перечисления.ТипыКонтактнойИнформации.Телефон,
						Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,
						стрРез.ТелефонДовЛица
					);
				КонецЕсли;
				оДовЛицо.ДополнительнаяИнформация = СтрРез.ПаспортныеДанныеДовЛица;
			КонецЕсли;
			оДовЛицо.Записать();
			ДовЛицо = оДовЛицо.Ссылка;
		КонецЕсли;
		
		НовСтрВыгрузки = тзВыгрузки.Добавить();
		НовСтрВыгрузки.ТСР 					= стрРез.ТСР_ПоКонтракту;
		НовСтрВыгрузки.Цена 				= стрРез.Цена;
		НовСтрВыгрузки.Заявитель 			= ЗаявительТСР;
		НовСтрВыгрузки.НомерНаправления 	= стрРез.НомерНаправления;
		НовСтрВыгрузки.ДатаНаправления	 	= стрРез.ДатаНаправления;
		НовСтрВыгрузки.Количество		 	= стрРез.Количество;
		НовСтрВыгрузки.ДовЛицо 				= ДовЛицо;
		НовСтрВыгрузки.Район			 	= Район;
		НовСтрВыгрузки.НомерЗаявки		 	= стрРез.НомерЗаявки;
		НовСтрВыгрузки.ДатаЗаявки		 	= стрРез.ДатаЗаявки;
		НовСтрВыгрузки.Комментарий			= стрРез.Комментарий;
		НовСтрВыгрузки.НомерЗаявки			= стрРез.НомерЗаявки;
		НовСтрВыгрузки.ДатаЗаявки			= стрРез.ДатаЗаявки;
		НовСтрВыгрузки.НомерФилиала			= стрРез.НомерФилиала;
		НовСтрВыгрузки.НомерРеестра     	= стрРез.НомерРеестра;
		НовСтрВыгрузки.ДатаРеестра   	 	= стрРез.ДатаРеестра;
		НовСтрВыгрузки.КлючСтроки			= Строка(Новый УникальныйИдентификатор);
		НовСтрВыгрузки.КомментарийАкта		= стрРез.КомментарийАкта;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(тзВыгрузки, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПерезаписатьКонтакт(Объект, Тип, Знач Вид, Значение = "")

	Если ТипЗнч(Значение) = Тип("Строка") И ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Вид) = Тип("Строка") Тогда
		Вид = РСК_ПовтИсп.Получить_Справочники_ВидыКонтактнойИнформации_ПоИдентификатору(Вид);
	КонецЕсли;
	
	тзКонтактнаяИнформация = Объект.КонтактнаяИнформация.Выгрузить();
	УдаляемыеСтроки = тзКонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип,Вид", Тип, Вид));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		тзКонтактнаяИнформация.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		НовСтр = тзКонтактнаяИнформация.Добавить();
		НовСтр.Тип = Тип;
		НовСтр.Вид = Вид;
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда 
			НовСтр.Представление = Значение;
			НовСтр.ЗначенияПолей = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление="""+Значение+"""><Состав xsi:type=""НомерТелефона"" КодСтраны="""" КодГорода="""" Номер="""+Значение+""" Добавочный=""""/></КонтактнаяИнформация>";
			НовСтр.НомерТелефона = Значение;
			НовСтр.НомерТелефонаБезКодов = Значение;
			НовСтр.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НовСтр.Значение = "{
			|""value"": """+Значение+""",
			|""type"": ""Телефон"",
			|""number"": """+Значение+"""
			|}";
		Иначе
			НовСтр.Представление = Значение;	
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из Значение Цикл
			НовСтр = тзКонтактнаяИнформация.Добавить();
			НовСтр.Тип = Тип;
			НовСтр.Вид = Вид;
			Если Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда 
				НовСтр.Представление = ЭлементМассива;
				НовСтр.ЗначенияПолей = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление="""+ЭлементМассива+"""><Состав xsi:type=""НомерТелефона"" КодСтраны="""" КодГорода="""" Номер="""+ЭлементМассива+""" Добавочный=""""/></КонтактнаяИнформация>";
				НовСтр.НомерТелефона = ЭлементМассива;
				НовСтр.НомерТелефонаБезКодов = ЭлементМассива;
				НовСтр.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				НовСтр.Значение = "{
				|""value"": """+ЭлементМассива+""",
				|""type"": ""Телефон"",
				|""number"": """+ЭлементМассива+"""
				|}";
			Иначе
				НовСтр.Представление = ЭлементМассива;	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.КонтактнаяИнформация.Загрузить(тзКонтактнаяИнформация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьТелефоныДляСМС(Партнёр, МассивТелефонов)

	НЗ = РегистрыСведений.РСК_ТелефоныДляРассылкиСМС.СоздатьНаборЗаписей();
	НЗ.Отбор.Партнер.Установить(Партнёр);
	НЗ.Записать();
	Для Каждого НомерТелефона Из МассивТелефонов Цикл
		Если СтрДлина(НомерТелефона) < 11 Тогда
			Продолжить;
		КонецЕсли;
		Запись = НЗ.Добавить();
		Запись.Партнер = Партнёр;
		Запись.НомерТелефона = НомерТелефона;
	КонецЦикла;
	НЗ.Записать();

КонецПроцедуры // ПереписатьТелефоныДляСМС()


&НаКлиенте
Процедура ПеренестиДанные(Команда)
	ОтмеченныеСтроки = Объект.ДанныеФайла.НайтиСтроки(Новый Структура("Выбран", Истина));
	Если ОтмеченныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Вы забыли отметить строки флажками");
		Возврат;
	КонецЕсли;
	
	АдресХранилища = ВыгрузитьНаСервере();
	Если АдресХранилища = Неопределено Тогда
		Сообщить("Не выбрано ни одной строчки для переноса.");
	Иначе
		Если НЕ ЗагрузкаБезКонтракта Тогда 
			Закрыть(АдресХранилища); 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере()
	Тз_Похожие = Новый ТаблицаЗначений;
	Тз_Похожие.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
	Тз_Похожие.Колонки.Добавить("НомПП",Новый ОписаниеТипов(Новый КвалификаторыСтроки(3)),"Ном п/п");
	Тз_Похожие.Колонки.Добавить("РСК_СНИЛС",Новый ОписаниеТипов(Новый КвалификаторыСтроки(11)),"СНИЛС");
	Тз_Похожие.Колонки.Добавить("Наименование",Новый ОписаниеТипов(Новый КвалификаторыСтроки(150)));
	Тз_Похожие.Колонки.Добавить("ДатаРождения",Новый ОписаниеТипов(Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Тз_Похожие.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Для каждого стрПр из Объект.ДанныеФайла Цикл
		// сюда добавить проверку наличия похожих Получателей...
		Если НЕ стрПр.Выбран Тогда
			Продолжить;
		КонецЕсли;
		СНИЛС = СокрЛП(СтрЗаменить(СтрЗаменить(стрПр.СНИЛС,"-","")," ",""));
		ПоляПоиска = Новый Структура("СНИЛС,Фамилия,Имя,Отчество,ДатаРождения",СНИЛС,стрПр.ФамилияЗаявителя,стрПр.ИмяЗаявителя,стрПр.ОтчествоЗаявителя,стрПр.ДатаРожденияЗаявителя);
		Похож = ПроверимРеквизитПолучателя(ПоляПоиска);
		Если Похож.Количество() > 0 Тогда
			//есть какой-то количество
			// отправим пользователю для выбора...
			// создадим ТЗ
			Для каждого запись из Похож Цикл
				НовСтр = Тз_Похожие.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Ссылка,"Ссылка,РСК_СНИЛС,Наименование,ДатаРождения"));
				НовСтр.НомПП = стрПр.НомерСтроки;
			КонецЦикла;
			ВывестиТЗНаФорму(Тз_Похожие);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	ПроверитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФайлаТСР_ПоКонтрактуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТД = Элементы.ДанныеФайла.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заказ", Объект.Контракт);
	ПараметрыФормы.Вставить("Разнарядка", ВладелецФормы.Объект.Ссылка);
	ПараметрыФормы.Вставить("ИскомоеТСР", ТД.ТСР);
	ПараметрыФормы.Вставить("АдресТаблицыВыбранныхТСР", ПолучитьАдресТаблицыВыбранныхТСР());
	
	ОписаниеЗакрытия = Новый ОписаниеОповещения("ПослеВыбораТСР", ЭтаФорма);
	
	ОткрытьФорму("Обработка.РСК_ЗагрузкаДляАльфа.Форма.ФормаВыбораТСР", ПараметрыФормы, ЭтаФорма,,,,ОписаниеЗакрытия);
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресТаблицыВыбранныхТСР()

	тзВыбранныеТСР = Объект.ДанныеФайла.Выгрузить(,"ТСР_ПоКонтракту,Количество");
	тзВыбранныеТСР.Свернуть("ТСР_ПоКонтракту", "Количество");
	Возврат ПоместитьВоВременноеХранилище(тзВыбранныеТСР, УникальныйИдентификатор);

КонецФункции // ПолучитьАдресТаблицыВыбранныхТСР()

&НаКлиенте
Процедура ПослеВыбораТСР(ВыбранноеЗначение, ДопПараметры) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТД = Элементы.ДанныеФайла.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД.ТСР_ПоКонтракту = ВыбранноеЗначение.ТСР;
	ТД.Цена = ВыбранноеЗначение.Цена;
	ВыбранноеЗначение.ОстатокЗаказа = ВыбранноеЗначение.ОстатокЗаказа - ТД.Количество;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПослеОтветаНаВопросОбИзмененииТСРКонтрактаДляВсехПохожих", ЭтаФорма, ВыбранноеЗначение), 
		"Изменить для всех?",
		РежимДиалогаВопрос.ДаНет
	);
	
КонецПроцедуры // ПослеВыбораТСР()

&НаКлиенте
Процедура ПослеОтветаНаВопросОбИзмененииТСРКонтрактаДляВсехПохожих(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура("ТСР",Элементы.ДанныеФайла.ТекущиеДанные.ТСР);
	Найдено = Объект.ДанныеФайла.НайтиСтроки(Отбор);
	
	Остаток = ДополнительныеПараметры.ОстатокЗаказа;
	Для каждого стр из Найдено Цикл
		Если ЗначениеЗаполнено(стр.ТСР_ПоКонтракту) Тогда
			Продолжить;
		КонецЕсли;
		Если стр.Количество > Остаток Тогда
			//На совещании 09.06.2022 Ольга Полянская отказалась от контроля отрицательных остатков на этой стадии
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	"Недостаточно остатка по ТСР для строки " + стр.НомерСтроки,,
			//	"ДанныеФайла["+XMLСтрока(стр.НомерСтроки-1)+"].Количество",
			//	"Объект"
			//);
			//Продолжить;
		КонецЕсли;
		стр.ТСР_ПоКонтракту = ДополнительныеПараметры.ТСР;
		стр.Цена = ДополнительныеПараметры.Цена;
		Остаток = Остаток - стр.Количество; 
	КонецЦикла;

КонецПроцедуры // ПослеОтветаНаВопросОбИзмененииТСРКонтрактаДляВсехПохожих()


&НаСервере
Процедура ПолучитьРайонИЗАдреса()
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ФорматАдреса","ФИАС");
	
	Для Каждого Строка ИЗ Объект.ДанныеФайла Цикл
		Если  Строка.Район <> "" Тогда
			Продолжить
		КонецЕсли;
		Адрес = ?(Строка.АдресПроживанияЗаявителя = "",Строка.АдресРегистрацииЗаявителя,Строка.АдресПроживанияЗаявителя);
		Индекс  = Лев(СокрЛ(Адрес),6);
		ДанныеПоИндексу = АдресныйКлассификаторСлужебный.АдресаПоПочтовомуИндексуКлассификатора(Индекс,ДополнительныеПараметры);
		ЕстьДанные = ДанныеПоИндексу.Данные.Количество() > 0;
		Если ДанныеПоИндексу.Данные.Количество() > 0 Тогда 
			АдресXDTO = АдресныйКлассификаторСлужебный.АктуальныеАдресныеСведения(ДанныеПоИндексу.Данные[0].Идентификатор);
			Если АдресXDTO.Данные.СврайМО <> Неопределено Тогда
				Строка.Район	= АдресXDTO.Данные.СврайМО.Район;
			Иначе
				Строка.Район	= "По индексу "+Индекс+" не удалось определить район автоматически";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаСервере
Процедура ПодобратьРайонПоКоду()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗоныДоставки.Ссылка КАК Район,
		|	ЗоныДоставки.РСК_КодРайона КАК КодРайона
		|ИЗ
		|	Справочник.ЗоныДоставки КАК ЗоныДоставки
		|ГДЕ
		|	ЗоныДоставки.Родитель В ИЕРАРХИИ(&Родитель)
		|	И НЕ ЗоныДоставки.ЭтоГруппа
		|	И ЗоныДоставки.РСК_КодРайона <> """"
		|	И НЕ ЗоныДоставки.ПометкаУдаления";
	
	Если ЗагрузкаБезКонтракта Тогда
		Родитель = Объект.Область;
	Иначе
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контракт,"реа_ТерриториальнаяГруппа");
	КонецЕсли;
	Запрос.УстановитьПараметр("Родитель",Родитель);
	
	ТаблицаКодовРайонов = Запрос.Выполнить().Выгрузить();

	Для Каждого Строка ИЗ Объект.ДанныеФайла Цикл
		Если Строка.КодРайона = "" Тогда
			Продолжить
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодРайона",Строка.КодРайона);		
		НайденныеРайоны = ТаблицаКодовРайонов.НайтиСтроки(Отбор);
		Если НайденныеРайоны.Количество() > 0 Тогда
			Строка.СуществующийРайон = НайденныеРайоны[0].Район;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаСервере
Процедура ПодобратьРайонИзСуществующих()
	Запрос = Новый Запрос;
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	ЗоныДоставки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗоныДоставки КАК ЗоныДоставки
		|ГДЕ
		|	НЕ ЗоныДоставки.ЭтоГруппа
		|	И ЗоныДоставки.Наименование ПОДОБНО &Наименование
		|	И ЗоныДоставки.Родитель = &Родитель
		|	И НЕ ЗоныДоставки.ПометкаУдаления";
	
	Если ЗагрузкаБезКонтракта Тогда
		Родитель = Объект.Область;
	Иначе
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контракт,"реа_ТерриториальнаяГруппа");
	КонецЕсли;
	Запрос.УстановитьПараметр("Родитель", Родитель);
	НеНайденСуществующийРайон = Ложь;
	Для каждого Строка ИЗ Объект.ДанныеФайла Цикл
		Если ЗначениеЗаполнено(Строка.СуществующийРайон) Тогда
			Продолжить;
		КонецЕсли;
		НаименованиеРайона = "%"+Строка.Район+"%";
		Запрос.УстановитьПараметр("Наименование", НаименованиеРайона);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			НаиболееПохожийРайон = ПолучитьНаиболееПодходящийРайон(РезультатЗапроса,Строка.Район);
			Строка.СуществующийРайон = НаиболееПохожийРайон;
		Иначе
			НеНайденСуществующийРайон = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НеНайденСуществующийРайон Тогда 
		Сообщить("Выделенные красным районы не найдены в базе, они будут созданы!Чтобы не создавать новые районы, можно выбрать район из существующих, в колонке существующий район.")  ;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьНаиболееПодходящийРайон(ТЗРайоны,Район)
	МаксимальныйПроцентСхожести = 0;
	Для Каждого Строка ИЗ ТЗРайоны Цикл
		ПроцентСхожести = ПолучитьПроцентПохожестиРайонов(Строка.Ссылка.Наименование, Район); 
		Если ПроцентСхожести > МаксимальныйПроцентСхожести Тогда
			ПодходящийРайон = Строка.Ссылка ;
			МаксимальныйПроцентСхожести = ПроцентСхожести;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодходящийРайон 	
КонецФункции

Функция ПолучитьПроцентПохожестиРайонов(Знач Наим1, Знач Наим2)
	Наим1 = СокрЛП(Наим1);
	Наим2 = СокрЛП(Наим2);
	Наим1 = СтрЗаменить(Наим1,"  ",""); //Удаляем двойные пробелы
	Наим1 = СтрЗаменить(Наим1," ","");  //Удаляет одинарные пробелы
	Наим2 = СтрЗаменить(Наим2,"  ","");
	Наим2 = СтрЗаменить(Наим2," ","");
	//проверяем значения на схожесть  
	Длина1  = СтрДлина(Наим1);
	Длина2  = СтрДлина(Наим2);
	Если Длина1 > Длина2 Тогда
		Длина = Длина1;
		Стр   = Наим1;
	Иначе
		Длина = Длина2;
		Стр   = Наим2;
	КонецЕсли;
	Сч = 0; Вхождение1 = 0; Вхождение2 = 0;
	Пока (Стр<>"") Цикл
		Символ = Лев(Стр,1);
		Вхождение1 = Вхождение1+СтрЧислоВхождений(Наим1,Символ);
		Вхождение2 = Вхождение2+СтрЧислоВхождений(Наим2,Символ);
		Наим1 = СтрЗаменить(Наим1,Символ,"");
		Наим2 = СтрЗаменить(Наим2,Символ,"");
		Стр = Прав(Стр,СтрДлина(Стр)-1);
	КонецЦикла;
	ВозвращЗначение = 0;
	Попытка
		ВозвращЗначение = ?(Вхождение1>Вхождение2,Окр((Вхождение2/Вхождение1)*100,3,1),Окр((Вхождение1/Вхождение2)*100,3,1));		
	Исключение		
	КонецПопытки; 
	 Возврат  ВозвращЗначение;
КонецФункции

&НаКлиенте
Процедура ДанныеФайлаСуществующийРайонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Родитель", ПолучитьРодителяЗоныДоставки());
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ФормаВыбора = ПолучитьФорму("Справочник.ЗоныДоставки.ФормаВыбора", ПараметрыФормы, Элемент);
	ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаСервере
Функция ПолучитьРодителяЗоныДоставки()

	Если ЗагрузкаБезКонтракта Тогда
		Возврат Объект.Область;
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контракт, "реа_ТерриториальнаяГруппа");
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьМассивПерезаписываемыхРеквизитов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_СхемыИмпортаСхемаКолонок.Ссылка.СтрокаНачалаДанных КАК СтрокаНачалаДанных,
		|	РСК_СхемыИмпортаСхемаКолонок.КолонкаИмпорта.ПредопределённоеИмя КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.РСК_СхемыИмпорта.СхемаКолонок КАК РСК_СхемыИмпортаСхемаКолонок
		|ГДЕ
		|	РСК_СхемыИмпортаСхемаКолонок.Ссылка = &СхемаИмпорта
		|	И РСК_СхемыИмпортаСхемаКолонок.Перезаписывать";
	
	Запрос.УстановитьПараметр("СхемаИмпорта", Объект.СхемаИмпорта);
	тзРезультат = Запрос.Выполнить().Выгрузить();
	Возврат тзРезультат.ВыгрузитьКолонку("ИмяПредопределенныхДанных");	
	
	//Было:
	МассивПерезаписываемыхРеквизитов = Новый Массив;
	Если ЗначениеЗаполнено(Объект.СхемаИмпорта) Тогда
		//получим массив
		Схема = Объект.СхемаИмпорта.СхемаКолонок.Получить();
		Если Не Схема = Неопределено Тогда
			СтрокаНачало = Схема[0];
			тзСхема = Схема[1];
			Для каждого стрСхема из тзСхема Цикл
				Если НЕ стрСхема.Перезаписывать Тогда
					Продолжить;
				Иначе
					МассивПерезаписываемыхРеквизитов.Добавить(стрСхема.Реквизит.ИмяПредопределенныхДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат МассивПерезаписываемыхРеквизитов ;
КонецФункции

Функция УдалитьСимволыПереноса (Строка)
	Количество = СтрЧислоСтрок(Строка);
	Стр ="";
	Если Количество > 1 Тогда
		Для Инд=0 по Количество Цикл
			Стр = Стр + СтрПолучитьСтроку(Строка,Инд)+" ";    
		КонецЦикла;
		Возврат СокрЛП(Стр);
	Иначе
		Возврат Строка
	КонецЕсли;
КонецФункции

Процедура УдалитьПустыеСтроки()
	Отбор = Новый Структура;
	Отбор.Вставить("СНИЛС","");
	ПустыеСтроки = Объект.ДанныеФайла.НайтиСтроки(Отбор);
	Для Каждого Строка ИЗ ПустыеСтроки цикл
		Объект.ДанныеФайла.Удалить(Строка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьРайонПоИндексу(Команда)
	ВремяСек = Окр(Объект.ДанныеФайла.Количество(),-1);
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПослеОтветаНаВопросОПодбореРайонаИзАдреса", ЭтаФорма), 
		"Операция подбора района из адреса может занять продолжительное время (Примерно "+ВремяСек+" сек) продолжить?",
		РежимДиалогаВопрос.ДаНет
	);
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОПодбореРайонаИзАдреса(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	ПолучитьРайонИЗАдреса();

КонецПроцедуры // ПослеОтветаНаВопросОПодбореРайонаИзАдреса()


&НаКлиенте
Процедура ОбластьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьМассивТерриториальныхГрупп() ;
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивТерриториальныхГрупп() 
	СписокЗначенийТерриториальныхГрупп = Новый СписокЗначений;
	Выборка = Справочники.ПолучателиТСР.Выбрать(Справочники.ПолучателиТСР.ПустаяСсылка(),,,);
	Пока  Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			СписокЗначенийТерриториальныхГрупп.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;		
	Возврат СписокЗначенийТерриториальныхГрупп ;
КонецФункции

&НаКлиенте
Процедура ЗагрузкаБезКонтрактаПриИзменении(Элемент)
	Если ЗагрузкаБезКонтракта Тогда
		Элементы.Область.Видимость  = Истина;
		Элементы.КлиентЗаказа.Видимость = Истина;
		Элементы.Контракт.Видимость = Ложь;
	Иначе
		Элементы.Область.Видимость  = Ложь;
		Элементы.КлиентЗаказа.Видимость = Ложь;
		Элементы.Контракт.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗагрузкаБезКонтрактаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуществующийРайонТакимиЖеРайонами(Команда)
	ТД = Элементы.ДанныеФайла.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		ПоказатьПредупреждение(,"Сделайте активной хотябы одну строку таблицы");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТД.СуществующийРайон) Тогда
		ПоказатьПредупреждение(,"Нужно, чтобы в выделенной строке была заполнена колонка «Существующий район»");
		Возврат;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ТолькоНезаполненные", "Заполнить только незаполненные");
	Кнопки.Добавить("Все", "Заменить все районы");
	Кнопки.Добавить("Отмена", "Ничего не делать");
	
	ДопПараметры = Новый Структура("ВыбранныйРайон",ТД.СуществующийРайон); 
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПослеОтветаНаВопросОбИзмененииЗоныДоставкиДляВсехПохожихРайонов", ЭтаФорма, ДопПараметры), 
		"Изменить «Существующий район» для всех строк, где колонка «Район» = """+ТД.Район+"""?",
		Кнопки
	);
КонецПроцедуры


&НаКлиенте
Процедура ПослеОтветаНаВопросОбИзмененииЗоныДоставкиДляВсехПохожихРайонов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено ИЛИ РезультатВопроса = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Район",Элементы.ДанныеФайла.ТекущиеДанные.Район);
	Найдено = Объект.ДанныеФайла.НайтиСтроки(Отбор);
	Для каждого стр из Найдено Цикл
		Если ЗначениеЗаполнено(стр.СуществующийРайон) И РезультатВопроса = "ТолькоНезаполненные" Тогда
			Продолжить;
		КонецЕсли;
		стр.СуществующийРайон = ДополнительныеПараметры.ВыбранныйРайон;
	КонецЦикла;

КонецПроцедуры
