
&НаСервере
&ИзменениеИКонтроль("ОбработкаПроверкиЗаполненияНаСервере")
Процедура РСК_ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	ПроверяемыеРеквизиты.Очистить();

	ОбработкаОбъект               = РеквизитФормыВЗначение("Объект");
	ЭтоОперацияПередачи           = ЭтоОперацияПередачи(Объект.ХозяйственнаяОперация);
	ЭтоОперацияЗаказаКлиента      = ЭтоОперацияЗаказаКлиента(Объект.ВариантОформленияДокументов);
	ВариантСозданияНеКоммерческоеПредложение = 
	Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
	МассивНепроверяемыхРеквизитов = Новый Массив;

	#Область ПроверкиРеквизитовШапки

	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Клиент"" не заполнено';
		|en = '""Customer"" is required'"), , "Объект.Партнер", ,
		Отказ);
	КонецЕсли;

	Если ИспользоватьСоглашенияСКлиентами
		И Не ЗначениеЗаполнено(Объект.Соглашение)
		И ВариантСозданияНеКоммерческоеПредложение Тогда

		ТекстОшибки = НСтр("ru = 'Поле ""Соглашение"" не заполнено';
		|en = '""Agreement"" is not filled in'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"Объект.Соглашение", , Отказ);

	КонецЕсли;

	Если Не ВариантСозданияНеКоммерческоеПредложение
		И Не ЗначениеЗаполнено(Объект.СрокДействия) Тогда

		ТекстОшибки = НСтр("ru = 'Поле ""Срок действия"" не заполнено';
		|en = '""Validity period"" is required'");

		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,"СрокДействия", "Объект", Отказ);

	КонецЕсли;

	Если Не ВариантСозданияНеКоммерческоеПредложение Тогда

		Если ЗначениеЗаполнено(Объект.Менеджер)Тогда
			КонтактнаяИнформацияМенеджера = КоммерческиеПредложенияДокументы.КонтактнаяИнформацияМенеджера(Объект.Менеджер);

			Если ПустаяСтрока(КонтактнаяИнформацияМенеджера.Email) Тогда

				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для менеджера %1 не указан адрес электронной почты.';
				|en = 'The email address is not specified for the manager %1.'"), Объект.Менеджер);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Менеджер", , Отказ);

			ИначеЕсли Не КонтактнаяИнформацияМенеджера.EmailСоответствуетТребованиям Тогда

				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для менеджера %1 указан некорректный адрес электронной почты ""%2"".';
				|en = 'The incorrect email address ""%2"" is specified for the manager %1.'"), Объект.Менеджер, КонтактнаяИнформацияМенеджера.Email);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Менеджер", , Отказ);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Не ВариантСозданияНеКоммерческоеПредложение
		И ЗначениеЗаполнено(Объект.СрокДействия)
		И Объект.СрокДействия < НачалоДня(ТекущаяДатаСеанса()) Тогда

		ТекстОшибки = НСтр("ru = '""Срок действия"" должен быть не меньше чем текущая дата';
		|en = '""Validity period"" must not be less than the current date'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,"СрокДействия", "Объект", Отказ);

	КонецЕсли;

	ПараметрыОтбораТоваров = Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	ПараметрыОтбораТары    = Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.МногооборотнаяТара);

	ЕстьТовары = Объект.Товары.НайтиСтроки(ПараметрыОтбораТоваров).Количество() > 0;
	ЕстьТара   = Объект.Товары.НайтиСтроки(ПараметрыОтбораТары).Количество() > 0;

	Если ДатаОтгрузкиОбязательна 
		И НЕ ЗначениеЗаполнено(Объект.ДатаОтгрузки)
		И Объект.НеОтгружатьЧастями
		И ЭтоОперацияЗаказаКлиента Тогда

		ТекстОшибки = НСтр("ru = 'Поле ""Дата отгрузки"" не заполнено';
		|en = '""Shipment date"" is not filled in'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"Объект.ДатаОтгрузки", ,Отказ);

	КонецЕсли; 

	Если СкладОбязателен
		И Не СкладГруппа
		И Не ЗначениеЗаполнено(Объект.Склад)
		И ВариантСозданияНеКоммерческоеПредложение Тогда

		ТекстОшибки = НСтр("ru = 'Поле ""Склад"" не заполнено';
		|en = '""Warehouse"" is required'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"Объект.Склад", , Отказ);

	ИначеЕсли (ЕстьТовары Или ЕстьТара)
		И СкладГруппа
		И ВариантСозданияНеКоммерческоеПредложение
		И ЗначениеЗаполнено(Объект.Склад) Тогда

		ВыборГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ВыборГруппы");

		Если (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
			Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю
			Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг)
			И ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Тогда

			ТекстОшибки = НСтр("ru = 'Необходимо указать группу складов, разрешенную для выбора в заказах';
			|en = 'Specify a warehouse group allowed for selection in orders'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Склад", , Отказ);

		ИначеЕсли (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
			Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ПередачаТоваровХранителю)
			И (ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить
			Или ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах) Тогда

			ТекстОшибки = НСтр("ru = 'Необходимо указать группу складов, разрешенную для выбора в реализациях';
			|en = 'Specify a warehouse group allowed for selection in sales'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Склад", , Отказ);

		КонецЕсли;

	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Подразделение)
		И ФормироватьВидыЗапасовПоПодразделениямМенеджерам
		И (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ПередачаТоваровХранителю
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) Тогда

		ТекстОшибки = НСтр("ru = 'Поле ""Подразделение"" не заполнено';
		|en = '""Business unit"" is required'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Подразделение", , Отказ);

	КонецЕсли;

	#КонецОбласти

	#Область ПроверкиТабличнойЧастиТовары

	ЕстьОшибкиТовары = Ложь;

	Если Объект.Товары.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не введено ни одной строки в список ""Товары""';
		|en = 'No line entered into the Item list'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Товары", , ЕстьОшибкиТовары);
	ИначеЕсли Объект.Товары.Итог("КоличествоУпаковок") = 0 И Объект.Товары.Итог("КоличествоКВозврату") = 0
		И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда

		ТекстОшибки = НСтр("ru = 'Не введено ни одной строки для оформления документов в список ""Товары"". Оформление только документов';
		|en = 'No lines are entered to the ""Goods"" list for document registration. Registration of documents only'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Товары", , ЕстьОшибкиТовары);

	КонецЕсли;

	Для ТекИндекс = 0 По Объект.Товары.Количество()-1 Цикл

		ТекущаяСтрока = Объект.Товары[ТекИндекс]; // СтрокаТабличнойЧасти

		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Товары""';
		|en = 'in line %НомерСтроки% of the ""Goods"" list'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);

		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнена колонка ""Номенклатура""';
			|en = 'Column ""Items"" is not filled in'") + АдресОшибки,
			,
			"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),
			,
			ЕстьОшибкиТовары);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ТекущаяСтрока.КоличествоУпаковок)
			И Не ЗначениеЗаполнено(ТекущаяСтрока.КоличествоУпаковокКВозврату) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнена колонка ""Количество упаковок""';
			|en = 'Column ""Quantity"" is not filled in'") + АдресОшибки,
			,
			"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "КоличествоУпаковок"),
			,
			ЕстьОшибкиТовары);

		КонецЕсли;

		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Цена)
			И ?(Объект.ВернутьМногооборотнуюТару И Не Объект.ТребуетсяЗалогЗаТару,
			ТекущаяСтрока.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара,
			Истина) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнена колонка ""Цена""';
			|en = 'Column ""Price"" is not filled in'") + АдресОшибки,
			,
			"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Цена"),
			,
			ЕстьОшибкиТовары);

		КонецЕсли;

		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Сумма)
			И Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].КоличествоУпаковокКВозврату)
			И ?(Объект.ВернутьМногооборотнуюТару
			И Не Объект.ТребуетсяЗалогЗаТару,
			ТекущаяСтрока.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара,
			Истина) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнена колонка ""Сумма""';
			|en = 'Column ""Amount"" is not filled in'") + АдресОшибки,
			,
			"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Сумма"),
			,
			ЕстьОшибкиТовары);

		КонецЕсли;

		Если Не ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС)
			И Не ЭтоОперацияПередачи Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнена колонка ""Ставка НДС""';
			|en = '""VAT rate"" is not filled in'") + АдресОшибки,
			,
			"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "СтавкаНДС"),
			,
			ЕстьОшибкиТовары);

		КонецЕсли;

		Если ТекущаяСтрока.СкладОбязателен
			И Не ЗначениеЗаполнено(ТекущаяСтрока.Склад)
			И ВариантСозданияНеКоммерческоеПредложение Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнена колонка ""Склад""';
			|en = 'Column ""Warehouse"" is not filled in'") + АдресОшибки,
			,
			"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Склад"),
			,
			ЕстьОшибкиТовары);

		КонецЕсли;

		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВариантОформления)
			И (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
			Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнена колонка ""Оформить""';
			|en = '""Register"" is not filled in'") + АдресОшибки,
			,
			"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ВариантОформления"),
			,
			ЕстьОшибкиТовары);

		КонецЕсли;

		Если (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
			Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю
			Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) Тогда

			Если ТекущаяСтрока.ДатаОтгрузкиОбязательна
				И Не ЗначениеЗаполнено(ТекущаяСтрока.ДатаОтгрузки)
				И Не Объект.НеотгружатьЧастями Тогда

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнена колонка ""Дата отгрузки""';
				|en = 'Column ""Shipment date"" is not filled in'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ДатаОтгрузки"),
				,
				ЕстьОшибкиТовары);

			КонецЕсли;

			// Дата отгрузки в тч Товары должна быть не меньше даты документа
			Если НЕ Объект.НеОтгружатьЧастями
				И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОтгрузки)
				И ТекущаяСтрока.ДатаОтгрузки < НачалоДня(Объект.Дата) Тогда

				ТекстОшибки = НСтр("ru = 'Дата отгрузки должна быть не меньше даты продажи ""%Дата%""';
				|en = 'Shipment date cannot be less than date of sale ""%Дата%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Объект.Дата, "ДЛФ=DD"));

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ДатаОтгрузки"),
				,
				Отказ);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ОбработкаОбъект, ПроверяемыеРеквизиты, ЕстьОшибкиТовары);
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ОбработкаОбъект, МассивНепроверяемыхРеквизитов, ЕстьОшибкиТовары);

	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПомощникПродаж);

	Если ЭтоРеализация(Объект.ВариантОформленияДокументов)
		Или ЭтоПередачаТоваров(Объект.ВариантОформленияДокументов) Тогда

		НоменклатураСервер.ПроверитьЗаполнениеСерий(Объект, ПараметрыУказанияСерий.Реализация, ЕстьОшибкиТовары);

	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
		НоменклатураСервер.ПроверитьЗаполнениеСерий(Объект, ПараметрыУказанияСерий.Заказ, ЕстьОшибкиТовары);
	КонецЕсли;

	НоменклатураСервер.ПроверитьЗаполнениеСодержания(ОбработкаОбъект, ЕстьОшибкиТовары, "Товары");

	#КонецОбласти

	#Область ПроверкиРеквизитовОплатыИОтгрузкиИТабличнойЧастиЭтапыоплаты

	ЕстьОшибкиОплатаОтгрузка = Ложь;

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = НСтр("ru = 'Поле ""Организация"" не заполнено';
		|en = '""Company"" is required'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Организация", , ЕстьОшибкиОплатаОтгрузка);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов")
		И Не ЗначениеЗаполнено(Объект.Контрагент) Тогда

		ТекстОшибки = НСтр("ru = 'Поле ""Контрагент"" не заполнено';
		|en = '""Counterparty"" is not filled in'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Контрагент", , ЕстьОшибкиОплатаОтгрузка);

	КонецЕсли;

	Если ВариантСозданияНеКоммерческоеПредложение
		И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")
		И ((ИспользоватьСоглашенияСКлиентами
		И ЗначениеЗаполнено(Объект.Соглашение)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов"))
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		И Не ЗначениеЗаполнено(Объект.Договор) Тогда

		ТекстОшибки = НСтр("ru = 'Поле ""Договор"" не заполнено';
		|en = '""Contract"" is not filled in.'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Договор", , ЕстьОшибкиОплатаОтгрузка);

	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Менеджер) Тогда
		ТекстОшибки = НСтр("ru = 'Поле ""Менеджер"" не заполнено';
		|en = '""Manager"" is not filled in'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Менеджер", , ЕстьОшибкиОплатаОтгрузка);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ТекстОшибки = НСтр("ru = 'Поле ""Валюта"" не заполнено';
		|en = '""Currency"" is required'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Валюта", , ЕстьОшибкиОплатаОтгрузка);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		ТекстОшибки = НСтр("ru = 'Поле ""Операция"" не заполнено';
		|en = '""Operation"" is not filled in'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.ХозяйственнаяОперация", ,
		ЕстьОшибкиОплатаОтгрузка);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.НалогообложениеНДС)
		И Не (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю
		Или ЭтоОперацияПередачи) Тогда

		ТекстОшибки = НСтр("ru = 'Поле ""Налогообложение НДС"" не заполнено';
		|en = '""VAT taxation"" is not filled in'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.НалогообложениеНДС", ,
		ЕстьОшибкиОплатаОтгрузка);

	КонецЕсли;

	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если Объект.НеОтгружатьЧастями
		И ЗначениеЗаполнено(ОбработкаОбъект.ДатаОтгрузки)
		И ЭтоОперацияЗаказаКлиента
		И ОбработкаОбъект.ДатаОтгрузки < НачалоДня(ОбработкаОбъект.Дата) Тогда

		ТекстОшибки = НСтр("ru = 'Дата отгрузки должна быть не меньше даты документа %Дата%';
		|en = 'Shipment date cannot be less than document date%Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ОбработкаОбъект.Дата,"ДЛФ=DD"));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.ДатаОтгрузки", , ЕстьОшибкиОплатаОтгрузка);

	КонецЕсли;

	Если ВариантСозданияНеКоммерческоеПредложение
		И Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная
		И Объект.СоздаватьПриходныйКассовыйОрдер
		И Не ЭтоОперацияПередачи
		И Не ЗначениеЗаполнено(Объект.Касса) Тогда

		ТекстОшибки = НСтр("ru = 'Поле ""Касса"" не заполнено';
		|en = '""Cash account"" is not filled in'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НадписьЭтапыОплаты", , ЕстьОшибкиОплатаОтгрузка);

	КонецЕсли;

	ЗаказРасчетыПоНакладным = (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента 
	И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным);

	Если ВариантСозданияНеКоммерческоеПредложение
		И ЗначениеЗаполнено(Объект.ХозяйственнаяОперация)
		И Не ЗаказРасчетыПоНакладным
		И Не ЭтоОперацияПередачи Тогда

		СуммаОплатыПоДокументу = Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
		СуммаЗалогаЗаТару      = ?(Объект.ТребуетсяЗалогЗаТару, Объект.Товары.Итог("СуммаСНДС") - СуммаОплатыПоДокументу, 0);

		Если Не ГрафикИсполненияВДоговоре
			Или ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда

			СтруктураПараметровПроверки = ЭтапыОплатыСервер.ПараметрыПроверкиКорректностиЗаполненияЭтапов();
			СтруктураПараметровПроверки.ДатаОтгрузки           = ДатаОтгрузки;
			СтруктураПараметровПроверки.Дата                   = НачалоДня(ТекущаяДатаСеанса());
			СтруктураПараметровПроверки.Валюта                 = ВалютаДокумента;
			СтруктураПараметровПроверки.ЭтоЗаказ               = 
			Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
			Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг;
			СтруктураПараметровПроверки.НадписьЭтапыОплаты     = "ДекорацияЭтапыОплаты";
			СтруктураПараметровПроверки.СуммаОплатыПоДокументу = СуммаОплатыПоДокументу;
			СтруктураПараметровПроверки.СуммаЗалогаПоДокументу = СуммаЗалогаЗаТару;

			ЭтапыОплатыСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(
			Объект.ЭтапыГрафикаОплаты,
			ЕстьОшибкиОплатаОтгрузка, 
			СтруктураПараметровПроверки);

		КонецЕсли;

	КонецЕсли;

	// Проверка запрета отгрузки
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
		И Объект.СтатусЗаказаКлиента <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда

		ПродажиСервер.ПроверитьЗапретОтгрузки(Объект.Партнер, Отказ);

	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ПередачаТоваровХранителю Тогда

		ПараметрыОтбораАкт = Новый Структура("ВариантОформленияПродажи",
		Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот);
		ТоварыАкт          = Объект.Товары.Выгрузить(ПараметрыОтбораАкт);

		Если (ТоварыАкт.Количество() > 0
			Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ПередачаТоваровХранителю
			Или Объект.СтатусРеализацииТоваровУслуг <> Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате
			Или СуммаАвансаДоОбеспечения + СуммаПредоплатыДоОтгрузки = 0) Тогда

			ПродажиСервер.ПроверитьЗапретОтгрузки(Объект.Партнер, Отказ);

		КонецЕсли;

	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю Тогда

		ПараметрыОтбораЗаказ = Новый Структура("ВариантОформления",
		Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента);
		ПараметрыОтбораЗаказ = Объект.Товары.Выгрузить(ПараметрыОтбораЗаказ);

		Если ПараметрыОтбораЗаказ.Количество() = Объект.Товары.Количество()
			И Объект.СтатусЗаказаКлиента <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда

			ПродажиСервер.ПроверитьЗапретОтгрузки(Объект.Партнер, Отказ);

		КонецЕсли;

		ПараметрыОтбораПродажа = Новый Структура("ВариантОформления",
		Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг);
		СтрокиПродажи          = Объект.Товары.НайтиСтроки(ПараметрыОтбораПродажа);
		ПараметрыОтбораПередачи = Новый Структура("ВариантОформления",
		Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю);
		СтрокиПередачи          = Объект.Товары.НайтиСтроки(ПараметрыОтбораПередачи);

		Если СтрокиПродажи.Количество() > 0
			Или СтрокиПередачи.Количество() > 0 Тогда

			ПродажиСервер.ПроверитьЗапретОтгрузки(Объект.Партнер, Отказ);

		КонецЕсли;

	КонецЕсли;

	// Проверка реквизитов доставки
	ЕстьОшибкиДоставки = Ложь;

	Если ИспользоватьУправлениеДоставкой
		И (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ПередачаТоваровХранителю
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) Тогда

		Если Объект.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз Тогда
			Если НЕ ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
				Если Объект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда
					ТекстОшибки = НСтр("ru = 'Поле ""Адрес доставки"" не заполнено';
					|en = '""Delivery address"" is not filled in'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Поле ""Адрес доставки до получателя"" не заполнено';
					|en = '""Delivery address to consignee"" is not filled in'");
				КонецЕсли;

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.АдресДоставки", , ЕстьОшибкиДоставки);
			КонецЕсли;

			Если (Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
				#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
				Или Объект.СпособДоставки = Перечисления.СпособыДоставки.РСК_ПеревозчикДоКлиента
				Или Объект.СпособДоставки = Перечисления.СпособыДоставки.РСК_ПеревозчикДоПВЗ
				#КонецВставки
				Или Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу)
				И Не ЗначениеЗаполнено(Объект.ПеревозчикПартнер) Тогда

				ТекстОшибки = НСтр("ru = 'Поле ""Перевозчик"" не заполнено';
				|en = '""Carrier"" is not filled in'");

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.ПеревозчикПартнер", , ЕстьОшибкиДоставки);

			КонецЕсли;

			Если Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
				И Не ЗначениеЗаполнено(Объект.АдресДоставкиПеревозчика) Тогда

				ТекстОшибки = НСтр("ru = 'Поле ""Адрес доставки до перевозчика"" не заполнено';
				|en = '""Delivery address to carrier"" is not filled in'");

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.АдресДоставкиПеревозчика", ,
				ЕстьОшибкиДоставки);

			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если ЕстьОшибкиТовары Тогда
		СброситьПометкиКомандШапки(Элементы);

		Элементы.ПерейтиКорзина.Пометка   = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКорзина;
	ИначеЕсли ЕстьОшибкиОплатаОтгрузка Тогда
		СброситьПометкиКомандШапки(Элементы);

		Элементы.ПерейтиОтгрузкаОплата.Пометка = Истина;
		Элементы.Страницы.ТекущаяСтраница      = Элементы.СтраницаОплатаОтгрузка;
	ИначеЕсли ЕстьОшибкиДоставки Тогда
		СброситьПометкиКомандШапки(Элементы);

		Элементы.ПерейтиДоставка.Пометка  = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоставка;
	ИначеЕсли Отказ Тогда
		СброситьПометкиКомандШапки(Элементы);

		Элементы.ПерейтиПартнер.Пометка = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПартнер;
	КонецЕсли;

	Если ЕстьОшибкиТовары
		Или ЕстьОшибкиОплатаОтгрузка
		Или ЕстьОшибкиДоставки Тогда

		Отказ = Истина;

	КонецЕсли;

	#КонецОбласти

	Если Не Отказ Тогда
		ЗначениеРеквизитаФормыОбъект = РеквизитФормыВЗначение("Объект");
		ЗначениеРеквизитаФормыОбъект.СуммаДокумента = 1;
		ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЗначениеРеквизитаФормыОбъект, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ОткрытьРеквизитыПечатиРеализации")
Процедура РСК_ОткрытьРеквизитыПечатиРеализации()

	ИспользуетсяДоставка = ИспользоватьУправлениеДоставкой
	И (Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента")
	ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу"));

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",             Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",               Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",               Объект.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",              Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("Договор",                        Объект.Договор);
	СтруктураПараметров.Вставить("Основание",                      Объект.Основание);
	СтруктураПараметров.Вставить("ОснованиеНомер",                 Объект.ОснованиеНомер);
	СтруктураПараметров.Вставить("ОснованиеДата",                  Объект.ОснованиеДата);
	СтруктураПараметров.Вставить("Отпустил",                       Объект.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",              Объект.ОтпустилДолжность);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                 ДокументыСформированы И Не Модифицированность);
	СтруктураПараметров.Вставить("ТипОбъекта",                     "ПомощникПродаж");
	СтруктураПараметров.Вставить("ИспользуетсяДоставка",           ИспользуетсяДоставка);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Объект.БанковскийСчет);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                   Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("ТаблицаОснованийДляПечати",      ТаблицаОснованийДляПечати);

	Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика")
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		Или Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.РСК_ПеревозчикДоКлиента")
		Или Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.РСК_ПеревозчикДоПВЗ")
		#КонецВставки
		Или Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу") Тогда

		СтруктураПараметров.Вставить("ПеревозчикПартнер", Объект.ПеревозчикПартнер);

	КонецЕсли;

	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма, , , , Неопределено,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("УправлениеСозданиемТранспортныхНакладных")
Процедура РСК_УправлениеСозданиемТранспортныхНакладных(ЭтоИнициализация)

	ИспользоватьТТН = ПолучитьФункциональнуюОпцию("ИспользоватьТТН");
	//++ Локализация
	Если НЕ ИспользоватьТТН Тогда
		СоздаватьТранспортнуюНакладную =Ложь;
	ИначеЕсли ЭтоИнициализация Тогда
		СоздаватьТранспортнуюНакладную = Объект.СоздаватьТранспортнуюНакладнуюПоУмолчанию;
	КонецЕсли; 

	ДокументыСозданы             = Ложь;
	ТранспортныеНакладныеСозданы = Ложь;

	Для Каждого Документ Из Объект.Документы Цикл 
		Если ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда
			ТранспортныеНакладныеСозданы = Истина;
		КонецЕсли;
		Если ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			Или ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда

			ДокументыСозданы = Истина;

		КонецЕсли;
	КонецЦикла;

	Если (Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз
		#Вставка
	//++ РС Консалт: Минаков А.С. Задача 22756
		Или Объект.СпособДоставки = Перечисления.СпособыДоставки.РСК_ПеревозчикДоКлиента
		Или Объект.СпособДоставки = Перечисления.СпособыДоставки.РСК_ПеревозчикДоПВЗ
		#КонецВставки
		Или Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика)
		И ДокументыСозданы Тогда

		Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка     = СоздаватьТранспортнуюНакладную
		И ТранспортныеНакладныеСозданы;
		Элементы.ОформленныеДокументыТранспортнаяНакладная.Доступность = Истина;

		Если СоздаватьТранспортнуюНакладную
			И НЕ ТранспортныеНакладныеСозданы Тогда

			УправлениеТранспортнымиНакладными();
			Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка = Ложь;

		КонецЕсли;
	Иначе
		Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка     = Ложь;
		Элементы.ОформленныеДокументыТранспортнаяНакладная.Доступность = Ложь;
	КонецЕсли;
	//-- Локализация

	Элементы.ОформленныеДокументыТранспортнаяНакладная.Видимость = ИспользоватьТТН;

КонецПроцедуры
