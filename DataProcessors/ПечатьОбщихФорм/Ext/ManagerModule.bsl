
&ИзменениеИКонтроль("СформироватьПечатнуюФормуУПД")
Функция РСК_СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПД";

	СтруктураТиповНаПечать               = Новый Структура;
	МассивСчетФактураВыданный            = Новый Массив; // Массив из ДокументСсылка
	МассивСчетФактураКомиссионеру        = Новый Массив; // Массив из ДокументСсылка
	МассивСчетФактураПолученный          = Новый Массив;
	ОснованияНаРеализацию                = Новый Массив;
	ОснованияКомиссионеру                = Новый Массив;
	ОснованияСчетФактураПолученный       = Новый Массив;
	ДокументыБезВыданногоСчетаФактуры    = Новый Массив; // Массив из ДокументСсылка
	ДокументыБезСчетаФактурыКомиссионеру = Новый Массив;
	ДокументыБезПолученногоСчетаФактуры  = Новый Массив; // Массив из ДокументСсылка
	ОснованияОтчетовНаЗакупкуТовары      = Новый Массив;

	Если ПараметрыПечати = Неопределено Тогда
		ПараметрыПечати = Новый Структура;
	КонецЕсли;

	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);

		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;

		Если ИмяОбъекта = "СчетФактураВыданный" Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);

		ИначеЕсли ИмяОбъекта = "СчетФактураКомиссионеру" Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, СтруктураОбъектов.Значение);

		ИначеЕсли ИмяОбъекта = "ОтчетКомиссионера" Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияКомиссионеру, СтруктураОбъектов.Значение);

		ИначеЕсли ИмяОбъекта = "ОтчетКомитентуОЗакупках"
			И Не ПараметрыПечати = Неопределено И ПараметрыПечати.Свойство("ВыводитьТовары") И ПараметрыПечати.ВыводитьТовары Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияОтчетовНаЗакупкуТовары, СтруктураОбъектов.Значение);

		ИначеЕсли ИмяОбъекта = "ОтчетКомитенту"
			И Не ПараметрыПечати = Неопределено И ПараметрыПечати.Свойство("ВыводитьТовары") И ПараметрыПечати.ВыводитьТовары Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыБезВыданногоСчетаФактуры, СтруктураОбъектов.Значение);

		Иначе

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);

		КонецЕсли;

		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
			И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);

		КонецЕсли;

	КонецЦикла;

	Если ОснованияНаРеализацию.Количество() > 0 Тогда

		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(ОснованияНаРеализацию);

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);

		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если ОснованияОтчетовНаЗакупкуТовары.Количество() > 0 Тогда

		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(ОснованияОтчетовНаЗакупкуТовары,,,Истина);

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);

		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если ОснованияКомиссионеру.Количество() > 0 Тогда

		РезультатАнализа = Документы.СчетФактураКомиссионеру.ПолучитьСчетаФактурыНаПечать(ОснованияКомиссионеру);

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, РезультатАнализа.СчетаФактурыНаПечать, Истина);

		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда

		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(ОснованияСчетФактураПолученный);

		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);

		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезПолученногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;

	Если МассивСчетФактураКомиссионеру.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураКомиссионеру", МассивСчетФактураКомиссионеру);
	КонецЕсли;

	Для Каждого Документ Из ДокументыБезВыданногоСчетаФактуры Цикл

		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			МассивДокументовДляСтруктуры = СтруктураТиповНаПечать[ИмяОбъекта]; // Массив из ДокументСсылка
			МассивДокументовДляСтруктуры.Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;

	КонецЦикла;

	НомерТипаДокумента = 0;

	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Истина);

		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);

		Если ДанныеДляПечати <> Неопределено Тогда
			#Удаление
			ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
			#КонецУдаления
			#Вставка
			//++ РС Консалт: Минаков А.С. Задача 20226
			РС_ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати);
			//++ РС Консалт: Минаков А.С. Задача 20226
			#КонецВставки
		КонецЕсли;

	КонецЦикла;

	СтруктураТиповНаПечать.Очистить();
	Для Каждого Документ Из ДокументыБезПолученногоСчетаФактуры Цикл

		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			МассивДокументовДляСтруктуры = СтруктураТиповНаПечать[ИмяОбъекта]; // Массив из ДокументСсылка
			МассивДокументовДляСтруктуры.Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;

	КонецЦикла;

	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл

		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;

		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Ложь);
		ПараметрыПечати.Вставить("НеВыводитьОсновнойУПД", Истина);

		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		#Удаление
		ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		#КонецУдаления
		#Вставка
		//++ РС Консалт: Минаков А.С. Задача 20226
		РС_ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати);
		//++ РС Консалт: Минаков А.С. Задача 20226
		#КонецВставки

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

Процедура РС_ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати)
		
	//++ РС Консалт: Минаков А.С. Задача 20226
	Копировать = ПараметрыПечати.Свойство("РС_Копии");
	ЧислоЭкземплеров = 1;
	Если Копировать Тогда
		ЧислоЭкземплеров = ПараметрыПечати.РС_Копии
	КонецЕсли;
	
	Если Копировать Тогда
		ИспользуемыйТабличныйДокумент = Новый ТабличныйДокумент;
	Иначе
		ИспользуемыйТабличныйДокумент = ТабличныйДокумент;
	КонецЕсли;
	//++ РС Консалт: Минаков А.С. Задача 20226
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
	И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	ИспользоватьПечатныеФормыСФ2_5 = Ложь;

	МакетУПД = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_ru");
	МакетУПД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_625_ru");
	МакетУПД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент981_ru");
	МакетУПД_534 = УправлениеПечатью.МакетПечатнойФормы(
	"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент534_ru");
	МакетУПД_534_2_5 = УправлениеПечатью.МакетПечатнойФормы(
	"ОбщийМакет.ПФ_MXL_УниверсальныйПередаточныйДокумент534");
	МакетУПД_534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы(
	"ОбщийМакет.ПФ_MXL_УниверсальныйПередаточныйДокумент534Прослеж");

	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
	ОпцииПечати.Вставить("ИспользоватьПечатныеФормыСФ2_5", ИспользоватьПечатныеФормыСФ2_5);

	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") Тогда
		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаКонтрагентов = Неопределено;
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаОснований = Неопределено;
	КонецЕсли;
	ПрослеживаемыеТовары = Неопределено;
	ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Ложь;
	Если ДанныеДляПечати.Свойство("Прослеживаемость") Тогда
		ПрослеживаемыеТовары = ДанныеДляПечати.Прослеживаемость.Выгрузить();
		Если ПрослеживаемыеТовары.Количество() > 0 Тогда
			ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Истина;
		КонецЕсли;
	КонецЕсли;

	ЕстьПостановление534 = ЛОЖЬ;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;

	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл

		Если ДанныеПечати.СтатусУПД = 2
			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			И НЕ ДанныеПечати.ЭтоПередачаНаКомиссию
			И ДанныеПечати.ТребуетсяНаличиеСФ Тогда

			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 не введен %2';
			|en = '%2 is not entered for document %1'"),
			ДанныеПечати.Ссылка,
			ДанныеПечати.ПредставлениеДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка,
			,
			"ТекстСчетФактура");

			Продолжить;
		КонецЕсли;

		Если ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
				Макет = ?(ЗначениеЗаполнено(ДанныеПечати.ЕстьПрослеживаемыеТовары) И ДанныеПечати.ЕстьПрослеживаемыеТовары Или ЕстьПрослеживаемыеТоварыВТабличнойЧасти, МакетУПД_534Прослеж_2_5, МакетУПД_534_2_5);
			Иначе
				Макет = МакетУПД_534;
			КонецЕсли;
			ЕстьПостановление534 = Истина;
		ИначеЕсли ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_981;
			ЕстьПостановление981 = Истина;
		ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_625;
			ЕстьПостановление1137_625 = Истина;
		Иначе
			Макет = МакетУПД;
			ЕстьПостановление1137 = Истина;
		КонецЕсли;
		Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

		Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда

			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
			|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.';
			|en = 'Cannot print universal transfer documents
			|generated both before and after the commencement date of RF Government decree No.625 dated 05/25/2017 at the same time'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);

			ТабличныйДокумент.Очистить();
			Прервать;

		КонецЕсли;

		Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда

			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
			|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.';
			|en = 'Cannot print universal transfer documents
			|generated both before and after the commencement date of RF Government decree No.981 dated 08/19/2017 at the same time'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);

			ТабличныйДокумент.Очистить();
			Прервать;

		ИначеЕсли (ЕстьПостановление1137_625 Или ЕстьПостановление1137 Или ЕстьПостановление981)
			И ЕстьПостановление534 Тогда

			ТекстСообщения = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
			|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.';
			|en = 'Cannot simultaneously print universal transfer documents
			|generated before and after the commencement date of RF Government decree No.534 dated 04/02/2021'");

			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеПечати.Ссылка);

			ТабличныйДокумент.Очистить();
			Прервать;

		КонецЕсли;
		
		//++ РС Консалт: Минаков А.С. Задача 20226
		Если Копировать Тогда
			ИспользуемыйТабличныйДокумент.Очистить();
		КонецЕсли;	
		//++ РС Консалт: Минаков А.С. Задача 20226

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		Если ДанныеДляПечати.Свойство("РезультатПоПоставщикам")
			И ДанныеПечати.ПеревыставленныйСчетФактура Тогда
			ВыборкаПоставщиков = ДанныеДляПечати.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;


		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		//
		//ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка,
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ИспользуемыйТабличныйДокумент, Макет, ОбластьШапка,
		//
		ДанныеПечати.Ссылка);

		ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов, ОбластьШапка, ВыборкаПоставщиков, ОпцииПечати);

		НомерСтраницы = 1;

		// Инициализация итогов в документе
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ИтоговыеСуммы = СтруктураИтоговыеСуммы2_5();
		Иначе
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		КонецЕсли;

		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;

		// Выводим многострочную часть документа
		ОбластьСтрокаСтандарт = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ОбластьПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
		КонецЕсли;

		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ЗаполнитьРеквизитыПодвалаУПД2_5(ОбластьПодвал, ОбластьПодвалНакладной, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		Иначе
			ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвал, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		КонецЕсли;

		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);

		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("Строка");
			Иначе
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
			КонецЕсли;
		КонецЕсли;

		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981 Или ЕстьПостановление534);

		ОперацияОблагаетсяНДСУПокупателя = Ложь;
		Если ДанныеПечати.СтатусУПД = 1
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			ОперацияОблагаетсяНДСУПокупателя = Истина;
		КонецЕсли;

		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = 0;
		Пока СтрокаТовары.Следующий() Цикл
			Если Не НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		СтрокаТовары.Сбросить();

		Если ЕстьПостановление534 Тогда
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьШапка.Параметры.ДокументыОбОтгрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '№ п/п %1 № %2 от %3';
				|en = 'Item No. %1 # %2 of %3'"),
				?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
				ОбластьШапка.Параметры.Номер,
				ОбластьШапка.Параметры.Дата);
			Иначе
				ОбластьШапка.Параметры.ПоДокументуОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '№ п/п %1 № %2 от %3';
				|en = 'Item No. %1 # %2 of %3'"),
				?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
				ОбластьШапка.Параметры.Номер,
				ОбластьШапка.Параметры.Дата);
			КонецЕсли;
		КонецЕсли;
		//++ РС Консалт: Минаков А.С. Задача 20226
		//ТабличныйДокумент.Вывести(ОбластьШапка);
		ИспользуемыйТабличныйДокумент.Вывести(ОбластьШапка);
		//++ РС Консалт: Минаков А.С. Задача 20226

		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		//++ РС Консалт: Минаков А.С. Задача 20226
		//ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		ИспользуемыйТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		//++ РС Консалт: Минаков А.С. Задача 20226

		ТолькоСтавкаБезНДС = Истина;
		НомерСтроки = 0;
		Пока СтрокаТовары.Следующий() Цикл

			Если ПрослеживаемыеТовары <> Неопределено Тогда
				ПрослеживаемыеТоварыСтрокаТовары = ПрослеживаемыеТовары.НайтиСтроки(Новый Структура("НомерСтрокиСФ", СтрокаТовары.НомерСтроки));
			Иначе
				ПрослеживаемыеТоварыСтрокаТовары = Неопределено;
			КонецЕсли;

			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
				ИЛИ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
					И СтрокаТовары.Покупатель <> НЕОПРЕДЕЛЕНО Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если СтрокаТовары.Количество = 0 
				И СтрокаТовары.СуммаСНДС = 0 Тогда
				Продолжить;
			КонецЕсли;

			Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаНабор;
			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаКомплектующие;
			Иначе
				ОбластьСтрока = ОбластьСтрокаСтандарт;
			КонецЕсли;

			ПараметрыПечати = Новый Структура("Корректировочный,СчетФактураНаАванс", Ложь, Ложь);

			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары, ОбластьСтрока, Неопределено, ПараметрыПечати, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				Иначе
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, Неопределено, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				КонецЕсли;
			Иначе
				НомерСтроки = НомерСтроки + 1;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары, ОбластьСтрока, НомерСтроки, ПараметрыПечати, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				Иначе
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				КонецЕсли;
				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
			КонецЕсли;

			СтруктураПараметров = Новый Структура;
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
				|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					СтруктураПараметров.Вставить("Всего", "--");
				Иначе
					СтруктураПараметров.Вставить("СуммаСНДС", "--");
				КонецЕсли;
				ТолькоСтавкаБезНДС = Ложь;
			ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
				|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
				СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
				|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
			ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
				СтруктураПараметров.Вставить("СуммаНДС", 0);
				ТолькоСтавкаБезНДС = Ложь;
			Иначе
				ТолькоСтавкаБезНДС = Ложь;
			КонецЕсли;
			Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без
					|акциза';
					|en = 'without
					|excise duty'", Метаданные.Языки.Русский.КодЯзыка));
				Иначе
					СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
					|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
				КонецЕсли;
			КонецЕсли;
			ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);

			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);

			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьИтого);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
				КонецЕсли;
			КонецЕсли;
			
			//++ РС Консалт: Минаков А.С. Задача 20226
			//Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			Если НомерСтроки <> 1 И НЕ ИспользуемыйТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			//++ РС Консалт: Минаков А.С. Задача 20226
				
				НомерСтраницы = НомерСтраницы + 1;
				//++ РС Консалт: Минаков А.С. Задача 20226
				//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
				ИспользуемыйТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				//++ РС Консалт: Минаков А.С. Задача 20226

				ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
				Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
					ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
				Иначе
					ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
				КонецЕсли;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
				Иначе
					ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
					ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
				КонецЕсли;
				
				//++ РС Консалт: Минаков А.С. Задача 20226
				//ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
				//ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				ИспользуемыйТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
				ИспользуемыйТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				//++ РС Консалт: Минаков А.С. Задача 20226

			КонецЕсли;
			
			//++ РС Консалт: Минаков А.С. Задача 20226
			//ТабличныйДокумент.Вывести(ОбластьСтрока);
			ИспользуемыйТабличныйДокумент.Вывести(ОбластьСтрока);
			//++ РС Консалт: Минаков А.С. Задача 20226

			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары);
				Иначе
					РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Выводим итоги по документу
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
		ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));

		Если ТолькоСтавкаБезНДС Тогда
			ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
			|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
		КонецЕсли;

		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ИтоговыеСуммы.Вставить("ИтогоВсего", "--");
				ИтоговыеСуммы.Вставить("ИтогоВсегоНаСтранице", "--");
			Иначе
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
			КонецЕсли;
		КонецЕсли;

		ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
		ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
		//++ РС Консалт: Минаков А.С. Задача 20226
		//ТабличныйДокумент.Вывести(ОбластьИтого);
		ИспользуемыйТабличныйДокумент.Вывести(ОбластьИтого);
		//++ РС Консалт: Минаков А.С. Задача 20226

		// Если строка таблицы одна, то проверим поместится ли все на одной странице
		Если КоличествоСтрок = 1 Тогда
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
			КонецЕсли;
			//++ РС Консалт: Минаков А.С. Задача 20226
			//Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			Если Не ИспользуемыйТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			//++ РС Консалт: Минаков А.С. Задача 20226		
				НомерСтраницы = НомерСтраницы + 1;
			КонецЕсли;
		КонецЕсли;

		КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на %1 %2';
		|en = 'Document is created on %1 %2'", Метаданные.Языки.Русский.КодЯзыка),
		НомерСтраницы,
		ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
		НСтр("ru = 'листе';
		|en = 'sheet'", Метаданные.Языки.Русский.КодЯзыка),
		НСтр("ru = 'листах';
		|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка),
		НСтр("ru = 'листах';
		|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			СтруктураПараметров = Новый Структура("КоличествоЛистов", КоличествоСтраниц);
		Иначе
			СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
		КонецЕсли;
		ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);

		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			УдалитьВсеОбластиФаксимиле(ОбластьПодвал);
			УдалитьВсеОбластиФаксимиле(ОбластьПодвалНакладной);
		КонецЕсли;
		
		//++ РС Консалт: Минаков А.С. Задача 20226
		//ТабличныйДокумент.Вывести(ОбластьПодвал);
		ИспользуемыйТабличныйДокумент.Вывести(ОбластьПодвал);
		//++ РС Консалт: Минаков А.С. Задача 20226
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			//++ РС Консалт: Минаков А.С. Задача 20226
			//ТабличныйДокумент.Вывести(ОбластьПодвалНакладной);
			ИспользуемыйТабличныйДокумент.Вывести(ОбластьПодвалНакладной);
			//++ РС Консалт: Минаков А.С. Задача 20226
		КонецЕсли;
		
		//++ РС Консалт: Минаков А.С. Задача 20226
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
		Если Копировать Тогда
			
			Для Сч = 1 По ЧислоЭкземплеров Цикл
				
				ТабличныйДокумент.Вывести(ИспользуемыйТабличныйДокумент);
				
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
				ДанныеПечати.Ссылка);
				
				Если Не Сч = ЧислоЭкземплеров Тогда
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
					
				КонецЕсли;
		
			КонецЦикла;
			
		Иначе
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ИспользуемыйТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеПечати.Ссылка);
		КонецЕсли;	
		//++ РС Консалт: Минаков А.С. Задача 20226

	КонецЦикла;

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьТабличныйДокументУПД")
Процедура РСК_ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	#Вставка
	//++ РС Консалт: Минаков А.С. Задача 20226
	//Контроль изменений для процедуры РС_ЗаполнитьТабличныйДокументУПД 
	//++ РС Консалт: Минаков А.С. Задача 20226
	#КонецВставки
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	ИспользоватьПечатныеФормыСФ2_5 = Ложь;
	
	МакетУПД = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_ru");
	МакетУПД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_625_ru");
	МакетУПД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент981_ru");
	МакетУПД_534 = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент534_ru");
	МакетУПД_534_2_5 = УправлениеПечатью.МакетПечатнойФормы(
						"ОбщийМакет.ПФ_MXL_УниверсальныйПередаточныйДокумент534");
	МакетУПД_534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы(
						"ОбщийМакет.ПФ_MXL_УниверсальныйПередаточныйДокумент534Прослеж");
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
	ОпцииПечати.Вставить("ИспользоватьПечатныеФормыСФ2_5", ИспользоватьПечатныеФормыСФ2_5);
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") Тогда
		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаКонтрагентов = Неопределено;
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаОснований = Неопределено;
	КонецЕсли;
	ПрослеживаемыеОС = Неопределено;
	ПрослеживаемыеКомплектующие = Неопределено;
	ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Ложь;
	Если ДанныеДляПечати.Свойство("Прослеживаемость") Тогда
		ПрослеживаемыеОС = ДанныеДляПечати.Прослеживаемость.Выгрузить();
		Если ПрослеживаемыеОС.Количество() > 0 Тогда
			ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Истина;
		Иначе
			ПрослеживаемыеОС = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("ПрослеживаемыеКомплектующие") Тогда
		ПрослеживаемыеКомплектующие = ДанныеДляПечати.ПрослеживаемыеКомплектующие;
		Если ПрослеживаемыеКомплектующие.Количество() > 0 Тогда
			ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Истина;
		Иначе
			ПрослеживаемыеКомплектующие = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПостановление534 = ЛОЖЬ;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ДанныеПечати.СтатусУПД = 2
			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			И НЕ ДанныеПечати.ЭтоПередачаНаКомиссию
			И ДанныеПечати.ТребуетсяНаличиеСФ Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен %2';
					|en = '%2 is not entered for document %1'"),
				ДанныеПечати.Ссылка,
				ДанныеПечати.ПредставлениеДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка,
				,
				"ТекстСчетФактура");
				
			Продолжить;
		КонецЕсли;
		
		Если ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
				Макет = ?(ЗначениеЗаполнено(ДанныеПечати.ЕстьПрослеживаемыеТовары) И ДанныеПечати.ЕстьПрослеживаемыеТовары Или ЕстьПрослеживаемыеТоварыВТабличнойЧасти, МакетУПД_534Прослеж_2_5, МакетУПД_534_2_5);
			Иначе
				Макет = МакетУПД_534;
			КонецЕсли;
			ЕстьПостановление534 = Истина;
		ИначеЕсли ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_981;
			ЕстьПостановление981 = Истина;
		ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_625;
			ЕстьПостановление1137_625 = Истина;
		Иначе
			Макет = МакетУПД;
			ЕстьПостановление1137 = Истина;
		КонецЕсли;
		Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
		
		Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
				|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.';
				|en = 'Cannot print universal transfer documents
				|generated both before and after the commencement date of RF Government decree No.625 dated 05/25/2017 at the same time'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
				|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.';
				|en = 'Cannot print universal transfer documents
				|generated both before and after the commencement date of RF Government decree No.981 dated 08/19/2017 at the same time'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		ИначеЕсли (ЕстьПостановление1137_625 Или ЕстьПостановление1137 Или ЕстьПостановление981)
				И ЕстьПостановление534 Тогда
			
			ТекстСообщения = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
			|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.';
			|en = 'Cannot simultaneously print universal transfer documents
			|generated before and after the commencement date of RF Government decree No.534 dated 04/02/2021'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ДанныеДляПечати.Свойство("РезультатПоПоставщикам")
			И ДанныеПечати.ПеревыставленныйСчетФактура Тогда
			ВыборкаПоставщиков = ДанныеДляПечати.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;
		
			
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка,
			ДанныеПечати.Ссылка);
		
		ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов, ОбластьШапка, ВыборкаПоставщиков, ОпцииПечати);
		
		НомерСтраницы = 1;
		
		// Инициализация итогов в документе
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ИтоговыеСуммы = СтруктураИтоговыеСуммы2_5();
		Иначе
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		КонецЕсли;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьСтрокаСтандарт = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ОбластьПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
		КонецЕсли;
		
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ЗаполнитьРеквизитыПодвалаУПД2_5(ОбластьПодвал, ОбластьПодвалНакладной, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		Иначе
			ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвал, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		КонецЕсли;
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("Строка");
			Иначе
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
			КонецЕсли;
		КонецЕсли;
		
		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981 Или ЕстьПостановление534);
		
		ОперацияОблагаетсяНДСУПокупателя = Ложь;
		Если ДанныеПечати.СтатусУПД = 1
		И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			ОперацияОблагаетсяНДСУПокупателя = Истина;
		КонецЕсли;
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = 0;
		Пока СтрокаТовары.Следующий() Цикл
			Если Не НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		СтрокаТовары.Сбросить();
		
		Если ЕстьПостановление534 Тогда
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьШапка.Параметры.ДокументыОбОтгрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ п/п %1 № %2 от %3';
							|en = 'Item No. %1 # %2 of %3'"),
						?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
						ОбластьШапка.Параметры.Номер,
						ОбластьШапка.Параметры.Дата);
			Иначе
				ОбластьШапка.Параметры.ПоДокументуОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ п/п %1 № %2 от %3';
							|en = 'Item No. %1 # %2 of %3'"),
						?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
						ОбластьШапка.Параметры.Номер,
						ОбластьШапка.Параметры.Дата);
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		ТолькоСтавкаБезНДС = Истина;
		НомерСтроки = 0;
		Пока СтрокаТовары.Следующий() Цикл
			
				Если ПрослеживаемыеОС <> Неопределено Тогда
					ПрослеживаемыеТоварыСтрокаТовары = ПрослеживаемыеОС.НайтиСтроки(Новый Структура("НомерСтрокиСФ", СтрокаТовары.НомерСтроки));
				ИначеЕсли ПрослеживаемыеКомплектующие <> Неопределено Тогда
					ПрослеживаемыеТоварыСтрокаТовары = ПрослеживаемыеКомплектующие.НайтиСтроки(Новый Структура("НомерГТД", СтрокаТовары.НомерГТД));
				Иначе
					ПрослеживаемыеТоварыСтрокаТовары = Неопределено;
				КонецЕсли;
			
			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
				ИЛИ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
					И СтрокаТовары.Покупатель <> НЕОПРЕДЕЛЕНО Тогда
						Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТовары.Количество = 0 
				И СтрокаТовары.СуммаСНДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаНабор;
			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаКомплектующие;
			Иначе
				ОбластьСтрока = ОбластьСтрокаСтандарт;
			КонецЕсли;
			
			ПараметрыПечати = Новый Структура("Корректировочный,СчетФактураНаАванс", Ложь, Ложь);
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары, ОбластьСтрока, Неопределено, ПараметрыПечати, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				Иначе
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, Неопределено, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				КонецЕсли;
			Иначе
				НомерСтроки = НомерСтроки + 1;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары, ОбластьСтрока, НомерСтроки, ПараметрыПечати, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				Иначе
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				КонецЕсли;
				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
																|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					СтруктураПараметров.Вставить("Всего", "--");
				Иначе
					СтруктураПараметров.Вставить("СуммаСНДС", "--");
				КонецЕсли;
				ТолькоСтавкаБезНДС = Ложь;
			ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
																|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
				СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
																|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
			ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
				СтруктураПараметров.Вставить("СуммаНДС", 0);
				ТолькоСтавкаБезНДС = Ложь;
			Иначе
				ТолькоСтавкаБезНДС = Ложь;
			КонецЕсли;
			Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без
					|акциза';
					|en = 'without
					|excise duty'", Метаданные.Языки.Русский.КодЯзыка));
				Иначе
					СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
																|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
				КонецЕсли;
			КонецЕсли;
			ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьИтого);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
				КонецЕсли;
			КонецЕсли;
			
			Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
				Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
					ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
				Иначе
					ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
				КонецЕсли;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
				Иначе
					ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
					ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары);
				Иначе
					РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Выводим итоги по документу
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
							ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
		
		Если ТолькоСтавкаБезНДС Тогда
			ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
												|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
		КонецЕсли;
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ИтоговыеСуммы.Вставить("ИтогоВсего", "--");
				ИтоговыеСуммы.Вставить("ИтогоВсегоНаСтранице", "--");
			Иначе
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
			КонецЕсли;
		КонецЕсли;
		
		ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
		ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		// Если строка таблицы одна, то проверим поместится ли все на одной странице
		Если КоличествоСтрок = 1 Тогда
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
			КонецЕсли;
			Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				НомерСтраницы = НомерСтраницы + 1;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ составлен на %1 %2';
				|en = 'Document is created on %1 %2'", Метаданные.Языки.Русский.КодЯзыка),
			НомерСтраницы,
			ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'листе';
					|en = 'sheet'", Метаданные.Языки.Русский.КодЯзыка),
				НСтр("ru = 'листах';
					|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка),
				НСтр("ru = 'листах';
					|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			СтруктураПараметров = Новый Структура("КоличествоЛистов", КоличествоСтраниц);
		Иначе
			СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
		КонецЕсли;
		ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
		
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			УдалитьВсеОбластиФаксимиле(ОбластьПодвал);
			УдалитьВсеОбластиФаксимиле(ОбластьПодвалНакладной);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ТабличныйДокумент.Вывести(ОбластьПодвалНакладной);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеПечати.Ссылка);
			
	КонецЦикла;
	
КонецПроцедуры

