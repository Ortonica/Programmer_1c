
&НаКлиенте
Процедура РСК_СписокСтандартныйПоискНоменклатураПриАктивизацииСтрокиПосле(Элемент)
	ОбработкаНаличияАналогов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РСК_СписокСтандартныйПоискХарактеристикиПриАктивизацииСтрокиПосле(Элемент)
	ОбработкаНаличияАналогов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РСК_СписокРасширенныйПоискНоменклатураПриАктивизацииСтрокиПосле(Элемент)
	ОбработкаНаличияАналогов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РСК_СписокРасширенныйПоискХарактеристикиПриАктивизацииСтрокиПосле(Элемент)
	ОбработкаНаличияАналогов(Элемент);
КонецПроцедуры   

&НаКлиенте
Процедура ОбработкаНаличияАналогов(Элемент)   
	
	РС_ТаблицаАналогов.Очистить();
	
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ Элемент.ТекущиеДанные.РСК_ДоступноАналогов = 0 Тогда
		Элементы.РС_ТаблицаАналогов.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбработкаНаличияАналоговНаСервере(Элемент.ТекущиеДанные.Номенклатура, ?(СтрНайти(Элемент.Имя, "ПоискНоменклатура") > 0, ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"), Элемент.ТекущиеДанные.Характеристика));
	
	Элементы.РС_ТаблицаАналогов.Видимость = РС_ТаблицаАналогов.Количество() > 0;	
		
КонецПроцедуры    

&НаСервере
Процедура ОбработкаНаличияАналоговНаСервере(РС_Номенклатура, РС_Характеристика) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РСК_АналогиИЗамены.ИсточникНоменклатура КАК Номенклатура,
	               |	РСК_АналогиИЗамены.ИсточникХарактеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	РегистрСведений.РСК_АналогиИЗамены КАК РСК_АналогиИЗамены
	               |ГДЕ
	               |	РСК_АналогиИЗамены.ПриемникНоменклатура = &Номенклатура
	               |	И РСК_АналогиИЗамены.ПриемникХарактеристика = &Характеристика
	               |	И РСК_АналогиИЗамены.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.РСК_АналогиИЗаменыВидыСвязи.Аналог)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РСК_АналогиИЗамены.ПриемникНоменклатура,
	               |	РСК_АналогиИЗамены.ПриемникХарактеристика
	               |ИЗ
	               |	РегистрСведений.РСК_АналогиИЗамены КАК РСК_АналогиИЗамены
	               |ГДЕ
	               |	РСК_АналогиИЗамены.ИсточникНоменклатура = &Номенклатура
	               |	И РСК_АналогиИЗамены.ИсточникХарактеристика = &Характеристика
	               |	И РСК_АналогиИЗамены.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.РСК_АналогиИЗаменыВидыСвязи.Аналог)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РСК_АналогиИЗамены1.ИсточникНоменклатура,
	               |	РСК_АналогиИЗамены1.ИсточникХарактеристика
	               |ИЗ
	               |	РегистрСведений.РСК_АналогиИЗамены КАК РСК_АналогиИЗамены
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РСК_АналогиИЗамены КАК РСК_АналогиИЗамены1
	               |		ПО РСК_АналогиИЗамены.ПриемникНоменклатура = РСК_АналогиИЗамены1.ПриемникНоменклатура
	               |			И РСК_АналогиИЗамены.ПриемникХарактеристика = РСК_АналогиИЗамены1.ПриемникХарактеристика
	               |			И РСК_АналогиИЗамены.ВидСвязи = РСК_АналогиИЗамены1.ВидСвязи
	               |ГДЕ
	               |	РСК_АналогиИЗамены.ИсточникНоменклатура = &Номенклатура
	               |	И РСК_АналогиИЗамены.ИсточникХарактеристика = &Характеристика
	               |	И РСК_АналогиИЗамены.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.РСК_АналогиИЗаменыВидыСвязи.Аналог)
	               |	И НЕ(РСК_АналогиИЗамены1.ИсточникНоменклатура = &Номенклатура
	               |				И РСК_АналогиИЗамены1.ИсточникХарактеристика = &Характеристика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ.Номенклатура КАК Номенклатура,
	               |	ВТ.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ2
	               |ИЗ
	               |	ВТ КАК ВТ
	               |ГДЕ
	               |	(ВТ.Номенклатура <> &Номенклатура
	               |			ИЛИ ВТ.Характеристика <> &Характеристика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ2.Номенклатура КАК Номенклатура,
	               |	ВТ2.Характеристика КАК Характеристика,
	               |	СУММА(РаспределениеЗапасов.Свободно) КАК Доступно,
	               |	спрНоменклатура.Наименование КАК Наименование,
	               |	ХарактеристикиНоменклатуры.Наименование КАК Наименование1
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	               |		ПО (РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе))
	               |			И (РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	               |			И (РаспределениеЗапасов.Склад = &Склад)
	               |			И (РаспределениеЗапасов.Номенклатура = ВТ2.Номенклатура)
	               |			И (РаспределениеЗапасов.Характеристика = ВТ2.Характеристика)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	               |		ПО ВТ2.Номенклатура = спрНоменклатура.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО ВТ2.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ2.Номенклатура,
	               |	ВТ2.Характеристика,
	               |	спрНоменклатура.Наименование,
	               |	ХарактеристикиНоменклатуры.Наименование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	спрНоменклатура.Наименование,
	               |	ХарактеристикиНоменклатуры.Наименование"; 
	
	Если Склады.Количество() > 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Склад", "В(&Склад)");
		Запрос.УстановитьПараметр("Склад", Склады);
	Иначе
		Запрос.УстановитьПараметр("Склад", Склад);	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", РС_Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", РС_Характеристика);
	
	РС_ТаблицаАналогов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_РС_ТаблицаАналоговВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяСобытия = "Обработка.ПодборТоваровВДокументПродажи.Форма.Событие.ПодборТаблица" + ?(ЗначениеЗаполнено(Элементы.РС_ТаблицаАналогов.ТекущиеДанные.Характеристика), "Характеристики", "Номенклатура") + "ВыборЗавершение";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыТовара = РС_ПолучитьПараметрыТовараПередДобавлениеВКорзину(ПараметрыФормы, Элементы.РС_ТаблицаАналогов.ТекущиеДанные.Номенклатура, Элементы.РС_ТаблицаАналогов.ТекущиеДанные.Характеристика);
		
	ДобавитьВКорзину(ПараметрыТовара, ПараметрыФормы);
	
КонецПроцедуры  

&НаСервере
Функция РС_ПолучитьПараметрыТовараПередДобавлениеВКорзину(ПараметрыФормы, РС_Номенклатура, РС_Характеристика)
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных(); 
	СхемаКомпоновки = Элементы.СписокРасширенныйПоискНоменклатура.ПолучитьИсполняемуюСхемуКомпоновкиДанных(); 
	НастройкиКомпоновки = Элементы.СписокРасширенныйПоискНоменклатура.ПолучитьИсполняемыеНастройкиКомпоновкиДанных(); 
	
	НастройкиКомпоновки.Структура[0].Выбор.Элементы.Очистить();
	Для Каждого ПолеСписка ИЗ НастройкиКомпоновки.Структура[0].Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если ПолеСписка.Папка Тогда
			Продолжить;
		КонецЕсли;
		ПолеДанных = НастройкиКомпоновки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДанных.Поле = Новый ПолеКомпоновкиДанных(Строка(ПолеСписка.Поле));
	КонецЦикла;
	Для Каждого СтрокаОтбора ИЗ НастройкиКомпоновки.Отбор.Элементы Цикл 		
		Если СтрокаОтбора.Представление = "ГруппаТолькоВНаличии" ИЛИ СтрокаОтбора.Представление = "ПоискПоПодстроке" Тогда
			СтрокаОтбора.Использование = Ложь;
		КонецЕсли;   		
	КонецЦикла; 
	Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = РС_Номенклатура;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывовода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывовода.Вывести(ПроцессорКомпоновки);
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара(РС_Номенклатура);
	ПараметрыТовара.ХарактеристикиИспользуются = Истина;  
	
	Результат = ?(Результат.Количество() > 0, Результат[0], ТекущаяСтрокаНоменклатуры);
	
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, Результат);
	ПараметрыТовара.ЭтоУслуга = Результат.ЭтоУслуга;	
	Если ТекущаяСтрокаНоменклатуры.ЭтоТовар И Склады.Количество() = 1 Тогда
		ПараметрыТовара.Склад = Склады.Получить(0).Значение;
	КонецЕсли;
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	ПараметрыФормыИТовараНаСервере(ПараметрыФормы, ПараметрыТовара);
	
	Если ЗначениеЗаполнено(РС_Характеристика) Тогда  
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных(); 
		СхемаКомпоновки = Элементы.СписокРасширенныйПоискХарактеристики.ПолучитьИсполняемуюСхемуКомпоновкиДанных(); 
		НастройкиКомпоновки = Элементы.СписокРасширенныйПоискХарактеристики.ПолучитьИсполняемыеНастройкиКомпоновкиДанных(); 
		
		НастройкиКомпоновки.Структура[0].Выбор.Элементы.Очистить();
		Для Каждого ПолеСписка ИЗ НастройкиКомпоновки.Структура[0].Выбор.ДоступныеПоляВыбора.Элементы Цикл
			Если ПолеСписка.Папка Тогда
				Продолжить;
			КонецЕсли;
			ПолеДанных = НастройкиКомпоновки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеДанных.Поле = Новый ПолеКомпоновкиДанных(Строка(ПолеСписка.Поле));
		КонецЦикла;
		Для Каждого СтрокаОтбора ИЗ НастройкиКомпоновки.Отбор.Элементы Цикл 		
			Если СтрокаОтбора.Представление = "ГруппаТолькоВНаличии" ИЛИ СтрокаОтбора.Представление = "ПоискПоПодстроке" Тогда
				СтрокаОтбора.Использование = Ложь;
			КонецЕсли;   		
		КонецЦикла;  
		ВидНом = РС_Номенклатура.ВидНоменклатуры;
		НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("Номенклатура").Значение = РС_Номенклатура;
		НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("ВидНоменклатуры").Значение = ВидНом;
		Если ВидНом.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
			НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("ВладелецХарактеристик").Значение = РС_Номенклатура;	
		Иначе
			НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("ВладелецХарактеристик").Значение = ВидНом;
		КонецЕсли;
		Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		Отбор.Использование = Истина;
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = РС_Характеристика;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывовода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		Результат = ПроцессорВывовода.Вывести(ПроцессорКомпоновки);
		
		Если Результат.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыТовара, Результат[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыТовара;
	
КонецФункции
