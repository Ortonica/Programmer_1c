//Исправоение типовой ощибки задвоенных данных при расщеплении одной строки контракта на несколько номенклатур учётной системы
//++ РС Консалт: Трофимов Евгений 05.09.2022 Задача 20114
//e1cib/data/Документ.Задание?ref=aef946d4c9837b064a03af9f48b8583c
&НаСервере
&ИзменениеИКонтроль("ЗаполнитьДеревоОбъектовЗакупки")
Процедура РСК_ЗаполнитьДеревоОбъектовЗакупки()
	
	ДеревоОбъектов = РеквизитФормыВЗначение("ДеревоОбъектовЗакупки");
	#Удаление
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Количество КАК Количество,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК Идентификатор,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Наименование КАК НаименованиеОбъекта,
	               |	ЕСТЬNULL(ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Количество, 0) КАК КоличествоНоменклатура,
	               |	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.НоменклатураПартнера КАК НоменклатураПартнера,
	               |	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура КАК Номенклатура,
	               |	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Характеристика КАК Характеристика,
	               |	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Упаковка КАК Упаковка,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.НомерСтроки КАК НомерСтроки,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмерения,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена КАК Цена,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Сумма КАК Сумма,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.КодТовараДляЕИС КАК КодТовараДляЕИС,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтавкаНДС КАК СтавкаНДС,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Тип КАК Тип,
	               |	&ТекстСтрокиКонтракта КАК ДанныеСтрокиКонтракта,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоЛекарственныйПрепарат КАК ЭтоЛекарственныйПрепарат,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроизводителя КАК СтранаПроизводителя,
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроисхождения КАК СтранаПроисхождения
	               |ИЗ
	               |	Справочник.ГосударственныеКонтракты.ОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтракты.НоменклатураОбъектовЗакупки КАК ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки
	               |		ПО ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор = ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Идентификатор
	               |ГДЕ
	               |	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &Ссылка
	               |	И ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Ссылка = &Ссылка";
	
	Запрос.Параметры.Вставить("ТекстСтрокиКонтракта", ТекстСсылкиДанныеСтрокиКонтракта());
	Запрос.Параметры.Вставить("Ссылка", Объект.Ссылка);
	
	ДеревоОбъектов = Запрос.Выполнить().Выгрузить();
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка")); 
	Описание = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип, МассивТипов);
	ДеревоОбъектов.Колонки.Добавить("Наименование", Описание);
	
	Для каждого ОбъектЗакупки Из ДеревоОбъектов Цикл
		ОбъектЗакупки.ДанныеСтрокиКонтракта = ТекстСсылкиДанныеСтрокиКонтракта();
		ОбъектЗакупки.Наименование = СокрЛП(ОбъектЗакупки.НаименованиеОбъекта);
	КонецЦикла;
	#КонецУдаления
	#Вставка
	//++ РС Консалт: Трофимов Евгений 05.09.2022 Задача 20114
	//e1cib/data/Документ.Задание?ref=aef946d4c9837b064a03af9f48b8583c
	ДеревоОбъектов.Строки.Очистить();
	Для Каждого СтрокаКонтракта Из Объект.ОбъектыЗакупки Цикл
		ВеткаКонтракта = ДеревоОбъектов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ВеткаКонтракта, СтрокаКонтракта);
		ВеткаКонтракта.ЕдиницаИзмерения = СтрокаКонтракта.ЕдиницаИзмеренияНаименование;
		ВеткаКонтракта.ДанныеСтрокиКонтракта = ТекстСсылкиДанныеСтрокиКонтракта();
		СтрокиОбъектовЗакупки = Объект.НоменклатураОбъектовЗакупки.НайтиСтроки(Новый Структура("Идентификатор", СтрокаКонтракта.Идентификатор));
		ТребуетсяРаспределить = СтрокаКонтракта.Количество;
		Для Каждого СтрокаОбъектаЗакупки Из СтрокиОбъектовЗакупки Цикл
			ВеткаОбъектаЗакупки = ВеткаКонтракта.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ВеткаОбъектаЗакупки, СтрокаОбъектаЗакупки);
			ТребуетсяРаспределить = ТребуетсяРаспределить - СтрокаОбъектаЗакупки.Количество;
			ВеткаКонтракта.НоменклатураПартнера = СтрокаОбъектаЗакупки.НоменклатураПартнера;
		КонецЦикла;
		Если ТребуетсяРаспределить > 0 Тогда
			ВеткаОбъектаЗакупки = ВеткаКонтракта.Строки.Добавить();
			ВеткаОбъектаЗакупки.Количество = ТребуетсяРаспределить;
		КонецЕсли;
	КонецЦикла;
	//-- КонецЗадачи 20114	
	#КонецВставки
	
	ЗначениеВРеквизитФормы(ДеревоОбъектов, "ДеревоОбъектовЗакупки");
	
	// Задаем ограничения типа для поля выбора номенклатуры.
	ЭлектронноеАктированиеЕИС.ЗаполнитьОграничениеТипаНоменклатуры(
		Элементы.ДеревоОбъектовНоменклатура, ТипНоменклатура);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
&ИзменениеИКонтроль("УправлениеФормой")
Процедура РСК_УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.НомерГОЗ.Видимость = Объект.ТипНаправленияДеятельности = ПредопределенноеЗначение("Перечисление.ТипыНаправленийДеятельности.КонтрактГОЗ");
	
	#Удаление
	ОбъектыЗакупкиЗаполнены = Форма.ДеревоОбъектовЗакупки.Количество() > 0;
	#КонецУдаления
	#Вставка
	//++ РС Консалт: Трофимов Евгений 05.09.2022 Задача 20114
	//e1cib/data/Документ.Задание?ref=aef946d4c9837b064a03af9f48b8583c
	ОбъектыЗакупкиЗаполнены = ОбъектыЗакупаЗаполлнены(Форма);
	//-- КонецЗадачи 20114	
	#КонецВставки
	Если ОбъектыЗакупкиЗаполнены Тогда
		Элементы.КнопкаПолучитьИзЕИС.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
		Элементы.ДеревоОбъектов.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
	Иначе
		Элементы.КнопкаПолучитьИзЕИС.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
		Элементы.ДеревоОбъектов.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;
	Элементы.КнопкаПолучитьИзЕИС.КнопкаПоУмолчанию = НЕ ОбъектыЗакупкиЗаполнены;
	
	Если ЗначениеЗаполнено(Форма.Объект.ВнутреннийИдентификаторЕИС) Тогда
		ИнтеграцияСЕИС = Истина;
	Иначе
		ИнтеграцияСЕИС = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаОбъектыЗакупки.Видимость = ИнтеграцияСЕИС; 
	Элементы.ГруппаЭтапыИсполнения.Видимость = ИнтеграцияСЕИС; 
	Элементы.ГруппаПрочее.Видимость = ИнтеграцияСЕИС;
	Элементы.ТекстЗагруженИзЕИС.Видимость = ИнтеграцияСЕИС;
	Элементы.КнопкаПолучитьИзЕИС.Видимость = ИнтеграцияСЕИС;
	Элементы.ФормаСохранитьКонтрактВФайл.Видимость = ИнтеграцияСЕИС;
	Элементы.ФормаПрочитатьИзФайла.Видимость = ИнтеграцияСЕИС;
	
	ОбработчикЭтоКонтрактГОЗПриИзменении(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектыЗакупаЗаполлнены(Форма)
	
	ДеревоОбъектовЗакупки = ДанныеФормыВЗначение(Форма.ДеревоОбъектовЗакупки, Тип("ДеревоЗначений"));
	Возврат ДеревоОбъектовЗакупки.Строки.Количество() > 0;
	
КонецФункции // ОбъектыЗакупкиЗаполлнены()

&НаКлиенте
Процедура РСК_ДеревоОбъектовВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	ИмяПоля = Сред(Поле.Имя, СтрДлина(Элемент.Имя)+1);
	Если ИмяПоля <> "ДанныеСтрокиКонтракта" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ДанныеСтроки[ИмяПоля]);
	КонецЕсли;
	
КонецПроцедуры

//++РС Консалт Назаров М.Ю. 10 ноября 2022 г. 5:16:41                  
&НаКлиенте
Процедура РСК_РС_ЗаполнитьНоменклатуруПартнераГосКонтрактаПосле(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПроХарактеристикуЗавершение", ЭтотОбъект), "Использовать 'Характеристику' при синхронизации? (рекомендуем использовать)", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	
КонецПроцедуры     

&НаКлиенте
Процедура ВопросПроХарактеристикуЗавершение(Результат, ДополнительныеПараметры) Экспорт   
	
	Если Результат <> Неопределено Тогда 
		
		Если Результат = КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		КонецЕсли;
		
		ИспользоватьХарактеристикуПриСопоставлении = Результат = КодВозвратаДиалога.Да; 
		
		// 1. Запуск фонового задания на сервере
		ДлительнаяОперация = НачатьЗаполнениеНоменклатуры(Объект.Ссылка, ИспользоватьХарактеристикуПриСопоставлении);
		
		// 2. Подключение обработчика завершения фонового задания.
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.Интервал = 1;            
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнениеНоменклатурыЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗаполнениеНоменклатуры(Ссылка, ИспользоватьХарактеристикуПриСопоставлении = Истина)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыФункции = Новый Структура("Ссылка, ИспользоватьХарактеристикуПриСопоставлении", Ссылка, ИспользоватьХарактеристикуПриСопоставлении);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Справочники.ГосударственныеКонтракты.ЗаполнитьНоменклатуруПартнераВДокументахСДоговорами", ПараметрыФункции);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнениеНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И Результат.Статус = "Выполнено" Тогда
		
		Сообщение = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);	
		Если ТипЗнч(Сообщение) = Тип("Структура") Тогда 
			Сообщения = Новый Массив;
			Сообщения.Добавить(Сообщение);
		Иначе 
			Сообщения = Сообщение;
		КонецЕсли;
		
		Для Каждого Сообщение Из Сообщения Цикл 
			ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение.Текст, Сообщение.Ключ);
		КонецЦикла;                                  
		
	ИначеЕсли Результат <> Неопределено
		И Результат.Статус = "Ошибка" Тогда
		
		ТекстОшибки = НСтр("ru = 'Во время редактирования данных произошла ошибка. 
		|Подробнее см. в журнале регистрации. " + Результат.ПодробноеПредставлениеОшибки + "'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		
	ИначеЕсли Результат = Неопределено Тогда 
		
	КонецЕсли;
	
КонецПроцедуры
//--РС Консалт Назаров М.Ю. 10 ноября 2022 г. 5:16:41

&НаСервере
&Вместо("ПередЗаписьюНаСервере")
Процедура РСК_ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Вставить содержимое метода.
	//ПродолжитьВызов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
		
	Если Не ТекущийОбъект.Код = "" Тогда
		ТекущийОбъект.Код = "";
	КонецЕсли;
	
	Если ТекущийОбъект.ТипНаправленияДеятельности = Перечисления.ТипыНаправленийДеятельности.КонтрактГОЗ И Не НомерГОЗУникален() Тогда
		ОписаниеОшибки = НСтр("ru = 'Номер по государственному оборонному заказу не уникален.';
		|en = 'State defense order number is not unique.'");
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , , "Объект.НомерГОЗ");
		Отказ = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС	
	Если Модифицированность Тогда
		ТекущийОбъект.НоменклатураОбъектовЗакупки.Очистить();
		Дерево = РеквизитФормыВЗначение("ДеревоОбъектовЗакупки");
		Для каждого СтрокаНоменклатуры Из Дерево.Строки Цикл
			
			// РС Консалт Назаров 30.09.2022
			// Добавил цикл по внутренним строкам дерева
			Для Каждого Строка123 Из СтрокаНоменклатуры.Строки Цикл
				Если ЗначениеЗаполнено(Строка123.Номенклатура) Тогда
					Строка = ТекущийОбъект.НоменклатураОбъектовЗакупки.Добавить();
					Строка.Номенклатура = Строка123.Номенклатура;
					Строка.НоменклатураПартнера = СтрокаНоменклатуры.НоменклатураПартнера;
					Строка.Идентификатор = СтрокаНоменклатуры.Идентификатор;
					
					Если ЗначениеЗаполнено(СтрокаНоменклатуры.НоменклатураПартнера.Характеристика) Тогда 
						Строка.Характеристика = СтрокаНоменклатуры.НоменклатураПартнера.Характеристика;
					Иначе         
						Строка.Характеристика = Строка123.Характеристика;
					КонецЕсли; 
					
					Если ЗначениеЗаполнено(СтрокаНоменклатуры.НоменклатураПартнера.Упаковка) Тогда 
						Строка.Упаковка = СтрокаНоменклатуры.НоменклатураПартнера.Упаковка;    
					Иначе   
						Строка.Упаковка = Строка123.Упаковка;    
					КонецЕсли;   
					
					Строка.Количество = Строка123.Количество;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ЭлектронноеАктированиеЕИС.ПередЗаписьюНаСервереГосударственногоКонтракта(
	ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);	
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	
КонецПроцедуры

//++РС Консалт Назаров М.Ю. 10 ноября 2022 г. 5:16:07                  
&НаКлиенте
Процедура РСК_РС_СоздатьЗаказыПосле(Команда)
	
	Отказ = ПроверкаПередСозданиемЗаказов();

	Если Не Отказ Тогда 
		
		Если Модифицированность Тогда
			ДополнительныеПараметры = Новый Структура;
			Ответ = Неопределено;
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьКонтрактЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			НСтр("ru = 'Необходимо записать объект для выполнения операции. Записать?';
			|en = 'To proceed, you need to save the object. Do you want to save the object?'"), РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		СоздатьЗаказыНаФоне();    
		
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Функция ПроверкаПередСозданиемЗаказов()
	
	Отказ = Ложь;

	Если Не ПроверкаЗаполненностиСопоставления() Тогда 
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не вся номенклатура сопоставлена. Сопоставьте номенклатуру по команде 'Сопоставить номенклатуру'");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.РСК_Сделка) Тогда 
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено значение <Сделка>", ,"РСК_Сделка", "Объект");
	КонецЕсли;  
	
	ВладельцыКонтракта = ЭлектронноеАктированиеЕИСУТ.ПолучитьВсеДоговораГосконтракта(Объект.Ссылка);
	Если ВладельцыКонтракта.Количество() = 0 Тогда                 
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено значение <Договор>");
	КонецЕсли;  
	                                                                                         	
	Возврат Отказ;
			
КонецФункции

&НаСервере
Функция ПроверкаЗаполненностиСопоставления()
	
	Для Каждого Строка Из Объект.ОбъектыЗакупки Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Строка.Идентификатор);
		
		НайденныеСтроки = Объект.НоменклатураОбъектовЗакупки.НайтиСтроки(Отбор);		
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьКонтрактЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ОчиститьСообщения();
		Записать(ПараметрыЗаписи);
		СоздатьЗаказыНаФоне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказыНаФоне() Экспорт 
	
	// 1. Запуск фонового задания на сервере
	ДлительнаяОперация = НачатьСозданиеЗаказов();
	
	// 2. Подключение обработчика завершения фонового задания.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал = 1;            
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьСозданиеЗаказов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьСозданиеЗаказов()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыФункции = Новый Структура; 
	ПараметрыФункции.Вставить("ГосКонтракт", Объект.Ссылка);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Справочники.ГосударственныеКонтракты.СозданиеЗаказовПоКонтракту", ПараметрыФункции);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьСозданиеЗаказов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И Результат.Статус = "Выполнено" Тогда
		
		Сообщение = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);	
		Если ТипЗнч(Сообщение) = Тип("Структура") Тогда 
			Сообщения = Новый Массив;
			Сообщения.Добавить(Сообщение);
		Иначе 
			Сообщения = Сообщение;
		КонецЕсли;
		
		Для Каждого Сообщение Из Сообщения Цикл 
			ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение.Текст, Сообщение.Ключ);
		КонецЦикла;                                  
		
	ИначеЕсли Результат <> Неопределено
		И Результат.Статус = "Ошибка" Тогда
		
		ТекстОшибки = НСтр("ru = 'Во время редактирования данных произошла ошибка. 
		|Подробнее см. в журнале регистрации. " + Результат.ПодробноеПредставлениеОшибки + "'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		
	ИначеЕсли Результат = Неопределено Тогда 
		
	КонецЕсли;
	
КонецПроцедуры
//--РС Консалт Назаров М.Ю. 10 ноября 2022 г. 5:16:07

//++РС Консалт Назаров М.Ю. 10 ноября 2022 г. 5:15:54                  
&НаКлиенте
Процедура РСК_РСК_СделкаНачалоВыбораПосле(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Партнер", ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Партнер"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Оповещение = Новый ОписаниеОповещения("ВыборСделкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.СделкиСКлиентами.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры      

&НаКлиенте 
Процедура ВыборСделкиЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.РСК_Сделка = Результат;
	
	ЗаполнитьНомерИГК();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомерИГК()
	
	Если Не ЗначениеЗаполнено(Объект.НомерИГК) И ЗначениеЗаполнено(Объект.ВнутреннийИдентификаторЕИС) Тогда 
		Объект.НомерИГК = Объект.ВнутреннийИдентификаторЕИС;
	КонецЕсли;

КонецПроцедуры        

&НаКлиенте
Процедура РСК_РС_СопоставитьНоменклатуруПосле(Команда)       
	
	Если Не ЗначениеЗаполнено(Объект.РСК_Сделка) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено значение 'Сделка'", , "РСК_Сделка", "Объект");
		Возврат;			
	КонецЕсли;
	
	КоммерческоеПредложение = НайтиКоммерческоеПредложениеПоСделке();
	Если Не ЗначениеЗаполнено(КоммерческоеПредложение) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Не найдено 'Коммерческое предложение' по сделке '%1' для сопоставления", Объект.РСК_Сделка));
		Возврат;	
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектыЗакупки", Объект.ОбъектыЗакупки);
	ПараметрыФормы.Вставить("НоменклатураОбъектовЗакупки", Объект.НоменклатураОбъектовЗакупки);
	ПараметрыФормы.Вставить("КоммерческоеПредложение", КоммерческоеПредложение);
	ПараметрыФормы.Вставить("ГосКонтракт", Объект.Ссылка);
	
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ЗакрытиеФормыСопоставления", ЭтотОбъект);
	ОткрытьФорму("Справочник.ГосударственныеКонтракты.Форма.РСК_СопоставлениеНоменклатуры", ПараметрыФормы, ЭтаФорма, ,,, ОповещениеЗакрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры     

&НаКлиенте
Процедура ЗакрытиеФормыСопоставления(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		
		ПрименитьСопоставление(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьСопоставление(Таблица)
	
	Объект.НоменклатураОбъектовЗакупки.Загрузить(Таблица.Выгрузить());
	
	Записать();
	
	ЗаполнитьДеревоОбъектовЗакупки();
	
КонецПроцедуры

&НаСервере
Функция НайтиКоммерческоеПредложениеПоСделке()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Первые 1
		|	КоммерческоеПредложениеКлиенту.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
		|ГДЕ
		|	КоммерческоеПредложениеКлиенту.Сделка = &Сделка И КоммерческоеПредложениеКлиенту.Проведен";
	
	Запрос.УстановитьПараметр("Сделка", Объект.РСК_Сделка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		                                                 	
	КонецЕсли;
	
	Возврат Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура РСК_РС_СозданныеЗаказыПосле(Команда)
	РСК_РС_СозданныеЗаказыПослеНаСервере();
КонецПроцедуры

&НаСервере
Процедура РСК_РС_СозданныеЗаказыПослеНаСервере() 
	
	Элементы.РС_СозданныеЗаказы.Заголовок = "Показать созданные заказы клиентов";
	Элементы.РС_СозданныеЗаказы.Картинка = БиблиотекаКартинок.Назад;
	
	Элементы.РСК_СозданныеЗаказы.Видимость = Не Элементы.РСК_СозданныеЗаказы.Видимость;
	
	Если Элементы.РСК_СозданныеЗаказы.Видимость Тогда 
		
		РСК_СозданныеЗаказы.Очистить();
		
		Заказы = Справочники.ГосударственныеКонтракты.ПоискЗаказаПоСделке(Объект.РСК_Сделка, Объект.Ссылка);
		РСК_СозданныеЗаказы.Загрузить(Заказы);					
		
		Элементы.РС_СозданныеЗаказы.Заголовок = "Спрятать заказы клиентов";
		Элементы.РС_СозданныеЗаказы.Картинка = БиблиотекаКартинок.Вперед;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_РСК_СделкаПриИзмененииПосле(Элемент)
	
	ЗаполнитьНомерИГК();
	
КонецПроцедуры

&НаКлиенте
Процедура РСК_РС_СоздатьДоговорПосле(Команда)
	
	//+РС Консалт Назаров М.Ю. 29.11.2022 11:32:48
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Государственный контракт еще не записан. Перед созданием договора необходимо записать государственный контракт.';
		|en = 'The state contract is not saved. Before choosing a contract, save the state contract.'"));	
		Возврат;
	КонецЕсли;  
	
	Договор = СоздатьДоговорККонтракту();    
	Если ЗначениеЗаполнено(Договор) Тогда 
		ДоговорОбработкаВыбора(Договор);
	КонецЕсли;
	//-РС Консалт Назаров М.Ю. 29.11.2022 11:32:48
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОсновнойБанковскийСчет(Организация)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций.ДополнительныеРеквизиты КАК БанковскиеСчетаОрганизацийДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО (БанковскиеСчетаОрганизацийДополнительныеРеквизиты.Ссылка = БанковскиеСчетаОрганизаций.Ссылка)
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Владелец
	|	И БанковскиеСчетаОрганизацийДополнительныеРеквизиты.Свойство = &Свойство
	|   И БанковскиеСчетаОрганизацийДополнительныеРеквизиты.Значение = &Значение";
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ОсновнойСчет"));
	Запрос.УстановитьПараметр("Значение", Истина);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
    
КонецФункции

&НаСервере
Функция СоздатьДоговорККонтракту()
	
	Попытка    
		
		УстановитьПривилегированныйРежим(Истина);
		
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Заполнить(Объект.Контрагент.Партнер);
		НовоеНаименование = СтрЗаменить(Объект.Наименование, "РК", "ГК");
		НовыйДоговор.Наименование = НовоеНаименование;
		НовыйДоговор.НаименованиеДляПечати = НовоеНаименование;
		НовыйДоговор.Контрагент = Объект.Контрагент;
		НовыйДоговор.Партнер = Объект.Контрагент.Партнер;
		НовыйДоговор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		НовыйДоговор.Организация = Объект.Организация;
		НовыйДоговор.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Департамент продаж ГЗ");
		НовыйДоговор.Менеджер = Пользователи.ТекущийПользователь();
		НовыйДоговор.ГосударственныйКонтракт = Объект.Ссылка;
		НовыйДоговор.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("110001");  // Поступления от покупателей
		НовыйДоговор.БанковскийСчет = ПолучитьОсновнойБанковскийСчет(НовыйДоговор.Организация);
		НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
		
		Если Объект.ЕстьАвансы Или Объект.ЕстьАвансыПоЭтапам Тогда 
			НовыйДоговор.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным;
		Иначе
			НовыйДоговор.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
		КонецЕсли;
		
		КлючСловоНачала = "№";
		КлючСловоОкончания = "от";
		ИндексНачала = СтрНайти(Объект.Наименование, КлючСловоНачала) + 1;
		ИндексОкончания = СтрНайти(Объект.Наименование, КлючСловоОкончания) - 1;
		
		Номер = Сред(Объект.Наименование, ИндексНачала, ИндексОкончания - ИндексНачала);
		Номер = СокрЛП(Номер);
		НовыйДоговор.Номер = Номер;
		
		ДатаНачалаДействия = ОпределитьДатуНачалаКонтракта(ИндексОкончания, КлючСловоОкончания);
		НовыйДоговор.Дата = ДатаНачалаДействия;
		НовыйДоговор.ДатаНачалаДействия = ДатаНачалаДействия;
		
		ДатыОкончанияЭтапов = Объект.ЭтапыИсполнения.Выгрузить().ВыгрузитьКолонку("ДатаОкончания");
		
		ДатаОкончанияДействия = ДатаНачалаДействия;
		Если ДатыОкончанияЭтапов.Количество() > 0 Тогда 
			ДатаОкончанияДействия = ДатыОкончанияЭтапов[0];
		КонецЕсли;
		
		Для Каждого ДатаЭтапа Из ДатыОкончанияЭтапов Цикл
			Если ДатаЭтапа > ДатаОкончанияДействия Тогда 
				ДатаОкончанияДействия = ДатаЭтапа;
			КонецЕсли;
		КонецЦикла;
		
		НовыйДоговор.ДатаОкончанияДействия = ДатаОкончанияДействия;
		
		Попытка
			НовыйДоговор.Записать();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Записан договор: " + НовыйДоговор.Ссылка);
			УстановитьПривилегированныйРежим(Ложь);
			Возврат НовыйДоговор.Ссылка;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать договор, по причине: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Неопределено;
				
	Исключение   
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать договор, по причине: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ОпределитьДатуНачалаКонтракта(Знач ИндексОкончания, Знач КлючСловоОкончания)
	
	ДатаСтрокой = СокрЛП(Сред(Объект.Наименование, ИндексОкончания + 1 + СтрДлина(КлючСловоОкончания)));
	
	ЧастиДат = СтрРазделить(ДатаСтрокой, ".");
	Если ЧастиДат.Количество() = 3 Тогда 
		День = ЧастиДат[0];	
		Месяц = ЧастиДат[1];	
		Год = ЧастиДат[2];	
		
		Даты = Новый Массив;
		Даты.Добавить(Год);
		Даты.Добавить(Месяц);
		Даты.Добавить(День);
		
		ДатаСтрокой = СтрСоединить(Даты, ".");
		ДатаНачалаДействия = Дата(СтрЗаменить(ДатаСтрокой,".",""));
		
	КонецЕсли;           
	
	Возврат ДатаНачалаДействия;

КонецФункции

&НаСервере
&ИзменениеИКонтроль("ОбновитьИнформациюПоДоговорам")
Функция РСК_ОбновитьИнформациюПоДоговорам()
	#Вставка
	//+РС Консалт Назаров М.Ю. 29.11.2022 11:37:26
	Элементы.РС_СоздатьДоговор.Видимость = Ложь;
	//-РС Консалт Назаров М.Ю. 29.11.2022 11:37:26
	#КонецВставки

	МассивСтрок = Новый Массив();

	ВладельцыКонтракта = ЭлектронноеАктированиеЕИСУТ.ПолучитьВсеДоговораГосконтракта(Объект.Ссылка);

	Если ВладельцыКонтракта.Количество() = 0 Тогда
		МассивСтрок.Добавить(
		Новый ФорматированнаяСтрока(НСтр("ru = 'Выбрать договор контрагента';
		|en = 'Select counterparty contract'"), , WebЦвета.Кирпичный, , "ВыбратьДоговор"));
		#Вставка
		//+РС Консалт Назаров М.Ю. 29.11.2022 11:37:54
		Элементы.РС_СоздатьДоговор.Видимость = Истина;
		//-РС Консалт Назаров М.Ю. 29.11.2022 11:37:54
		#КонецВставки
	ИначеЕсли ВладельцыКонтракта.Количество() = 1 Тогда
		МассивСтрок.Добавить(
		Новый ФорматированнаяСтрока(Строка(ВладельцыКонтракта[0].Значение), , ЦветаСтиля.ГиперссылкаЦвет, , ПолучитьНавигационнуюСсылку(ВладельцыКонтракта[0].Значение)));
	Иначе
		ТекстПокупателей = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
		ВладельцыКонтракта.Количество(),
		НСтр("ru = 'договор с контрагентом';
		|en = 'contract with counterparty'"), НСтр("ru = 'договора с контрагентами';
		|en = 'contract with counterparty'"), НСтр("ru = 'договоров с контрагентами';
		|en = 'contracts with counterparties'"), НСтр("ru = 'м';
		|en = 'm'"));
		Текст = СтрШаблон(НСтр("ru = 'Выбрано %1 %2';
		|en = 'Selected %1 %2'"), ВладельцыКонтракта.Количество(), ТекстПокупателей);
		МассивСтрок.Добавить(
		Новый ФорматированнаяСтрока(Текст, , ЦветаСтиля.ГиперссылкаЦвет, , "ОткрытьФормуДоговора"));
	КонецЕсли;

	ТекстВладельцыКонтракта = Новый ФорматированнаяСтрока(МассивСтрок);

КонецФункции

//+РС Консалт Назаров М.Ю. 27.01.2023 13:57:04
&НаКлиенте
Процедура РСК_РС_ПолучитьИзЕИСПосле(Команда)
	
	РС_ПолучитьИзЕИСНаСервере();
	
КонецПроцедуры

Процедура РС_ПолучитьИзОткрытойЧастиЕИСНаСервере()
	
	Если НЕ ПроверитьРеестровыйНомер() Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаДляЗагрузки = "https://zakupki.gov.ru/epz/contract/printForm/"
		+ "viewXml.html?contractReestrNumber=" + Объект.РеестровыйНомерКонтракта;
	РезультатЗагрузки = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(
		СсылкаДляЗагрузки);
	Если НЕ РезультатЗагрузки.Статус Тогда
		ОписаниеОшибки = НСтр("ru = 'При загрузке контракта с сервера ЕИС возникла ошибка:';
								|en = 'При загрузке контракта с сервера ЕИС возникла ошибка:'")
			+ Символы.ПС + РезультатЗагрузки.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	АдресДанныхКонтракта = РезультатЗагрузки.Путь;
	
	РС_ЗаполнитьИзДанныхКонтракта(АдресДанныхКонтракта, Объект.РеестровыйНомерКонтракта);
	
	ПослеЗаполненияДанныхКонтрактаИзВнешнегоИсточника();
	
КонецПроцедуры


Процедура РС_ПолучитьИзЕИСНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнена организация.';
								|en = 'Company is required.'");
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , , "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	Настройки = ЭлектронноеАктированиеЕИС.НастройкиОбменаЕИС(Объект.Организация);
	Если НЕ ЗначениеЗаполнено(Настройки) Тогда
		Если ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
			Настройки = ЭлектронноеАктированиеЕИС.НастройкиОбменаЕИСЗаказчика(Объект.Организация);
			Если НЕ ЗначениеЗаполнено(Настройки) Тогда
				ОписаниеОшибки = НСтр("ru = 'Не заполнены настройки обмена с ЕИС для организации.';
										|en = 'Не заполнены настройки обмена с ЕИС для организации.'");
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , , "Объект.Организация");
			Иначе
				// Организация является заказчиком, возможно получение только из открытой части.
				РС_ПолучитьИзОткрытойЧастиЕИСНаСервере();
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьРеестровыйНомер() Тогда
		Возврат;
	КонецЕсли;

	// Должно выполняться если организация подключена к ЕИС
	РезультатПолучения = ЭлектронноеАктированиеЕИС.
		СведенияОКонтрактеПоставщика(Объект.Организация, Объект.РеестровыйНомерКонтракта);
	Если НЕ РезультатПолучения.Выполнено Тогда
		ОбщегоНазначения.СообщитьПользователю(РезультатПолучения.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Если РезультатПолучения.Контракты.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru = 'Контракт не найден.';
								|en = 'Contract is not found.'");
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	СодержимоеКонтракта = РезультатПолучения.Контракты[0];
	
	Если СодержимоеКонтракта.ОшибкаПриСкачивании Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось скачать данные контракта с сервера ЕИС.';
								|en = 'Cannot download contract data from the UIS server.'");
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контракт = СодержимоеКонтракта.ДанныеКонтракта;
	
	РС_ЗаполнитьИзДанныхКонтракта(Контракт);
	
	АдресДанныхКонтракта =
		ПоместитьВоВременноеХранилище(
			СодержимоеКонтракта.ДвоичныеДанныеКонтракта, УникальныйИдентификатор);
			
	ПослеЗаполненияДанныхКонтрактаИзВнешнегоИсточника();
	
КонецПроцедуры 

&НаСервере
Процедура РС_ЗаполнитьИзДанныхКонтракта(ДанныеКонтрактаИлиАдрес, Знач РеестровыйНомер = "")
	
	Если ЭтоАдресВременногоХранилища(ДанныеКонтрактаИлиАдрес) Тогда
		Данные = ПолучитьИзВременногоХранилища(ДанныеКонтрактаИлиАдрес);
		ДанныеКонтракта = ЭлектронноеАктированиеЕИС.РазобратьФайлКонтракта(Данные, "", Истина);
	Иначе
		ДанныеКонтракта = ДанныеКонтрактаИлиАдрес;
	КонецЕсли;
	
	ЭлектронноеАктированиеЕИСПолучениеВходящих.РС_ЗаполнитьИзДанныхКонтракта(ДанныеКонтракта, Объект);
	
	Если НЕ ПустаяСтрока(РеестровыйНомер)
		И ПустаяСтрока(Объект.РеестровыйНомерКонтракта) Тогда
		Объект.РеестровыйНомерКонтракта = РеестровыйНомер;
	КонецЕсли;	
	
КонецПроцедуры
//-РС Консалт Назаров М.Ю. 27.01.2023 13:57:04








