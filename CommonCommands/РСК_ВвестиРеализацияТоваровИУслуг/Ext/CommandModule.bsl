
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	Если ПараметрыВыполненияКоманды.Источник.ИмяФормы = "Документ.РСК_ОтчетПоВыдачеТСР.Форма.ФормаДокумента" 
		И ПараметрыВыполненияКоманды.Источник.Модифицированность = Истина Тогда
		
		ПоказатьПредупреждение(,"Нужно записать изменения в документе");
		Возврат;
		
	КонецЕсли;

	ФормаРеализации = ПолучитьФорму(
		"Документ.РеализацияТоваровУслуг.ФормаОбъекта",,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно, 
		ПараметрыВыполненияКоманды.НавигационнаяСсылка
	);
	ДанныеФормы = ФормаРеализации.Объект;
	ЗаполнитьФормуНаСервере(ДанныеФормы, ПараметрКоманды);
	КопироватьДанныеФормы(ДанныеФормы, ФормаРеализации.Объект);
	ФормаРеализации.Открыть();
	
	//СоздатьРеализациюНаСервере(ПараметрКоманды);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуНаСервере(ДанныеФормы, ОтчетПоВыдачеТСР)
	УстановитьПривилегированныйРежим(Истина);
	оРеал = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	оРеал.Заполнить(ОтчетПоВыдачеТСР);
	ЗначениеВДанныеФормы(оРеал, ДанныеФормы);
КонецПроцедуры

&НаСервере
Процедура СоздатьРеализациюНаСервере(ОтчетПоВыдачеТСР)
	УстановитьПривилегированныйРежим(Истина);	
	Отказ = Ложь;
	НужноЗаписыватьЗаказ = Ложь;
	
	#Область Проверки
	Если РеализацияУжеСуществует(ОтчетПоВыдачеТСР) Тогда
		Возврат;
	КонецЕсли;
	
	Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетПоВыдачеТСР, "Контракт");
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			"Нужно указать заказ клиента",
			ОтчетПоВыдачеТСР,
			"Контракт"
		);
		Возврат;
	КонецЕсли;
	
	СтруктураЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "Склад,Проведен,Склад.ЭтоГруппа");
	Если НЕ СтруктураЗаказа.Проведен Тогда
		ОбщегоНазначения.СообщитьПользователю(
			"Нужно провести " + Заказ,
			Заказ
		);
		Возврат;
	КонецЕсли;
	Если НЕ СтруктураЗаказа.СкладЭтоГруппа Тогда
		ОбщегоНазначения.СообщитьПользователю(
			"Нужно указать группу складов, а не конкретный склад",
			Заказ,
			"Склад"
		);
		Возврат;
	КонецЕсли;
	
	//++ РС Консалт: Трофимов Евгений 06.11.2022 Тикет 21687
	//e1cib/data/Документ.Задание?ref=9ca20fe17ea484fc480d724bf6117e5a
	//Рефакторинг:
	//ОсновнойСкладТСР = Справочники.РСК_Константы.ПолучитьЗначение("Основной склад ТСР", Справочники.Склады.ПустаяСсылка());
	ОсновнойСкладТСР = РегистрыСведений.реа_ПредопределенныеЗначения.Значение(
		"РС_ОсновнойСклад",
		Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("bf1a5b8f-c6af-11ec-a3cf-107d1afd3175"))
	);
	//-- КонецТикета 21687
	
	Если НЕ ЗначениеЗаполнено(ОсновнойСкладТСР) Тогда
		ОбщегоНазначения.СообщитьПользователю("Укажите основной склад ТСР в константах");
		Возврат;
	КонецЕсли;
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапросаОстатковТСРвЗаказе());
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ОсновнойСкладТСР", ОсновнойСкладТСР);
	Запрос.УстановитьПараметр("ОтчетПоВыдачеТСР", ОтчетПоВыдачеТСР);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	тзОстаткиВЗаказе = РезультатыЗапроса[2].Выгрузить();
	тзПотребность = РезультатыЗапроса[3].Выгрузить();
	Если тзПотребность.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("Не удалось собрать данные для заполнения реализации. Обратитесь к программисту 1С");
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	//Заполнение шапки Реализации
	оЗаказ = Заказ.ПолучитьОбъект();
	Если Ложь Тогда оЗаказ = Документы.ЗаказКлиента.СоздатьДокумент(); КонецЕсли;
	оРеал = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	#Область ЗаполнениеШапкиРеализации
	//Код создан генератором: https://infostart.ru/public/1482423/
	оРеал.Дата = ТекущаяДатаСеанса();
	оРеал.Валюта = оЗаказ.Валюта;
	оРеал.ВалютаВзаиморасчетов = оЗаказ.Валюта;
	оРеал.ЗаказКлиента = Заказ;
	оРеал.Организация = оЗаказ.Организация;
	оРеал.Контрагент = оЗаказ.Контрагент;
	оРеал.УстановитьНовыйНомер();
	оРеал.Менеджер = оЗаказ.Менеджер;
	оРеал.НалогообложениеНДС = оЗаказ.НалогообложениеНДС;
	оРеал.ЦенаВключаетНДС = оЗаказ.ЦенаВключаетНДС;
	оРеал.Партнер = оЗаказ.Партнер;
	оРеал.Склад = оЗаказ.Склад;
	//Почему-то с несколькими складами не хочет проводиться. Сделаем пока с одним.
	оРеал.Склад = тзПотребность[0].СкладВыдачи;
	
	оРеал.Согласован = Истина;
	оРеал.Соглашение = оЗаказ.Соглашение;
	оРеал.Договор = оЗаказ.Договор;
	оРеал.СкидкиРассчитаны = Истина;
	оРеал.ХозяйственнаяОперация = оЗаказ.ХозяйственнаяОперация;
	оРеал.РеализацияПоЗаказам = Истина;
	оРеал.ГруппаФинансовогоУчета = оЗаказ.ГруппаФинансовогоУчета;
	оРеал.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	оРеал.Автор = ПараметрыСеанса.ТекущийПользователь;
	оРеал.СпособДоставки = оЗаказ.СпособДоставки;
	оРеал.АдресДоставкиЗначенияПолей = оЗаказ.АдресДоставкиЗначенияПолей;
	оРеал.Руководитель = оЗаказ.Руководитель;
	оРеал.ГлавныйБухгалтер = оЗаказ.ГлавныйБухгалтер;
	оРеал.ПорядокРасчетов = оЗаказ.ПорядокРасчетов;
	оРеал.ДатаВозвратаМногооборотнойТары = ТекущаяДатаСеанса() + 3600*24;
	оРеал.ОснованиеДата = оЗаказ.Дата;
	оРеал.ОснованиеНомер = оЗаказ.Номер;
	оРеал.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	оРеал.КурсЧислитель = 1;
	оРеал.КурсЗнаменатель = 1;
	оРеал.УдалитьПорядокОплаты = Перечисления.УдалитьПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	оРеал.РСК_ДокументОснованиеОтчетПоВыдаче = ОтчетПоВыдачеТСР;
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", оРеал.ЦенаВключаетНДС);
	СтруктураЗаполненияЦены.Вставить("НалогообложениеНДС", оРеал.НалогообложениеНДС);
	СтруктураЗаполненияЦены.Вставить("Дата", оРеал.Дата);
	#КонецОбласти
	
	СтруктураПоиска = Новый Структура("ТСР,Номенклатура,Характеристика,Серия");
	Для Каждого Потребность Из тзПотребность Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Потребность);
		НайденныеСтроки = тзОстаткиВЗаказе.НайтиСтроки(СтруктураПоиска);
		Для Каждого ОстатокЗаказа Из НайденныеСтроки Цикл
			Если Потребность.Количество <= 0 Тогда
				Прервать;
			ИначеЕсли ОстатокЗаказа.КоличествоЗаказа <= 0 Тогда
				Продолжить;
			КонецЕсли;
			МожноСписать = Мин(Потребность.Количество, ОстатокЗаказа.КоличествоЗаказа);
			
			#Область РаботаСЗаказом
			НужноЗаписыватьЗаказ = Истина;
			СтрокаЗаказа = оЗаказ.Товары.НайтиСтроки(Новый Структура("КодСтроки", ОстатокЗаказа.КодСтрокиЗаказа));
			Если СтрокаЗаказа[0].КоличествоУпаковок = 0 Тогда
				КоэффициентУпаковки = 1;
			Иначе
				КоэффициентУпаковки = СтрокаЗаказа[0].Количество / СтрокаЗаказа[0].КоличествоУпаковок;
			КонецЕсли;

			//Разбиваем строку заказа на две, если до этого уже не разбили
			ПоискРанееРазбитых = Новый Структура;
			ПоискРанееРазбитых.Вставить("Склад", Потребность.СкладВыдачи);
			ПоискРанееРазбитых.Вставить("НоменклатураПартнера", Потребность.ТСР);
			ПоискРанееРазбитых.Вставить("Номенклатура", Потребность.Номенклатура);
			ПоискРанееРазбитых.Вставить("Характеристика", Потребность.Характеристика);
			ПоискРанееРазбитых.Вставить("Серия", Потребность.Серия);
			РанееРазбитые = оЗаказ.Товары.НайтиСтроки(ПоискРанееРазбитых);
			
			Если РанееРазбитые.Количество() > 0 Тогда
				НоваяСтрокаЗаказа = РанееРазбитые[0];
				НоваяСтрокаЗаказа.КоличествоУпаковок = НоваяСтрокаЗаказа.КоличествоУпаковок + МожноСписать;
			Иначе
				НоваяСтрокаЗаказа = оЗаказ.Товары.Вставить(оЗаказ.Товары.Индекс(СтрокаЗаказа[0])+1);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказа, СтрокаЗаказа[0]);
				НоваяСтрокаЗаказа.КодСтроки = РСК_ВызовСервера.ПолучитьНовыйКлючСтрокиТЗ2(оЗаказ.Товары.Выгрузить(), "КодСтроки");
				НоваяСтрокаЗаказа.КлючСвязи = НоваяСтрокаЗаказа.КодСтроки;
				НоваяСтрокаЗаказа.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
				НоваяСтрокаЗаказа.Склад = Потребность.СкладВыдачи;
				НоваяСтрокаЗаказа.КоличествоУпаковок = МожноСписать;
			КонецЕсли;
			НоваяСтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			НоваяСтрокаЗаказа.Количество = НоваяСтрокаЗаказа.КоличествоУпаковок * КоэффициентУпаковки;
			СтрокаЗаказа[0].КоличествоУпаковок = СтрокаЗаказа[0].КоличествоУпаковок - МожноСписать;
			СтрокаЗаказа[0].Количество = СтрокаЗаказа[0].КоличествоУпаковок * КоэффициентУпаковки;	

			СтруктураДействий = Новый Структура();
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураЗаполненияЦены);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураЗаполненияЦены);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаЗаказа[0], СтруктураДействий, Неопределено);			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаЗаказа, СтруктураДействий, Неопределено);			
			
			Если СтрокаЗаказа[0].Количество = 0 Тогда
				оЗаказ.Товары.Удалить(оЗаказ.Товары.Индекс(СтрокаЗаказа[0]));
			КонецЕсли;
			#КонецОбласти
			
			СтрокаРеализации = оРеал.Товары.Добавить();
			СтрокаРеализации.Склад = Потребность.СкладВыдачи;
			СтрокаРеализации.Номенклатура = Потребность.Номенклатура;
			СтрокаРеализации.Характеристика = Потребность.Характеристика;
			СтрокаРеализации.Серия = Потребность.Серия;
			СтрокаРеализации.СтатусУказанияСерий = НоваяСтрокаЗаказа.СтатусУказанияСерий;
			СтрокаРеализации.Упаковка = НоваяСтрокаЗаказа.Упаковка;
			СтрокаРеализации.КоличествоУпаковок = МожноСписать;
			СтрокаРеализации.Количество = СтрокаРеализации.КоличествоУпаковок * КоэффициентУпаковки;
			СтрокаРеализации.Цена = НоваяСтрокаЗаказа.Цена;
			СтрокаРеализации.КодСтроки = НоваяСтрокаЗаказа.КодСтроки;
			СтрокаРеализации.КлючСвязи = РСК_ВызовСервера.ПолучитьНовыйКлючСтрокиТЗ2(оРеал.Товары.Выгрузить(), "КлючСвязи");
			СтрокаРеализации.СтавкаНДС = НоваяСтрокаЗаказа.СтавкаНДС;
			СтрокаРеализации.ЗаказКлиента = Заказ;
			СтрокаРеализации.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			СтруктураДействий = Новый Структура();
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураЗаполненияЦены);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураЗаполненияЦены);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРеализации, СтруктураДействий, Неопределено);			
			СтрокаРеализации.СуммаВзаиморасчетов = СтрокаРеализации.Сумма;
			
			Потребность.Количество = Потребность.Количество - МожноСписать;
			ОстатокЗаказа.КоличествоЗаказа = ОстатокЗаказа.КоличествоЗаказа - МожноСписать;
		КонецЦикла;
		
		//Если в заказе не нашлось - продадим сверх заказа
		Если Потребность.Количество > 0 Тогда
			СтрокаРеализации = оРеал.Товары.Добавить();
			СтрокаРеализации.Склад = Потребность.СкладВыдачи;
			СтрокаРеализации.Номенклатура = Потребность.Номенклатура;
			СтрокаРеализации.Характеристика = Потребность.Характеристика;
			СтрокаРеализации.Серия = Потребность.Серия;
			СтрокаРеализации.КоличествоУпаковок = Потребность.Количество;
			СтрокаРеализации.Количество = СтрокаРеализации.КоличествоУпаковок;
			СтрокаРеализации.Цена = Потребность.Цена;
			СтрокаРеализации.КлючСвязи = РСК_ВызовСервера.ПолучитьНовыйКлючСтрокиТЗ2(оРеал.Товары.Выгрузить(), "КлючСвязи");
			СтрокаРеализации.ЗаказКлиента = Заказ;
			СтрокаРеализации.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			СтруктураДействий = Новый Структура();
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", СтруктураЗаполненияЦены);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураЗаполненияЦены);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураЗаполненияЦены);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРеализации, СтруктураДействий, Неопределено);			
			СтрокаРеализации.СуммаВзаиморасчетов = СтрокаРеализации.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыУказанияСерий  = НоменклатураСервер.ПараметрыУказанияСерий(оРеал, Документы.РеализацияТоваровУслуг);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(оРеал, ПараметрыУказанияСерий);
			
	Если НужноЗаписыватьЗаказ Тогда
		
		Для Каждого НаборЗаписей Из оЗаказ.Движения Цикл
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЦикла;
		
		Попытка
			оЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ОбщегоНазначения.СообщитьПользователю(
				"Скорректирован " + Заказ,
				Заказ
			);
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(
				"Не удалось провести скорректированный заказ. Ошибка: " + ОписаниеОшибки(),
				Заказ,,,
				Отказ
			);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		//Не проводим реализацию сразу так как в договоре 
		//может быть указан порядок оплаты по договорам, а не по заказам.
		//В этом случае график оплаты в реализации не заполнится автоматически и реализация не проведётся.
	    оРеал.Записать(РежимЗаписиДокумента.Запись);
		ОбщегоНазначения.СообщитьПользователю(
			"Записана " + оРеал.Ссылка,
			оРеал.Ссылка
		);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			"Не удалось записать реализацию. Ошибка: " + ОписаниеОшибки(),,,,
			Отказ
		);
	КонецПопытки;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(
			"Корректировка заказа отменена",
			Заказ
		);
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры // СоздатьРеализациюНаСервере()

&НаСервере
Функция РеализацияУжеСуществует(ОтчетПоВыдачеТСР, Отказ = Ложь)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.РСК_ДокументОснованиеОтчетПоВыдаче = &ОтчетПоВыдачеТСР
		|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ОтчетПоВыдачеТСР", ОтчетПоВыдачеТСР);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьПользователю(
			"Для данного документа уже существует реализация " + Выборка.Ссылка,
			Выборка.Ссылка,,,
			Отказ
		);
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // РеализацияУжеСуществует()

&НаКлиентеНаСервере
Функция ТекстЗапросаОстатковТСРвЗаказе()

	Текст = 
		"ВЫБРАТЬ
		|	РСК_ОтчетПоВыдачеТСРРеестр.ТСР КАК ТСР,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Номенклатура КАК Номенклатура,
		|	РСК_ОтчетПоВыдачеТСРРеестр.ХарактеристикаНоменклатуры КАК Характеристика,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Акт.РСК_Серия КАК Серия,
		|	СУММА(РСК_ОтчетПоВыдачеТСРРеестр.Количество) КАК Количество,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Акт.Склад КАК СкладВыдачи,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Цена КАК Цена
		|ПОМЕСТИТЬ Требуется
		|ИЗ
		|	Документ.РСК_ОтчетПоВыдачеТСР.Реестр КАК РСК_ОтчетПоВыдачеТСРРеестр
		|ГДЕ
		|	РСК_ОтчетПоВыдачеТСРРеестр.Ссылка = &ОтчетПоВыдачеТСР
		|
		|СГРУППИРОВАТЬ ПО
		|	РСК_ОтчетПоВыдачеТСРРеестр.Номенклатура,
		|	РСК_ОтчетПоВыдачеТСРРеестр.ХарактеристикаНоменклатуры,
		|	РСК_ОтчетПоВыдачеТСРРеестр.ТСР,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Акт.РСК_Серия,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Акт.Склад,
		|	РСК_ОтчетПоВыдачеТСРРеестр.Цена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Требуется.ТСР КАК ТСР,
		|	Требуется.Номенклатура КАК Номенклатура,
		|	Требуется.Характеристика КАК Характеристика,
		|	Требуется.Серия КАК Серия,
		|	СУММА(Требуется.Количество) КАК Количество
		|ПОМЕСТИТЬ ПотребностьБезСклада
		|ИЗ
		|	Требуется КАК Требуется
		|
		|СГРУППИРОВАТЬ ПО
		|	Требуется.ТСР,
		|	Требуется.Номенклатура,
		|	Требуется.Характеристика,
		|	Требуется.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПотребностьБезСклада.ТСР КАК ТСР,
		|	ПотребностьБезСклада.Номенклатура КАК Номенклатура,
		|	ПотребностьБезСклада.Характеристика КАК Характеристика,
		|	ПотребностьБезСклада.Серия КАК Серия,
		|	ЗаказКлиентаТовары.КодСтроки КАК КодСтрокиЗаказа,
		|	ЗаказКлиентаТовары.КоличествоУпаковок КАК КоличествоЗаказа
		|ИЗ
		|	ПотребностьБезСклада КАК ПотребностьБезСклада
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ПО ПотребностьБезСклада.ТСР = ЗаказКлиентаТовары.НоменклатураПартнера
		|			И ПотребностьБезСклада.Номенклатура = ЗаказКлиентаТовары.Номенклатура
		|			И ПотребностьБезСклада.Характеристика = ЗаказКлиентаТовары.Характеристика
		|			И ПотребностьБезСклада.Серия = ЗаказКлиентаТовары.Серия
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка = &Заказ
		|	И ЗаказКлиентаТовары.Склад = &ОсновнойСкладТСР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Требуется.ТСР КАК ТСР,
		|	Требуется.Номенклатура КАК Номенклатура,
		|	Требуется.Характеристика КАК Характеристика,
		|	Требуется.Серия КАК Серия,
		|	Требуется.Количество КАК Количество,
		|	Требуется.СкладВыдачи КАК СкладВыдачи,
		|	Требуется.Цена КАК Цена
		|ИЗ
		|	Требуется КАК Требуется";
	
	Возврат Текст;

КонецФункции // ТекстЗапросаОстатковТСРвЗаказе()

&НаКлиентеНаСервере
Функция ЗависимыеРеквизитыСтрокой()
	
	Возврат "СуммаБезВозвратнойТары, СуммаНДСБезВозвратнойТары, СуммаСНДСБезВозвратнойТары,
		|СуммаРучнойСкидкиБезВозвратнойТары, СуммаАвтоматическойСкидкиБезВозвратнойТары,
		|СуммаОтмененоБезВозвратнойТары, СуммаНДСОтмененоБезВозвратнойТары, СуммаСНДСОтмененоБезВозвратнойТары,
		|СуммаРучнойСкидкиОтмененоБезВозвратнойТары, СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары,
		|СуммаОтменено, СуммаНДСОтменено, СуммаСНДСОтменено,
		|СуммаРучнойСкидкиОтменено, СуммаАвтоматическойСкидкиОтменено";
	
КонецФункции